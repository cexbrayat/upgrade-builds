{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","../../../packages/upgrade/esm5/static/src/common/angular1.js","../../../packages/upgrade/esm5/static/src/common/constants.js","../../../packages/upgrade/esm5/static/src/common/component_info.js","../../../packages/upgrade/esm5/static/src/common/util.js","../../../packages/upgrade/esm5/static/src/common/downgrade_component_adapter.js","../../../packages/upgrade/esm5/static/src/common/downgrade_component.js","../../../packages/upgrade/esm5/static/src/static/angular1_providers.js","../../../packages/upgrade/esm5/static/src/static/util.js","../../../packages/upgrade/esm5/static/src/common/upgrade_helper.js","../../../packages/upgrade/esm5/static/src/static/upgrade_component.js","../../../packages/upgrade/esm5/static/src/static/upgrade_module.js","../../../packages/upgrade/esm5/static/src/static/downgrade_module.js"],"names":["exports","module","factory","require","noNg","Error","angular","bootstrap","element","version","undefined","window","ng","getAngularJSGlobal","prefix","dependencies","$COMPILE","$CONTROLLER","$INJECTOR","INJECTOR_KEY","PropertyBinding","prop","attr","this","parseBinding","prototype","bracketAttr","parenAttr","bracketParenAttr","capitalAttr","charAt","toUpperCase","substr","onAttr","DIRECTIVE_PREFIX_REGEXP","DIRECTIVE_SPECIAL_CHARS_REGEXP","controllerKey","name","getComponentName","component","DowngradeComponentAdapter","attrs","scope","ngModel","parentInjector","$injector","$compile","$parse","componentFactory","wrapCallback","implementsOnChanges","inputChangeCount","inputChanges","componentScope","$new","compileContents","_this","compiledProjectableNodes","groupProjectableNodes","map","nodes","empty","forEach","linkFn","clone","push","append","createComponent","ChangeDetectorRef","providers","provide","$SCOPE","useValue","childInjector","_angular_core","Injector","create","parent","componentRef","instance","testability","injector","get","Testability","TestabilityRegistry","registerApplication","location","nativeElement","supportsNgModel","$render","writeValue","$viewValue","registerOnChange","$setViewValue","bind","setupInputs","needsNgZone","propagateDigest","inputs","i","propName","templateName","input","INITIAL_VALUE","currValue","prevValue","updateInput","$observe","observeFn_1","unwatch_1","this_1","$watch","hasOwnProperty","bindAttr","bindonAttr","expr","watchFn","length","_loop_1","detectChanges","changeDetector","componentType","ngOnChanges","viewChangeDetector","markForCheck","unwatch_2","ApplicationRef","attachView","hostView","setupOutputs","j","outputs","output","substring","subscribeToOutput","isAssignment","getter","setter","assign","emitter","subscribe","next","v","$event","registerCleanup","destroy","on","$destroy","$on","destroyed","unregisterApplication","destroyComponentRef","getInjector","SimpleChange","ngContentSelectors","projectableNodes","ii","jj","node","ngContentIndex","findMatchingNgContentIndex","selector","matchesSelector","ngContentIndices","sort","wildcardNgContentIndex","el","_matches","elProto","Element","ParentInjectorPromise","injectorKey","callbacks","data","then","callback","resolve","tempInjectorRef","setTempInjectorRef","injectorFactory","rootScopeFactory","compileFactory","angular1Providers","token","notFoundValue","ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR","UpgradeHelper","elementRef","directive","$controller","$element","getDirective","directives","compile","link","notSupported","replace","terminal","getTemplate","fetchRemoteTemplate","template","getOrCall","templateUrl","$templateCache_1","url_1","Promise","reject","status","response","put","buildController","controllerType","$scope","locals","controller","controllerAs","compileTemplate","compileHtml","attachChildrenFn","cloneAttachFn","$template","contentChildNodes","transclude","slotMap_1","Object","filledSlots_1","keys","slotName","optional","slots_1","nodeName","toLowerCase","_","letter","filter","cloneAttach","nodeType","Node","TEXT_NODE","nodeValue","resolveAndBindRequiredControllers","controllerInstance","getDirectiveRequire","resolveRequire","directiveRequire","bindToController","isMap","requiredControllersMap_1","requiredControllers","key","html","innerHTML","childNodes","extractChildNodes","childNode","firstChild","removeChild","value","match","REQUIRE_PREFIX_RE","Array","isArray","req","value_1","inheritType","name_1","isOptional","searchParents","startOnParent","ctrlKey","elem","inheritedData","property","isFunction","twoWayBoundProperties","twoWayBoundLastValues","UpgradeComponent","helper","$parentScope","initializeOutputs","attachChildNodes","prepareTransclusion","bindingDestination","$componentScope","bindOutputs","pendingChanges","forwardChanges","$onInit","callDoCheck","$doCheck","unregisterDoCheckWatcher","$parent","preLink","pre","postLink","post","parentBoundTranscludeFn","$postLink","changes","ngDoCheck","bindings","looseIdentical","propertyToOutputMap","idx","newValue","oldValue","ɵlooseIdentical","outputName","emit","ngOnDestroy","$onDestroy","initializeBindings","btcIsObject","context","INITIAL_VALUE$1","expressionBoundProperties","json","JSON","stringify","bindingType","concat","currentValue","$onChanges","UpgradeModule","angular\n            .module","element$$1","modules","config","INIT_MODULE_NAME","UPGRADE_MODULE_NAME","upgradeModule","module$1","LAZY_MODULE_REF","has","testabilityDelegate","call","ng2Testability","isStable","whenStable","newWhenStable","intervalDelegate","wrappedInterval","fn","delay","count","invokeApply","pass","_i","arguments","ngZone","runOutsideAngular","setTimeout","run","apply","args","cancel","angular.element","$rootScope","subscription","onMicrotaskEmpty","$digest","windowAngular","resumeBootstrap","e","originalResumeBootstrap_1","ngZone_1","NgModule","decorators","target","desc","Reflect","decorate","r","c","defineProperty","__decorate","setAngularJSGlobal","cb","REQUIRE_INJECTOR","REQUIRE_NG_MODEL","required","ranAsync","lazyModuleRef","promise","ComponentFactoryResolver","resolveComponentFactory","info","injectorPromise","facade","$evalAsync","NgZone","isInAngularZone","doDowngrade","downgradeFn","platformBrowser","bootstrapFn","moduleFactoryOrBootstrapFn","angular.module","extraProviders","_angular_platformBrowser","bootstrapModuleFactory","LAZY_MODULE_NAME","ref","result","NgAdapterInjector"],"mappings":";;;;;0BAAA,iBAAAA,SAAA,oBAAAC,OAAAC,QAAAF,QAAAG,QAAA,iBAAAA,QAAA;;;;;;;;;;;;;SCYIC,OACA,MAAA,IAASC,MAAI,qCAEbC,SACAC,UAAAH,KACFH,OAAAG,KACEI,QAAAJ,KACAK,aAAIC,kBACUN,oBACbA,MAEL,uCAECE,QAAAK,OAAAL,8DAyBeM,IAAAA,GAAAH,iBAKdI,qBACSZ,OAAAA,mDAMA,OAAOK,QAAGL,OAAQa,OAAOC,8DClDzBC,0BAAS,YACTC,YAAS,cAGTC,UAAS,4CAWTC,aAAA,mLCTN,WACD,SAAAC,gBAAyBC,KAACC,MACtBC,KAAKF,KAAAA,KACLE,KAAKD,KAAAA,KACLC,KAAKC,sCAEMC,UAAUD,aAAY,WACjCD,KAAKG,YAAW,IAASH,KAAAD,KAAY,IACrCC,KAAKI,UAAU,IAAGJ,KAAQD,KAAG,IAC/BC,KAAAK,iBAAA,KAAAL,KAAAD,KAAA,KACF,IAAOO,YAAeN,KAACD,KAAAQ,OAAA,GAAAC,cAAAR,KAAAD,KAAAU,OAAA,GACvBT,KAAAU,OAAA,KAAAJ,mGAXC,GCIJK,wBAAA,qBACDC,+BAAyC,uBAEhCC,cAAQC,MAChB,MAAA,IAAAA,KAAA,sBAMGC,iBAAmBC;;;;;;;;+CCfF,6BAEU,oBAClBC,0BAAiBhC,QAAeiC,MAAAC,MAAAC,QAAAC,eAAAC,UAAAC,SAAAC,OAAAC,iBAAAC,cACrC1B,KAAKf,QAASA,QACde,KAAKkB,MAAQA,MACblB,KAAKmB,MAAMA,MACXnB,KAAKoB,QAAAA,QACLpB,KAAKqB,eAAeA,eACpBrB,KAAKsB,UAAAA,UACLtB,KAAKuB,SAAAA,SACLvB,KAAKwB,OAAAA,OACLxB,KAAKyB,iBAAiBA,iBACzBzB,KAAA0B,aAAAA,aACD1B,KAAA2B,qBAA0B,EACtB3B,KAAI4B,iBAAa,EACjB5B,KAAI6B,gBACJ7B,KAAI8B,eAAgBX,MAAQY,OA8LpC,iCA5L6B7B,UAAA8B,gBAAA,WACrB,IAAAC,MAAQjC,KACJkC,oCACIlC,KAAAmC,wBACqBC,IAAM,SAACC,OAAA,OAAAJ,MAAAV,SAAAc,SAQpC,YAPKpD,QAAEqD,gBACJC,QAAA,SAAAC,QACHA,OAAOP,MAAAd,MAAA,SAAyBsB,OAClCP,yBAAAQ,KAAAD,OACFR,MAAAhD,QAA0B0D,OAAAF,WAGjBP,oDAEAhC,UAA0B0C,gBAAa,SAAaC,kBACzD,IAAIC,YAAeC,QAAQC,OAAAC,SAAajD,KAAA8B,iBACpCoB,cAAaC,cAAiBC,SAASC,QAACP,UAAAA,UAAAQ,OAAAtD,KAAAqB,eAAAP,KAAA,6QAK5Cd,KAAIgB,UAAWhB,KAAOuD,aAAaC,SAKnC,IDCcpC,QAAAJ,UCDdyC,YAAkBzD,KAACuD,aAAcG,SAAWC,IAAAR,cAAAS,YAAA,MAC9CH,aACFzD,KAAAuD,aAA0BG,SAASC,IAACR,cAAcU,qBACrCC,oBAAQ9D,KAAAuD,aAAAQ,SAAAC,cAAAP,aDFHrC,QCIFpB,KAAKoB,QDJHJ,UCIShB,KAAAgB,oIDHtBiD,CAAAjD,aACJI,QAAA8C,QAAA,WAAAlD,UAAAmD,WAAA/C,QAAAgD,aACJpD,UAAAqD,iBAAAjD,QAAAkD,cAAAC,KAAAnD,qJCGqBlB,UAAasE,YAAA,SAAAC,YAAAC,qBACvBzC,MAAIjC,UACY,IAAhB0E,kBAAgBA,iBAAA,GAkDpB,QAjDIxD,MAAIlB,KAAMkB,aACFlB,KAAAyB,iBAAekD,mBACf,SAAIC,OAIiB9E,qBAHrB,IAAOD,gBAAU8E,OAAWC,GAAAC,SAAAF,OAAAC,GAAAE,gDAEnBC,MAAahF,MAAA,kBACDD,KAYzBiF,MAAIjF,eAXYkF,uBACHC,+BAEWC,mBAAUD,qCACzBC,YAAAF,gBACHE,UAAAD,WAEAhD,MAASkD,YAAYrF,KAAAoF,UAAaD,wCAKpCG,SAAWL,MAAChF,KAAAsF,aAInB,IAAAC,UAAAC,OAAAzD,eAAA0D,OAAA,WACIF,YACGA,UAAS,KAChBD,YAAAnE,MAAA6D,MAAAhF,cAGAmB,MAAAuE,eAAAV,MAAAW,eACQxE,MAAM6D,MAAAW,UAEdxE,MAAAuE,eAAAV,MAAA5E,kBACQe,MAAM6D,MAAA5E,aAEde,MAAAuE,eAAAV,MAAAY,YACGC,KAAI1E,MAAQ6D,MAAEY,YAEVzE,MAAOuE,eAAMV,MAAY1E,yBACvBa,MAAM6D,MAAM1E,sBAErB,MAAAuF,KAAA,CACH,IAAAC,QAAA,SAAA/F,MAAA,OAAA,SAAAmF,UAAAC,WACQ,OAAQjD,MAAAkD,YAAArF,KAAAoF,UAAAD,YADhB,CAEYF,MAAMjF,MAChByF,OAAWzD,eAAA0D,OAAAI,KAAAC,WAGXN,OAAAvF,KACA4E,EAAS,EAAGA,EAAID,OAACmB,OAAAlB,IACjBmB,QAACnB,OAGDoB,cAAU,WAAmB,OAAE/D,MAAAgE,eAAAD,2BACvBhG,KAAAyB,iBAAqByE,cAAahG,yCACjBA,YAAGA,UAAAiG,iCAClBX,OAAU,WAAY,OAAYvD,MAAEL,kBAAA5B,KAAA0B,aAAA,WAE9C,GAAAO,MAAMN,oBAAmB,qCAErBM,MAACJ,gBACDI,MAAAjB,UAAgBmF,YAAAtE,cAEpBI,MAAAmE,mBAAAC,eAEA3B,iBACIsB,mBAIJtB,iBACA1E,KAAI8B,eAAgB0D,OAACxF,KAAA0B,aAAsBsE,8BAIhCtB,oBACR4B,UAAAtG,KAAA8B,eAAA0D,OAAA,WACNc,YACHA,UAAA,KACuBrE,MAACZ,eAAUsC,IAAYR,cAAeoD,gBAC/CC,WAAWvE,MAAAsB,aAAAkD,uCAIFvG,UAAOwG,aAAW,mBACnCxF,MAAIlB,KAAAkB,gDAEAyF,EAAK,EAACA,EAAAC,QAAcd,OAACa,IAAW,KAChCE,OAAK,IAAAhH,gBAAwB+G,QAAQD,GAAA9B,SAAa+B,QAAMD,GAAA7B,cAC3Da,WAAAkB,OAAAlB,WAAAmB,UAAA,EAAAD,OAAAlB,WAAAG,OAAA,GACGzF,iBAAM,KAAewG,OAAAxG,iBAAmByG,UAAA,EAAAD,OAAAxG,iBAAAyF,OAAA,GAAA,KAE3C5E,MAAAuE,eAAAE,aACG3F,KAAK+G,kBAAgBF,OAAO3F,MAASyE,aAAA,GAExCzE,MAAAuE,eAAApF,mBACGL,KAAK+G,kBAAgBF,OAAO3F,MAASb,mBAAG,GAE3Ca,MAAAuE,eAAAoB,OAAAnG,SACJV,KAAA+G,kBAAAF,OAAA3F,MAAA2F,OAAAnG,SAELQ,MAAAuE,eAA0BoB,OAAUzG,YAC5BJ,KAAQ+G,kBAAKF,OAAA3F,MAAA2F,OAAAzG,wCAIIF,UAAQ6G,kBAAA,SAAAF,OAAAjB,KAAAoB,kBACzB/E,MAAMjC,UACT,IAAAgH,eAAAA,cAAA,GACD,IAAIC,OAAOjH,KAAOwB,OAACoE,MACfsB,OAASD,OAAAE,UACTH,eAAiBE,aACb,IAAMpI,MAAA,eAAe8G,KAAe,oCAErC5F,KAAAgB,UAAA6F,OAAA/G,UACNsH,QAOG,MAAA,IAAAtI,MAAA,oBAA2B+H,OAAa/G,KAAY,mBAAeiB,iBAAuBf,KAAIyB,iBAAAyE,eAAA,cAN7FmB,WACDC,KAAUN,aAAM,SAAmBO,GAAG,OAAOL,OAAOjF,MAAAd,MAAAoG,IACvD,SAAAA,GAAA,OAAAN,OAAAhF,MAAAd,OAAAqG,OAAAD,kCAOmBrH,UAAIuH,gBAAwB,eAC5CxF,MAAKjC,yBACgBA,KAAA0B,aAAA,WAAA,OAAAO,MAAAsB,aAAAmE,uBACX,eACDC,GAAA,WAAA,WAA4B,OAAA1F,MAAaH,eAAS8F,iCACvDC,IAAA,WAAsB,WACzBC,YACFA,WAAA,EACL7F,MAAAsB,aAAAG,SAAAC,IAAAR,cAAAU,qBACFkE,sBAAoC9F,MAAAsB,aAAcQ,SAAcC,eAChEgE,oDAIyB9H,UAAG+H,YAAA,WAAA,OAAAjI,KAAAuD,aAAAG,oCACJxD,UAAYiF,YAAC,SAAArF,KAAAoF,UAAAD,WACnCjF,KAAA2B,sBACF3B,KAAA6B,aAA0B/B,MAAA,IAAUqD,cAAA+E,aAAwBhD,UAAYD,UAAAC,YAAAD,YAEpEjF,KAAA4B,mBACF5B,KAAAgB,UAAAlB,MAAAmF,WAEFhE,0BAACf,UAAAiC,sBAAA,2BAUAgG,mBAAA9F,WACD,IAAA+F,oBAEQxD,EAAA,EAAAyD,GAAAF,mBAAiBrC,OAAAlB,EAA2ByD,KAAMzD,EACtDwD,iBAAIxD,UAEH,IAAA+B,EAAA,EAAA2B,GAAAjG,MAAAyD,OAAAa,EAAA2B,KAAA3B,EAAA,CACJ,IAAA4B,KAAAlG,MAAAsE,GACM6B,eAAiBC,2BAAAF,KAAAJ,oBAC3B,MAAAK,gBACQJ,iBAAAI,gBAAoC9F,KAAA6F,MAGzC,OAAKH,qFAlBOnH,0BA7Me,YAiOvBwH,2BAAsBxJ,QAAAkJ,wEAErB,EACIvD,EAAA,EAAAA,EAAAuD,mBAAArC,OAAAlB,IAAA,KACD8D,SAAIP,mBAAyBvD,GACzB,sCACHA,EAGT+D,gBAAwB1J,QAAAyJ,WACpBE,iBAAsBlG,KAAOkC,UAIpCgE,iBAAAC,QACY,IAATC,wBACJF,iBAAyBlG,KAAIoG,wBAErBF,iBAAc9C,OAAQ8C,iBAAU,GAAA,cAGnCD,gBAAAI,GAAAL,UACD,IAAAM,SAAU,CACb,IAAAC,QAAAC,QAAAhJ;;;;;;;iDC1IOiJ,sBAAkBlK,SACrBe,KAAAf,QAAAA,QACDe,KAAAoJ,YAAsBvI,cAAcjB,cAChCI,KAAIqJ,qBAEHC,KAAAtJ,KAAAoJ,YAAApJ,mCAEiBE,UAAMqJ,KAAU,SAAAC,UACjCxJ,KAAA0D,SACH8F,SAAAxJ,KAAA0D,+DAMiBxD,UAAKuJ,QAAA,SAAA/F,iCAGpB1D,KAAKf,QAAAqK,KAAUtJ,KAAMoJ,YAAK1F,UAE9B1D,KAAOf,QAAA,KAEXe,KAASqJ,UAAc9G,QAAE,SAAAiH,UAAA,OAAAA,SAAA9F,YACrB1D,KAAOqJ,UAAWvD,OAAU;;;;;;;;ICxI5B4D;;;;;;;YACIC,mBAAgBjG,0BACnBA,kBAEDkG,kBACA,IAAAF,gBACH,MAAA,IAAA5K,MAAA,6DAEG,IAAA4E,SAAagG,gBAEjB,OADCA,gBAAA,KACehG,kBAEfmG,iBAAAjF,GACD,OAAgBA,EAAAjB,IAAA,uBAEfmG,eAAAlF,GACU,OAAAA,EAAAjB,IAAA,gEAKPoG,8YChBE7J,UAAAyD,IAAA,SAAAqG,MAAAC,eACF,OAAOA,gBAAkB9G,cAAA+G,uCACzBD;;;;;;;;;;;;;;;sBCPoB,uCAEK,oBAChBE,cAAczG,SAAK5C,KAAUsJ,WAAIC,WACtCrK,KAAK0D,SAAUA,SACf1D,KAAKc,KAAAA,KACLd,KAAKsB,UAAYoC,SAASC,IAAIhE,WACjCK,KAAAuB,SAAAvB,KAAAsB,UAAAqC,IAAAlE,UACDO,KAAAsK,YAActK,KAAYsB,UAAGqC,IAAUjE,aACnCM,KAAIf,QAAUmL,WAAYpG,cAC1BhE,KAAIuK,SAAWtL,QAASe,KAAGf,cACvBoL,UAAUA,WAAMF,cAAAK,aAAAxK,KAAAsB,UAAmDR,2BAEnE0J,aAAY,SAAclJ,UAAAR,4EAG1B,MAAA,IAAUhC,MAAA,iDAA0BgC,MAExC,IAAIuJ,UAAUI,WAAO,UAGjBJ,UAAAK,UAAmBL,UAAYM,MACnCC,aAAiB9J,KAAA,WACnBuJ,UAAAQ,SACFD,aAAc9J,KAAW,WACjBuJ,UAAAS,UACAF,aAAU9J,KAAQ,YAClBuJ,yBAEKU,YAAU,SAAazJ,UAAA+I,UAAAW,6BACL,IAAvBA,sBAAiCA,qBAAqB,QAChC7L,IAAtBkL,UAASY,SACT,OAAIC,UAAWb,UAAAY,aAEXZ,UAAOc,YAAS,KACnBC,iBAAA9J,UAAAqC,IP7Ba,wBO8BJuH,UAAAb,UAAqBc,aAC3BF,SAAUG,iBAAMzH,IAAA0H,eACnBlM,IAAA8L,SACD,OAAWA,SAEP,IAAAD,0BACI,IAAIlM,MAAM,0EAETwM,QAAA,SAAA7B,QAAA8B,QACIjK,UAAAqC,oBACD,MAAO0H,MAAA,KAAA,SAAAG,OAAkCC,UAC5C,MAAAD,OACF/B,QAAA2B,iBAAAM,IAAAL,MAAAI,WAGNF,OAAA,gCAAAF,MAAA,eAAAG,OAAA,KAAAC,SAAA,sHASAvL,UAAcyL,gBAAmB,SAAUC,eAAOC,QAG3D,IAAAC,QAAcD,OAAUA,OAAAtB,SAAkBvK,KAAUuK,UAC5CwB,WAAa/L,KAAAsK,YAAWsB,eAAAE,OAAA,KAAA9L,KAAAqK,UAAA2B,0BACxBzB,SAAQjB,KAAGzI,cAAcb,KAAAqK,UAAiBvJ,MAASiL,YACtDA,0BAEH7L,UAAA+L,gBAAA,SAAAhB,UAIE,YAHU9L,IAAd8L,WACQA,SAAQd,cAAKY,YAAA/K,KAAAsB,UAAAtB,KAAAqK,YAEbrK,KAAAkM,YAAoBjB,iKAMpBkB,iBAAmB,SAAUhL,MAAAiL,eAM7B,OAAIA,cAAiBC,UADrBlL,MAAIA,QAAUyG,SAAc,0BAGpB0E,gCACA,oCAEkB,iBAAfC,WAAyB,kBAE5BC,UAAYC,OAAGpJ,OAAS,MACxBqJ,cAAWD,OAAWpJ,OAAQ,aAE9BsJ,KAAQJ,YAAYhK,QAAK,SAAAqK,UACzB,IAAAlE,SAAc6D,WAAYK,UAC3BC,SAAA,MAAAnE,SAAAnI,OAAA,oDAEHiM,UAAA9D,UAA0BkE,SACtBE,QAAIF,UAAW,KACfF,cAAcE,UAAAC,6BAGFtK,QAAU,SAAUgG,eAC/BqE,SAAAJ,gBAAAjE,KAAAwE,SAAAC,cL3FVlM,KAAA+J,QAAUlK,wBAA4B,IAChDkK,QAAAjK,+BAAA,SAAAqM,EAAAC,QAAA,OAAAA,OAAA1M,4BK4FuBkM,cAAcE,WAAO,EACxBE,QAAAF,UAAAE,QAAAF,cACFE,QAAAF,UAAAlK,KAAA6F,OAGK8D,UAAC3J,KAAc6F,QAIvBkE,OAAOE,KAAKD,eAAenK,QAAC,SAAUqK,UAClC,IAAIF,cAAeE,UACnB,MAAQ,IAAA9N,MAAY,+BAA8B8N,SAAA,mBAAA3K,MAAAnB,eAGnD6L,KAAAG,SAAAK,OAAA,SAAAP,UAAA,OAAAE,QAAAF,YAAArK,QAAA,SAAAqK,UACN,IAAAvK,MAAAyK,QAAAF,wDAED,OAAiBQ,YAAU/K,MAAQlB,2CAgBtCkL,UAAA9J,QAAA,SAAAgG,MACMA,KAAA8E,WAAiBC,KAAAC,WAAAhF,KAAAiF,YAC1BjF,KAAAiF,UAAA,OAIE,OAAIrB,gCAEMjM,UAAMuN,kCAAkC,SAAeC,yCACzD1N,KAAmB2N,0CACpB3N,KAAA4N,eAAAC,qBACNH,oBAAA1N,KAAAqK,UAAAyD,kBAAAC,MAAAF,kBAAA,CACD,IAAOG,yBAAoBC,oBAC7BxB,OAAAE,KAAAqB,0BAAAzL,QAAA,SAAA2L,KACFR,mBAAwBQ,KAAcF,yBAAgBE,OAGpD,OAAAD,mCAEM/N,UAAgBgM,YAAA,SAAAiC,MAEpB,OADAnO,KAAIf,QAASmP,UAACD,KACPnO,KAAAuB,SAAYvB,KAAKf,QAAQoP,2BAE5BnO,UAAgBoO,kBAAW,WAGjC,QADEC,UADCF,cAEHE,UAAAvO,KAAAf,QAAAuP,YACFxO,KAAaf,QAACwP,YAAUF,WAChBF,WAAU3L,KAAK6L,kBAEfF,0BAEInO,UAAYyN,oBAAY,uBACpB3N,KAAOqK,UAAMzL,SAAgBoB,KAAGqK,UAAQ0B,YAAA/L,KAAAqK,UAAAvJ,kBAC5ClC,sBACIA,SAAY2D,QAAS,SAAS2L,SACjCQ,MAAA9P,QAAAsP,KACFS,MAAAD,MAAAC,MAAAC,mBACNF,MAAA5H,UAAA6H,MAAA,GAAA7I,UAEHlH,QAAAsP,KAAAS,MAAA,GAAAT,OAIMtP,uBAEKsB,UAAM0N,eAAkB,SAAAhP,QAAA8O,wBAC7BzL,MAAOjC,QACVpB,QAGG,CAAA,GAAAiQ,MAAWC,QAAQlQ,SACnB,OAAOA,QAAQwD,IAAA,SAAA2M,KAAA,OAAA9M,MAAA2L,eAAAmB,OAEd,GAAuB,iBAAZnQ,QAAsB,CAClC,IAAIoQ,WAEJ,OADAvC,OAAIE,KAAA/N,SAAc2D,QAAQ,SAAa2L,KAAA,OAAAc,QAAAd,KAAAjM,MAAA2L,eAAAhP,QAAAsP,QACnCc,QAEJ,GAAsB,iBAAlBpQ,QAA8B,CAClC,IAAI+P,MAAA/P,QAAgB+P,MAAAC,mBAChBK,YAAUN,MAAA,IAAcA,MAAQ,GAChCO,OAAOtQ,QAAAkI,UAAoB6H,MAAC,GAAQ7I,QACpCqJ,aAAQR,MAAa,GACrBS,gBAAWH,YACXI,cAAgB,OAAAJ,YACnBK,QAAAzO,cAAAqO,QACDK,KAAOF,cAAMrP,KAAAuK,SAAAjH,SAAAtD,KAAAuK,SAChBmE,MAAAU,cAAAG,KAAAC,cAAAF,SAAAC,KAAAjG,KAAAgG,aACIZ,QAAAS,WACD,MAAU,IAAArQ,MAAM,4BAAAF,QAAA,4BAAsEoB,KAAQc,KAAQ,MAE5G,OAAA4N,MAIG,MAAS,IAAC5P,MAAQ,wDAAEkB,KAAAc,KAAA,MAAAlC,gBA3BZ,oBA1LY,YA0NzBsM,UAAYuE,UACf,OAAAC,WAAAD,UAAAA,WAAAA,kBAGA1B,MAAAW;;;;;;;2CC9NY,YAEA,6BAET1O,KAAO2P,yBACN3P,KAAA4P,wFAHQ,wCA2DAC,iBAAiB/O,KAAMsJ,WAAW1G,UACvC1D,KAAKc,KAAOA,KACZd,KAAKoK,WAAWA,WAChBpK,KAAK0D,SAASA,SACd1D,KAAK8P,OAAQ,IAAG3F,cAAKzG,SAAmB5C,KAAKsJ,kFAG7CpK,KAAIuK,SAAYvK,KAAG8P,OAASvF,oGAK/B,IAAAwF,aAAArM,SAAAC,IAAAX,uEAIGhD,KAAIgQ,0EAGJ,IAAI/N,MAAAjC,KAEAiQ,iBAAgBjQ,KAAA8P,OAAAI,sBAChB1N,OAAKxC,KAAA8P,OAAA7D,iCAEAjM,KAAgBqK,UAAE0B,WACvB+B,iBAAgB9N,KAAAqK,UAAAyD,oBACnBlC,6GAGI,GAAAkC,iIAIL9N,KAAImQ,mBAAqBrC,iBAAA9N,KAAA0N,mBAAA1N,KAAAoQ,qBACrBC,kBAEHpC,oBAAAjO,KAAA8P,OAAArC,kCAAAzN,KAAA0N,uBAEG1N,KAAKsQ,iBACLtQ,KAAKuQ,eAAAvQ,KAAmBsQ,gBAC3BtQ,KAAAsQ,eAAA,MAGGtQ,KAAI0N,oBAAcgC,WAAc1P,KAAO0N,mBAAM8C,UAC7CxQ,KAAK0N,mBAAA8C,iFAIL,IAAIC,YAAQ,WAAe,OAAAxO,MAAAyL,mBAAAgD,YAC3B1Q,KAAA2Q,yBAA0B3Q,KAAQoQ,gBAAcQ,QAAApL,OAAAiL,aAChDA,cAGJ,IAAI9F,KAAO3K,KAAEqK,UAAAM,KACTkG,QAAa,iBAAAlG,MAAsBA,KAAQmG,IAC9CC,SAAA,iBAAApG,KAAAA,KAAAqG,KAAArG,KAGGkG,SACHA,QAAA7Q,KAAAoQ,gBAAApQ,KAAAuK,SA1HI,gBA0HJ0D,oBA1HI,iBA4HLzL,OAAIxC,KAAKoQ,gBAAkB,MAAIa,wBAAgBhB,mBAC3Cc,UACHA,SAAA/Q,KAAAoQ,gBAAApQ,KAAAuK,SA9HI,gBA8HJ0D,oBA9HI,iBAiIDjO,KAAK0N,oBAAqBgC,WAAA1P,KAAA0N,mBAAAwD,YAC1BlR,KAAK0N,mBAAiBwD,8BAGjBhR,UAAciG,YAAU,SAAAgL,SAChCnR,KAAAmQ,mBAIGnQ,KAAAuQ,eAAAY,SAHNnR,KAAAsQ,eAAAa,0BAMEjR,UAAsBkR,UAAQ,eAC1BnP,MAAIjC,KACJ2P,sBAAe3P,KAAAqR,SAAsB1B,sBACrCC,sBAAK0B,KAAAA,SAAe1B,0CACC5P,KAAAqR,SAAAE,0CACbhP,QAAe,SAAMsC,SAAY2M,SACrCC,SAAAxP,MAAiBkO,mBAAWtL,UAC5B6M,SAAA9B,sBAA6B4B,SAChCrO,cAAAwO,gBAAAF,SAAAC,UAAA,CACF,IAAAE,WAAAL,oBAAA1M,UACL5C,MAAA2P,YACeC,KAAUJ,UACnB7B,sBAAgB4B,KAAAC,8BAIXvR,UAAA4R,YAAmB,WAC3BpC,WAAA1P,KAAA2Q,2BACG3Q,KAAC2Q,2BAET3Q,KAAA0N,oBAA2BgC,WAAkB1P,KAAG0N,mBAAqBqE,aAC7D/R,KAAK0N,mBAAQqE,aAEjB/R,KAAIoQ,gBAAexI,6BAElB1H,UAAA8R,mBAAA,SAAA3H,WACD,IAAIpI,MAAOjC,KACPiS,YAA0B,iBAAX5H,UAAWyD,iBAC9B,GAAImE,aAAcxF,OAAIE,KAAQtC,UAAElJ,OAAA2E,OAC5B,MAAM,IAAChH,MAAK,8FAEJ,YAAcuL,UAAWyD,iBAAUzD,UAAAlJ,4BA6B/C,MA3BgB,iBAAR+Q,qBACIA,SAAS3P,QAAA,SAAAsC,0BACDqN,QAAArN,4CAIJ,IACJ,IAAK,IAID,MACJ,IAAK,IACDwM,SAAS1B,sBAAAjN,KAA0BmC,UACnCwM,SAASzB,sBAAoBlN,KAAAyP,iBAC7Bd,SAAME,oBAAA1M,UAAAA,SAAA,SACV,UACI,IACAwM,SAAMe,0BAAU1P,KAAsBmC,UAC7CwM,SAAAE,oBAAA1M,UAAAA,SACF,MACN,QACe,IAAAwN,KAAAC,KAAAC,UAAAL,SAClB,MAAA,IAAApT,MAAA,uBAAA0T,YAAA,SAAAH,KAAA,SAAApQ,MAAAnB,KAAA,mBAIOuQ,2BAEGnR,UAAa8P,kBAAe,eAChC/N,MAAMjC,KAEZA,KAAAqR,SAAA1B,sBAAA8C,OAAAzS,KAAAqR,SAAAe,2BACF7P,QAAiB,SAAUsC,UACnB,IAAA+M,WAAa3P,MAAAoP,SAAAE,oBAAA1M,+EAIT3E,UAAemQ,YAAa,eAChCpO,MAAMjC,KAEZA,KAAAqR,SAAAe,0BAAA7P,QAAA,SAAAsC,UACF,IAAA+M,WAAiB3P,MAAUoP,SAAAE,oBAA2B1M,UAC9CuC,QAAanF,MAAA2P,+GAIR1R,UAAAqQ,eAA8B,SAASY,aAC/ClP,MAAAjC,KAELyM,OAAOE,KAAAwE,SAAiB5O,QAAA,SAAAsC,UAAA,OAAA5C,MAAAkO,mBAAAtL,UAAAsM,QAAAtM,UAAA6N,eACxBhD,WAAA1P,KAAAmQ,mBAAAwC,8ECjGAC,cAAQ,oBACCA,qHAcD1S,UAAa2S,UACL,SAAgBC,WAAKC,QAAAC,kBACtBhT,UACE,cAAA+S,gBACTE,iBAAYC,oBAAA,QAsFZC,eApFFC,SAAAH,qBACGvE,MAAM9O,aAACI,KAAA0D,UACR/E,QAAQ0U,iBACRzT,sBACQ8D,UAAc,OAAAA,SAAgBA,SAAAe,aAAA,cTtJvC,uCS0JqBnD,qBACJgS,0DThKN,qBSmKUC,4CACQA,oBAA8B3P,oBAC9B3B,MAAAyB,uBAEH,SAAA8F,6BACIgK,KAAAD,oBAAA,eACDE,eAAe/P,SAAWC,IAAAR,cAAkBS,aAC/C6P,eAAAC,WACFlK,WAGAiK,eAAoBE,WAAAC,cAAArP,KAAAgP,oBAAA/J,cAK3B,OADR+J,oBAA0BI,WAAAC,cACjBL,qCThLlB,iCAAA,aAHW,qBS0LUM,sBAIAC,gBAAa,SAAOC,GAAAC,MAAkBC,MAAAC,qBAClCC,WACQ,EAAIC,GAAIC,UAAMvO,OAAAsO,aACd,GAAKC,UAAYD,iBAEhBE,OAAAC,kBAAA,iIAUVC,WAAgB,WAAAvS,MAAAqS,OAAAG,IAAA,WAAA,OAAAV,GAAAW,WAAA,EAAAC,WAC1BX,MAAAC,MAAAC,aAAAzB,OAAA0B,UAIf,OADGL,gBAAA,OAAAD,iBAAAe,OACHd,yDASMe,MAAAA,UAAuBvT,8EAKfwR,YAAUxJ,KAAGzI,cAAcjB,cAAcqC,MAAAyB,UAIpD8Q,WAAA,WACF,IAAAM,WAAAxT,UAAAqC,IAAA,cACCoR,aAA+B9S,MAAAqS,OAAAU,iBAAsB3N,UAAkB,WAAgB,OAACyN,WAAAG,+EAExF,MAGY7B,SAAYF,qBAA2BD,kBAAiBR,OAAOM,WAE3EmC,cAAc9V,OAAiB,yBAC3B+V,qBAAAhW,OAEJmV,OAAAG,IAAA,YVpMV,SAAAW,EAAArC,QAAAC,QACgBjU,QAAGC,UAAeoW,EAAArC,QAAOC,QUmMjBhU,CAAkB8T,YAAYK,cAAArS,MAAAkS,wBAEhCmC,gBAAa,KACrBE,0BAAcH,cAAkBC,gBAChCG,SAAOtV,KAASsU,qBAClBa,gBAAA,WACL,IAAAlT,MAAAjC,KACH2U,KAAAN,UAEEkB,OADJL,cAAkCC,gBAACE,0BAC/BE,SAASd,IAAE,WAAY,OAAAS,cAAqBC,gBAAAT,MAAAzS,MAAA0S,WAIhD/B,uBXpNH4C,WAAAC,OAAAvH,IAAAwH,8GAED,GAAA,iBAAAC,SAAA,mBAAAA,QAAAC,SAAAC,EAAAF,QAAAC,SAAAJ,WAAAC,OAAAvH,IAAAwH,yHAIA,OAAgBI,EAAA,GAAWD,GAAApJ,OAAWsJ,eAAeN,OAAEvH,IAAA2H,GAAAA,EW8M5CG,EACP7S,cAAAoS,UAAAzS,WAAAiH,iQA5HQ,sUV7GZkM,mBAA6B5W,4GK6BjBiV,OAFA7P,aAAc,EACd/C,aAAU,SAAAwU,IAAkB,OAAAA,6CAKpBC,iBAAoBC,uBACxB,SAAIjV,MAAclC,QAAGiC,MAAYmV,cAI7BjV,QAAAiV,SAAc,GACdhV,eAAiBgV,SAAA,GACpBC,UAAA,EACD,IAAIjV,eAAc,CACd,IAAIkV,cAAAjV,UAAwBqC,IAAG0P,iBAC/B5O,YAAI8R,cAAmB9R,YACvBpD,eAAKkV,cAAkB7S,UAAA6S,cAAAC,wBAEtB,SAAA9S,UACD,IACIjC,iBADsBiC,SAAAC,IAAAR,cAA+BsT,0BACdC,wBAAuBC,KAAS3V,WAC3E,IAAIS,iBACJ,MAAO,IAAA3C,MAAA,mCAAkCiC,iBAAA4V,KAAA3V,YAEzC,IAAA4V,gBAAsB,IAAAzN,sBAAAlK,SACtB4X,OAAO,IAAA5V,0BAAkBhC,QAAAiC,MAAAC,MAAAC,QAAAsC,SAAApC,UAAAC,SAAAC,OAAAC,iBAAAC,cACzB0G,iBAAuByO,OAAO7U,kBAC9B6U,OAAIjU,gBAAUwF,oGAGVX,kCACHgC,QAAAoN,OAAA5O,eACHqO,UAGMnV,MAAM2V,WAAW,2BAGZrS,YAAA,SAAAf,UACR4Q,SACDA,OAAa5Q,SAAAC,IAAYR,cAAS4T,QACpCrV,aAAA,SAAAwU,IAAA,OAAA,WACE,OAAW/S,cAAiB4T,OAAAC,kBAAAd,KAAA5B,OAAAG,IAAAyB,oBAG3B,WAAA,OAAAe,YAAAvT,eAPQuT,uBASZ5V,qBACDA,eAAgBkI,KAAA2N,aAG1BA,YAAA7V,gBAEFiV,UAAiB;;;;;;;;;;;;;;;;SMdFa,0DACTjE,oBAAA,QACFkE,YAAS1H,WAAA2H,uDAEbC,SAAeC,gBACV,OAAQC,yBAA0BL,gBAAAI,gBAAAE,uBAAAJ,6CAInCK,qBACF/Y,QAAAiB,aAAA,eACG8D,SACD,MAAS,IAAA5E,MAAA,qFAEL4E,mBAEI2P,kEAGa/R,oCAEX,EACJkV,QAAAY,YAAArN,mBAAAR,KAAA,SAAAoO,KAGP,OAFYjU,SAAOkU,OAAAlU,SAAA,IAAAmU,kBAAAF,IAAAjU,WACjBC,IAAAhE,WACF+D","file":"/Users/ced-pro/Code/angular/angular/dist/packages-dist/upgrade/bundles/upgrade-static.umd.min.js.map","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction noNg() {\n    throw new Error('AngularJS v1.x is not loaded!');\n}\nvar angular = {\n    bootstrap: noNg,\n    module: noNg,\n    element: noNg,\n    version: undefined,\n    resumeBootstrap: noNg,\n    getTestability: noNg\n};\ntry {\n    if (window.hasOwnProperty('angular')) {\n        angular = window.angular;\n    }\n}\ncatch (e) {\n    // ignore in CJS mode.\n}\n/**\n * @deprecated Use `setAngularJSGlobal` instead.\n */\nexport function setAngularLib(ng) {\n    setAngularJSGlobal(ng);\n}\n/**\n * @deprecated Use `getAngularJSGlobal` instead.\n */\nexport function getAngularLib() {\n    return getAngularJSGlobal();\n}\n/**\n * Resets the AngularJS global.\n *\n * Used when AngularJS is loaded lazily, and not available on `window`.\n */\nexport function setAngularJSGlobal(ng) {\n    angular = ng;\n    version = ng && ng.version;\n}\n/**\n * Returns the current AngularJS global.\n */\nexport function getAngularJSGlobal() {\n    return angular;\n}\nexport var bootstrap = function (e, modules, config) {\n    return angular.bootstrap(e, modules, config);\n};\nexport var module = function (prefix, dependencies) {\n    return angular.module(prefix, dependencies);\n};\nexport var element = function (e) { return angular.element(e); };\nexport var resumeBootstrap = function () { return angular.resumeBootstrap(); };\nexport var getTestability = function (e) { return angular.getTestability(e); };\nexport var version = angular.version;\n//# sourceMappingURL=angular1.js.map","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport var $COMPILE = '$compile';\nexport var $CONTROLLER = '$controller';\nexport var $DELEGATE = '$delegate';\nexport var $HTTP_BACKEND = '$httpBackend';\nexport var $INJECTOR = '$injector';\nexport var $INTERVAL = '$interval';\nexport var $PARSE = '$parse';\nexport var $PROVIDE = '$provide';\nexport var $ROOT_SCOPE = '$rootScope';\nexport var $SCOPE = '$scope';\nexport var $TEMPLATE_CACHE = '$templateCache';\nexport var $TEMPLATE_REQUEST = '$templateRequest';\nexport var $$TESTABILITY = '$$testability';\nexport var COMPILER_KEY = '$$angularCompiler';\nexport var GROUP_PROJECTABLE_NODES_KEY = '$$angularGroupProjectableNodes';\nexport var INJECTOR_KEY = '$$angularInjector';\nexport var LAZY_MODULE_REF = '$$angularLazyModuleRef';\nexport var NG_ZONE_KEY = '$$angularNgZone';\nexport var REQUIRE_INJECTOR = '?^^' + INJECTOR_KEY;\nexport var REQUIRE_NG_MODEL = '?ngModel';\nexport var UPGRADE_MODULE_NAME = '$$UpgradeModule';\n//# sourceMappingURL=constants.js.map","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A `PropertyBinding` represents a mapping between a property name\n * and an attribute name. It is parsed from a string of the form\n * `\"prop: attr\"`; or simply `\"propAndAttr\" where the property\n * and attribute have the same identifier.\n */\nvar PropertyBinding = /** @class */ (function () {\n    function PropertyBinding(prop, attr) {\n        this.prop = prop;\n        this.attr = attr;\n        this.parseBinding();\n    }\n    PropertyBinding.prototype.parseBinding = function () {\n        this.bracketAttr = \"[\" + this.attr + \"]\";\n        this.parenAttr = \"(\" + this.attr + \")\";\n        this.bracketParenAttr = \"[(\" + this.attr + \")]\";\n        var capitalAttr = this.attr.charAt(0).toUpperCase() + this.attr.substr(1);\n        this.onAttr = \"on\" + capitalAttr;\n        this.bindAttr = \"bind\" + capitalAttr;\n        this.bindonAttr = \"bindon\" + capitalAttr;\n    };\n    return PropertyBinding;\n}());\nexport { PropertyBinding };\n//# sourceMappingURL=component_info.js.map","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar DIRECTIVE_PREFIX_REGEXP = /^(?:x|data)[:\\-_]/i;\nvar DIRECTIVE_SPECIAL_CHARS_REGEXP = /[:\\-_]+(.)/g;\nexport function onError(e) {\n    // TODO: (misko): We seem to not have a stack trace here!\n    if (console.error) {\n        console.error(e, e.stack);\n    }\n    else {\n        // tslint:disable-next-line:no-console\n        console.log(e, e.stack);\n    }\n    throw e;\n}\nexport function controllerKey(name) {\n    return '$' + name + 'Controller';\n}\nexport function directiveNormalize(name) {\n    return name.replace(DIRECTIVE_PREFIX_REGEXP, '')\n        .replace(DIRECTIVE_SPECIAL_CHARS_REGEXP, function (_, letter) { return letter.toUpperCase(); });\n}\nexport function getComponentName(component) {\n    // Return the name of the component or the first line of its stringified version.\n    return component.overriddenName || component.name || component.toString().split('\\n')[0];\n}\nexport function isFunction(value) {\n    return typeof value === 'function';\n}\nvar Deferred = /** @class */ (function () {\n    function Deferred() {\n        var _this = this;\n        this.promise = new Promise(function (res, rej) {\n            _this.resolve = res;\n            _this.reject = rej;\n        });\n    }\n    return Deferred;\n}());\nexport { Deferred };\n/**\n * @return Whether the passed-in component implements the subset of the\n *     `ControlValueAccessor` interface needed for AngularJS `ng-model`\n *     compatibility.\n */\nfunction supportsNgModel(component) {\n    return typeof component.writeValue === 'function' &&\n        typeof component.registerOnChange === 'function';\n}\n/**\n * Glue the AngularJS `NgModelController` (if it exists) to the component\n * (if it implements the needed subset of the `ControlValueAccessor` interface).\n */\nexport function hookupNgModel(ngModel, component) {\n    if (ngModel && supportsNgModel(component)) {\n        ngModel.$render = function () { component.writeValue(ngModel.$viewValue); };\n        component.registerOnChange(ngModel.$setViewValue.bind(ngModel));\n        if (typeof component.registerOnTouched === 'function') {\n            component.registerOnTouched(ngModel.$setTouched.bind(ngModel));\n        }\n    }\n}\n/**\n * Test two values for strict equality, accounting for the fact that `NaN !== NaN`.\n */\nexport function strictEquals(val1, val2) {\n    return val1 === val2 || (val1 !== val1 && val2 !== val2);\n}\n//# sourceMappingURL=util.js.map","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ApplicationRef, ChangeDetectorRef, Injector, SimpleChange, Testability, TestabilityRegistry } from '@angular/core';\nimport { PropertyBinding } from './component_info';\nimport { $SCOPE } from './constants';\nimport { getComponentName, hookupNgModel, strictEquals } from './util';\nvar INITIAL_VALUE = {\n    __UNINITIALIZED__: true\n};\nvar DowngradeComponentAdapter = /** @class */ (function () {\n    function DowngradeComponentAdapter(element, attrs, scope, ngModel, parentInjector, $injector, $compile, $parse, componentFactory, wrapCallback) {\n        this.element = element;\n        this.attrs = attrs;\n        this.scope = scope;\n        this.ngModel = ngModel;\n        this.parentInjector = parentInjector;\n        this.$injector = $injector;\n        this.$compile = $compile;\n        this.$parse = $parse;\n        this.componentFactory = componentFactory;\n        this.wrapCallback = wrapCallback;\n        this.implementsOnChanges = false;\n        this.inputChangeCount = 0;\n        this.inputChanges = {};\n        this.componentScope = scope.$new();\n    }\n    DowngradeComponentAdapter.prototype.compileContents = function () {\n        var _this = this;\n        var compiledProjectableNodes = [];\n        var projectableNodes = this.groupProjectableNodes();\n        var linkFns = projectableNodes.map(function (nodes) { return _this.$compile(nodes); });\n        this.element.empty();\n        linkFns.forEach(function (linkFn) {\n            linkFn(_this.scope, function (clone) {\n                compiledProjectableNodes.push(clone);\n                _this.element.append(clone);\n            });\n        });\n        return compiledProjectableNodes;\n    };\n    DowngradeComponentAdapter.prototype.createComponent = function (projectableNodes) {\n        var providers = [{ provide: $SCOPE, useValue: this.componentScope }];\n        var childInjector = Injector.create({ providers: providers, parent: this.parentInjector, name: 'DowngradeComponentAdapter' });\n        this.componentRef =\n            this.componentFactory.create(childInjector, projectableNodes, this.element[0]);\n        this.viewChangeDetector = this.componentRef.injector.get(ChangeDetectorRef);\n        this.changeDetector = this.componentRef.changeDetectorRef;\n        this.component = this.componentRef.instance;\n        // testability hook is commonly added during component bootstrap in\n        // packages/core/src/application_ref.bootstrap()\n        // in downgraded application, component creation will take place here as well as adding the\n        // testability hook.\n        var testability = this.componentRef.injector.get(Testability, null);\n        if (testability) {\n            this.componentRef.injector.get(TestabilityRegistry)\n                .registerApplication(this.componentRef.location.nativeElement, testability);\n        }\n        hookupNgModel(this.ngModel, this.component);\n    };\n    DowngradeComponentAdapter.prototype.setupInputs = function (needsNgZone, propagateDigest) {\n        var _this = this;\n        if (propagateDigest === void 0) { propagateDigest = true; }\n        var attrs = this.attrs;\n        var inputs = this.componentFactory.inputs || [];\n        var _loop_1 = function (i) {\n            var input = new PropertyBinding(inputs[i].propName, inputs[i].templateName);\n            var expr = null;\n            if (attrs.hasOwnProperty(input.attr)) {\n                var observeFn_1 = (function (prop) {\n                    var prevValue = INITIAL_VALUE;\n                    return function (currValue) {\n                        // Initially, both `$observe()` and `$watch()` will call this function.\n                        if (!strictEquals(prevValue, currValue)) {\n                            if (prevValue === INITIAL_VALUE) {\n                                prevValue = currValue;\n                            }\n                            _this.updateInput(prop, prevValue, currValue);\n                            prevValue = currValue;\n                        }\n                    };\n                })(input.prop);\n                attrs.$observe(input.attr, observeFn_1);\n                // Use `$watch()` (in addition to `$observe()`) in order to initialize the input in time\n                // for `ngOnChanges()`. This is necessary if we are already in a `$digest`, which means that\n                // `ngOnChanges()` (which is called by a watcher) will run before the `$observe()` callback.\n                var unwatch_1 = this_1.componentScope.$watch(function () {\n                    unwatch_1();\n                    unwatch_1 = null;\n                    observeFn_1(attrs[input.attr]);\n                });\n            }\n            else if (attrs.hasOwnProperty(input.bindAttr)) {\n                expr = attrs[input.bindAttr];\n            }\n            else if (attrs.hasOwnProperty(input.bracketAttr)) {\n                expr = attrs[input.bracketAttr];\n            }\n            else if (attrs.hasOwnProperty(input.bindonAttr)) {\n                expr = attrs[input.bindonAttr];\n            }\n            else if (attrs.hasOwnProperty(input.bracketParenAttr)) {\n                expr = attrs[input.bracketParenAttr];\n            }\n            if (expr != null) {\n                var watchFn = (function (prop) { return function (currValue, prevValue) {\n                    return _this.updateInput(prop, prevValue, currValue);\n                }; })(input.prop);\n                this_1.componentScope.$watch(expr, watchFn);\n            }\n        };\n        var this_1 = this;\n        for (var i = 0; i < inputs.length; i++) {\n            _loop_1(i);\n        }\n        // Invoke `ngOnChanges()` and Change Detection (when necessary)\n        var detectChanges = function () { return _this.changeDetector.detectChanges(); };\n        var prototype = this.componentFactory.componentType.prototype;\n        this.implementsOnChanges = !!(prototype && prototype.ngOnChanges);\n        this.componentScope.$watch(function () { return _this.inputChangeCount; }, this.wrapCallback(function () {\n            // Invoke `ngOnChanges()`\n            if (_this.implementsOnChanges) {\n                var inputChanges = _this.inputChanges;\n                _this.inputChanges = {};\n                _this.component.ngOnChanges(inputChanges);\n            }\n            _this.viewChangeDetector.markForCheck();\n            // If opted out of propagating digests, invoke change detection when inputs change.\n            if (!propagateDigest) {\n                detectChanges();\n            }\n        }));\n        // If not opted out of propagating digests, invoke change detection on every digest\n        if (propagateDigest) {\n            this.componentScope.$watch(this.wrapCallback(detectChanges));\n        }\n        // If necessary, attach the view so that it will be dirty-checked.\n        // (Allow time for the initial input values to be set and `ngOnChanges()` to be called.)\n        if (needsNgZone || !propagateDigest) {\n            var unwatch_2 = this.componentScope.$watch(function () {\n                unwatch_2();\n                unwatch_2 = null;\n                var appRef = _this.parentInjector.get(ApplicationRef);\n                appRef.attachView(_this.componentRef.hostView);\n            });\n        }\n    };\n    DowngradeComponentAdapter.prototype.setupOutputs = function () {\n        var attrs = this.attrs;\n        var outputs = this.componentFactory.outputs || [];\n        for (var j = 0; j < outputs.length; j++) {\n            var output = new PropertyBinding(outputs[j].propName, outputs[j].templateName);\n            var bindonAttr = output.bindonAttr.substring(0, output.bindonAttr.length - 6);\n            var bracketParenAttr = \"[(\" + output.bracketParenAttr.substring(2, output.bracketParenAttr.length - 8) + \")]\";\n            // order below is important - first update bindings then evaluate expressions\n            if (attrs.hasOwnProperty(bindonAttr)) {\n                this.subscribeToOutput(output, attrs[bindonAttr], true);\n            }\n            if (attrs.hasOwnProperty(bracketParenAttr)) {\n                this.subscribeToOutput(output, attrs[bracketParenAttr], true);\n            }\n            if (attrs.hasOwnProperty(output.onAttr)) {\n                this.subscribeToOutput(output, attrs[output.onAttr]);\n            }\n            if (attrs.hasOwnProperty(output.parenAttr)) {\n                this.subscribeToOutput(output, attrs[output.parenAttr]);\n            }\n        }\n    };\n    DowngradeComponentAdapter.prototype.subscribeToOutput = function (output, expr, isAssignment) {\n        var _this = this;\n        if (isAssignment === void 0) { isAssignment = false; }\n        var getter = this.$parse(expr);\n        var setter = getter.assign;\n        if (isAssignment && !setter) {\n            throw new Error(\"Expression '\" + expr + \"' is not assignable!\");\n        }\n        var emitter = this.component[output.prop];\n        if (emitter) {\n            emitter.subscribe({\n                next: isAssignment ? function (v) { return setter(_this.scope, v); } :\n                    function (v) { return getter(_this.scope, { '$event': v }); }\n            });\n        }\n        else {\n            throw new Error(\"Missing emitter '\" + output.prop + \"' on component '\" + getComponentName(this.componentFactory.componentType) + \"'!\");\n        }\n    };\n    DowngradeComponentAdapter.prototype.registerCleanup = function () {\n        var _this = this;\n        var destroyComponentRef = this.wrapCallback(function () { return _this.componentRef.destroy(); });\n        var destroyed = false;\n        this.element.on('$destroy', function () { return _this.componentScope.$destroy(); });\n        this.componentScope.$on('$destroy', function () {\n            if (!destroyed) {\n                destroyed = true;\n                _this.componentRef.injector.get(TestabilityRegistry)\n                    .unregisterApplication(_this.componentRef.location.nativeElement);\n                destroyComponentRef();\n            }\n        });\n    };\n    DowngradeComponentAdapter.prototype.getInjector = function () { return this.componentRef.injector; };\n    DowngradeComponentAdapter.prototype.updateInput = function (prop, prevValue, currValue) {\n        if (this.implementsOnChanges) {\n            this.inputChanges[prop] = new SimpleChange(prevValue, currValue, prevValue === currValue);\n        }\n        this.inputChangeCount++;\n        this.component[prop] = currValue;\n    };\n    DowngradeComponentAdapter.prototype.groupProjectableNodes = function () {\n        var ngContentSelectors = this.componentFactory.ngContentSelectors;\n        return groupNodesBySelector(ngContentSelectors, this.element.contents());\n    };\n    return DowngradeComponentAdapter;\n}());\nexport { DowngradeComponentAdapter };\n/**\n * Group a set of DOM nodes into `ngContent` groups, based on the given content selectors.\n */\nexport function groupNodesBySelector(ngContentSelectors, nodes) {\n    var projectableNodes = [];\n    var wildcardNgContentIndex;\n    for (var i = 0, ii = ngContentSelectors.length; i < ii; ++i) {\n        projectableNodes[i] = [];\n    }\n    for (var j = 0, jj = nodes.length; j < jj; ++j) {\n        var node = nodes[j];\n        var ngContentIndex = findMatchingNgContentIndex(node, ngContentSelectors);\n        if (ngContentIndex != null) {\n            projectableNodes[ngContentIndex].push(node);\n        }\n    }\n    return projectableNodes;\n}\nfunction findMatchingNgContentIndex(element, ngContentSelectors) {\n    var ngContentIndices = [];\n    var wildcardNgContentIndex = -1;\n    for (var i = 0; i < ngContentSelectors.length; i++) {\n        var selector = ngContentSelectors[i];\n        if (selector === '*') {\n            wildcardNgContentIndex = i;\n        }\n        else {\n            if (matchesSelector(element, selector)) {\n                ngContentIndices.push(i);\n            }\n        }\n    }\n    ngContentIndices.sort();\n    if (wildcardNgContentIndex !== -1) {\n        ngContentIndices.push(wildcardNgContentIndex);\n    }\n    return ngContentIndices.length ? ngContentIndices[0] : null;\n}\nvar _matches;\nfunction matchesSelector(el, selector) {\n    if (!_matches) {\n        var elProto = Element.prototype;\n        _matches = elProto.matches || elProto.matchesSelector || elProto.mozMatchesSelector ||\n            elProto.msMatchesSelector || elProto.oMatchesSelector || elProto.webkitMatchesSelector;\n    }\n    return el.nodeType === Node.ELEMENT_NODE ? _matches.call(el, selector) : false;\n}\n//# sourceMappingURL=downgrade_component_adapter.js.map","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ComponentFactoryResolver, NgZone } from '@angular/core';\nimport { $COMPILE, $INJECTOR, $PARSE, INJECTOR_KEY, LAZY_MODULE_REF, REQUIRE_INJECTOR, REQUIRE_NG_MODEL } from './constants';\nimport { DowngradeComponentAdapter } from './downgrade_component_adapter';\nimport { controllerKey, getComponentName, isFunction } from './util';\n/**\n * @description\n *\n * A helper function that allows an Angular component to be used from AngularJS.\n *\n * *Part of the [upgrade/static](api?query=upgrade%2Fstatic)\n * library for hybrid upgrade apps that support AoT compilation*\n *\n * This helper function returns a factory function to be used for registering\n * an AngularJS wrapper directive for \"downgrading\" an Angular component.\n *\n * ### Examples\n *\n * Let's assume that you have an Angular component called `ng2Heroes` that needs\n * to be made available in AngularJS templates.\n *\n * {@example upgrade/static/ts/full/module.ts region=\"ng2-heroes\"}\n *\n * We must create an AngularJS [directive](https://docs.angularjs.org/guide/directive)\n * that will make this Angular component available inside AngularJS templates.\n * The `downgradeComponent()` function returns a factory function that we\n * can use to define the AngularJS directive that wraps the \"downgraded\" component.\n *\n * {@example upgrade/static/ts/full/module.ts region=\"ng2-heroes-wrapper\"}\n *\n * @param info contains information about the Component that is being downgraded:\n *\n * * `component: Type<any>`: The type of the Component that will be downgraded\n * * `propagateDigest?: boolean`: Whether to perform {@link ChangeDetectorRef#detectChanges\n *   change detection} on the component on every\n *   [$digest](https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$digest). If set to `false`,\n *   change detection will still be performed when any of the component's inputs changes.\n *   (Default: true)\n *\n * @returns a factory function that can be used to register the component in an\n * AngularJS module.\n *\n * @experimental\n */\nexport function downgradeComponent(info) {\n    var directiveFactory = function ($compile, $injector, $parse) {\n        // When using `UpgradeModule`, we don't need to ensure callbacks to Angular APIs (e.g. change\n        // detection) are run inside the Angular zone, because `$digest()` will be run inside the zone\n        // (except if explicitly escaped, in which case we shouldn't force it back in).\n        // When using `downgradeModule()` though, we need to ensure such callbacks are run inside the\n        // Angular zone.\n        var needsNgZone = false;\n        var wrapCallback = function (cb) { return cb; };\n        var ngZone;\n        return {\n            restrict: 'E',\n            terminal: true,\n            require: [REQUIRE_INJECTOR, REQUIRE_NG_MODEL],\n            link: function (scope, element, attrs, required) {\n                // We might have to compile the contents asynchronously, because this might have been\n                // triggered by `UpgradeNg1ComponentAdapterBuilder`, before the Angular templates have\n                // been compiled.\n                var ngModel = required[1];\n                var parentInjector = required[0];\n                var ranAsync = false;\n                if (!parentInjector) {\n                    var lazyModuleRef = $injector.get(LAZY_MODULE_REF);\n                    needsNgZone = lazyModuleRef.needsNgZone;\n                    parentInjector = lazyModuleRef.injector || lazyModuleRef.promise;\n                }\n                var doDowngrade = function (injector) {\n                    var componentFactoryResolver = injector.get(ComponentFactoryResolver);\n                    var componentFactory = componentFactoryResolver.resolveComponentFactory(info.component);\n                    if (!componentFactory) {\n                        throw new Error('Expecting ComponentFactory for: ' + getComponentName(info.component));\n                    }\n                    var injectorPromise = new ParentInjectorPromise(element);\n                    var facade = new DowngradeComponentAdapter(element, attrs, scope, ngModel, injector, $injector, $compile, $parse, componentFactory, wrapCallback);\n                    var projectableNodes = facade.compileContents();\n                    facade.createComponent(projectableNodes);\n                    facade.setupInputs(needsNgZone, info.propagateDigest);\n                    facade.setupOutputs();\n                    facade.registerCleanup();\n                    injectorPromise.resolve(facade.getInjector());\n                    if (ranAsync) {\n                        // If this is run async, it is possible that it is not run inside a\n                        // digest and initial input values will not be detected.\n                        scope.$evalAsync(function () { });\n                    }\n                };\n                var downgradeFn = !needsNgZone ? doDowngrade : function (injector) {\n                    if (!ngZone) {\n                        ngZone = injector.get(NgZone);\n                        wrapCallback = function (cb) { return function () {\n                            return NgZone.isInAngularZone() ? cb() : ngZone.run(cb);\n                        }; };\n                    }\n                    wrapCallback(function () { return doDowngrade(injector); })();\n                };\n                if (isThenable(parentInjector)) {\n                    parentInjector.then(downgradeFn);\n                }\n                else {\n                    downgradeFn(parentInjector);\n                }\n                ranAsync = true;\n            }\n        };\n    };\n    // bracket-notation because of closure - see #14441\n    directiveFactory['$inject'] = [$COMPILE, $INJECTOR, $PARSE];\n    return directiveFactory;\n}\n/**\n * Synchronous promise-like object to wrap parent injectors,\n * to preserve the synchronous nature of Angular 1's $compile.\n */\nvar ParentInjectorPromise = /** @class */ (function () {\n    function ParentInjectorPromise(element) {\n        this.element = element;\n        this.injectorKey = controllerKey(INJECTOR_KEY);\n        this.callbacks = [];\n        // Store the promise on the element.\n        element.data(this.injectorKey, this);\n    }\n    ParentInjectorPromise.prototype.then = function (callback) {\n        if (this.injector) {\n            callback(this.injector);\n        }\n        else {\n            this.callbacks.push(callback);\n        }\n    };\n    ParentInjectorPromise.prototype.resolve = function (injector) {\n        this.injector = injector;\n        // Store the real injector on the element.\n        this.element.data(this.injectorKey, injector);\n        // Release the element to prevent memory leaks.\n        this.element = null;\n        // Run the queued callbacks.\n        this.callbacks.forEach(function (callback) { return callback(injector); });\n        this.callbacks.length = 0;\n    };\n    return ParentInjectorPromise;\n}());\nfunction isThenable(obj) {\n    return isFunction(obj.then);\n}\n//# sourceMappingURL=downgrade_component.js.map","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// We have to do a little dance to get the ng1 injector into the module injector.\n// We store the ng1 injector so that the provider in the module injector can access it\n// Then we \"get\" the ng1 injector from the module injector, which triggers the provider to read\n// the stored injector and release the reference to it.\nvar tempInjectorRef;\nexport function setTempInjectorRef(injector) {\n    tempInjectorRef = injector;\n}\nexport function injectorFactory() {\n    if (!tempInjectorRef) {\n        throw new Error('Trying to get the AngularJS injector before it being set.');\n    }\n    var injector = tempInjectorRef;\n    tempInjectorRef = null; // clear the value to prevent memory leaks\n    return injector;\n}\nexport function rootScopeFactory(i) {\n    return i.get('$rootScope');\n}\nexport function compileFactory(i) {\n    return i.get('$compile');\n}\nexport function parseFactory(i) {\n    return i.get('$parse');\n}\nexport var angular1Providers = [\n    // We must use exported named functions for the ng2 factories to keep the compiler happy:\n    // > Metadata collected contains an error that will be reported at runtime:\n    // >   Function calls are not supported.\n    // >   Consider replacing the function or lambda with a reference to an exported function\n    { provide: '$injector', useFactory: injectorFactory, deps: [] },\n    { provide: '$rootScope', useFactory: rootScopeFactory, deps: ['$injector'] },\n    { provide: '$compile', useFactory: compileFactory, deps: ['$injector'] },\n    { provide: '$parse', useFactory: parseFactory, deps: ['$injector'] }\n];\n//# sourceMappingURL=angular1_providers.js.map","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR as NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR } from '@angular/core';\nvar NgAdapterInjector = /** @class */ (function () {\n    function NgAdapterInjector(modInjector) {\n        this.modInjector = modInjector;\n    }\n    // When Angular locate a service in the component injector tree, the not found value is set to\n    // `NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR`. In such a case we should not walk up to the module\n    // injector.\n    // AngularJS only supports a single tree and should always check the module injector.\n    NgAdapterInjector.prototype.get = function (token, notFoundValue) {\n        if (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {\n            return notFoundValue;\n        }\n        return this.modInjector.get(token, notFoundValue);\n    };\n    return NgAdapterInjector;\n}());\nexport { NgAdapterInjector };\n//# sourceMappingURL=util.js.map","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as angular from './angular1';\nimport { $COMPILE, $CONTROLLER, $HTTP_BACKEND, $INJECTOR, $TEMPLATE_CACHE } from './constants';\nimport { controllerKey, directiveNormalize, isFunction } from './util';\n// Constants\nvar REQUIRE_PREFIX_RE = /^(\\^\\^?)?(\\?)?(\\^\\^?)?/;\n// Classes\nvar UpgradeHelper = /** @class */ (function () {\n    function UpgradeHelper(injector, name, elementRef, directive) {\n        this.injector = injector;\n        this.name = name;\n        this.$injector = injector.get($INJECTOR);\n        this.$compile = this.$injector.get($COMPILE);\n        this.$controller = this.$injector.get($CONTROLLER);\n        this.element = elementRef.nativeElement;\n        this.$element = angular.element(this.element);\n        this.directive = directive || UpgradeHelper.getDirective(this.$injector, name);\n    }\n    UpgradeHelper.getDirective = function ($injector, name) {\n        var directives = $injector.get(name + 'Directive');\n        if (directives.length > 1) {\n            throw new Error(\"Only support single directive definition for: \" + name);\n        }\n        var directive = directives[0];\n        // AngularJS will transform `link: xyz` to `compile: () => xyz`. So we can only tell there was a\n        // user-defined `compile` if there is no `link`. In other cases, we will just ignore `compile`.\n        if (directive.compile && !directive.link)\n            notSupported(name, 'compile');\n        if (directive.replace)\n            notSupported(name, 'replace');\n        if (directive.terminal)\n            notSupported(name, 'terminal');\n        return directive;\n    };\n    UpgradeHelper.getTemplate = function ($injector, directive, fetchRemoteTemplate) {\n        if (fetchRemoteTemplate === void 0) { fetchRemoteTemplate = false; }\n        if (directive.template !== undefined) {\n            return getOrCall(directive.template);\n        }\n        else if (directive.templateUrl) {\n            var $templateCache_1 = $injector.get($TEMPLATE_CACHE);\n            var url_1 = getOrCall(directive.templateUrl);\n            var template = $templateCache_1.get(url_1);\n            if (template !== undefined) {\n                return template;\n            }\n            else if (!fetchRemoteTemplate) {\n                throw new Error('loading directive templates asynchronously is not supported');\n            }\n            return new Promise(function (resolve, reject) {\n                var $httpBackend = $injector.get($HTTP_BACKEND);\n                $httpBackend('GET', url_1, null, function (status, response) {\n                    if (status === 200) {\n                        resolve($templateCache_1.put(url_1, response));\n                    }\n                    else {\n                        reject(\"GET component template from '\" + url_1 + \"' returned '\" + status + \": \" + response + \"'\");\n                    }\n                });\n            });\n        }\n        else {\n            throw new Error(\"Directive '\" + directive.name + \"' is not a component, it is missing template.\");\n        }\n    };\n    UpgradeHelper.prototype.buildController = function (controllerType, $scope) {\n        // TODO: Document that we do not pre-assign bindings on the controller instance.\n        // Quoted properties below so that this code can be optimized with Closure Compiler.\n        var locals = { '$scope': $scope, '$element': this.$element };\n        var controller = this.$controller(controllerType, locals, null, this.directive.controllerAs);\n        this.$element.data(controllerKey(this.directive.name), controller);\n        return controller;\n    };\n    UpgradeHelper.prototype.compileTemplate = function (template) {\n        if (template === undefined) {\n            template = UpgradeHelper.getTemplate(this.$injector, this.directive);\n        }\n        return this.compileHtml(template);\n    };\n    UpgradeHelper.prototype.prepareTransclusion = function () {\n        var _this = this;\n        var transclude = this.directive.transclude;\n        var contentChildNodes = this.extractChildNodes();\n        var attachChildrenFn = function (scope, cloneAttachFn) {\n            // Since AngularJS v1.5.8, `cloneAttachFn` will try to destroy the transclusion scope if\n            // `$template` is empty. Since the transcluded content comes from Angular, not AngularJS,\n            // there will be no transclusion scope here.\n            // Provide a dummy `scope.$destroy()` method to prevent `cloneAttachFn` from throwing.\n            scope = scope || { $destroy: function () { return undefined; } };\n            return cloneAttachFn($template, scope);\n        };\n        var $template = contentChildNodes;\n        if (transclude) {\n            var slots_1 = Object.create(null);\n            if (typeof transclude === 'object') {\n                $template = [];\n                var slotMap_1 = Object.create(null);\n                var filledSlots_1 = Object.create(null);\n                // Parse the element selectors.\n                Object.keys(transclude).forEach(function (slotName) {\n                    var selector = transclude[slotName];\n                    var optional = selector.charAt(0) === '?';\n                    selector = optional ? selector.substring(1) : selector;\n                    slotMap_1[selector] = slotName;\n                    slots_1[slotName] = null; // `null`: Defined but not yet filled.\n                    filledSlots_1[slotName] = optional; // Consider optional slots as filled.\n                });\n                // Add the matching elements into their slot.\n                contentChildNodes.forEach(function (node) {\n                    var slotName = slotMap_1[directiveNormalize(node.nodeName.toLowerCase())];\n                    if (slotName) {\n                        filledSlots_1[slotName] = true;\n                        slots_1[slotName] = slots_1[slotName] || [];\n                        slots_1[slotName].push(node);\n                    }\n                    else {\n                        $template.push(node);\n                    }\n                });\n                // Check for required slots that were not filled.\n                Object.keys(filledSlots_1).forEach(function (slotName) {\n                    if (!filledSlots_1[slotName]) {\n                        throw new Error(\"Required transclusion slot '\" + slotName + \"' on directive: \" + _this.name);\n                    }\n                });\n                Object.keys(slots_1).filter(function (slotName) { return slots_1[slotName]; }).forEach(function (slotName) {\n                    var nodes = slots_1[slotName];\n                    slots_1[slotName] = function (scope, cloneAttach) {\n                        return cloneAttach(nodes, scope);\n                    };\n                });\n            }\n            // Attach `$$slots` to default slot transclude fn.\n            attachChildrenFn.$$slots = slots_1;\n            // AngularJS v1.6+ ignores empty or whitespace-only transcluded text nodes. But Angular\n            // removes all text content after the first interpolation and updates it later, after\n            // evaluating the expressions. This would result in AngularJS failing to recognize text\n            // nodes that start with an interpolation as transcluded content and use the fallback\n            // content instead.\n            // To avoid this issue, we add a\n            // [zero-width non-joiner character](https://en.wikipedia.org/wiki/Zero-width_non-joiner)\n            // to empty text nodes (which can only be a result of Angular removing their initial content).\n            // NOTE: Transcluded text content that starts with whitespace followed by an interpolation\n            //       will still fail to be detected by AngularJS v1.6+\n            $template.forEach(function (node) {\n                if (node.nodeType === Node.TEXT_NODE && !node.nodeValue) {\n                    node.nodeValue = '\\u200C';\n                }\n            });\n        }\n        return attachChildrenFn;\n    };\n    UpgradeHelper.prototype.resolveAndBindRequiredControllers = function (controllerInstance) {\n        var directiveRequire = this.getDirectiveRequire();\n        var requiredControllers = this.resolveRequire(directiveRequire);\n        if (controllerInstance && this.directive.bindToController && isMap(directiveRequire)) {\n            var requiredControllersMap_1 = requiredControllers;\n            Object.keys(requiredControllersMap_1).forEach(function (key) {\n                controllerInstance[key] = requiredControllersMap_1[key];\n            });\n        }\n        return requiredControllers;\n    };\n    UpgradeHelper.prototype.compileHtml = function (html) {\n        this.element.innerHTML = html;\n        return this.$compile(this.element.childNodes);\n    };\n    UpgradeHelper.prototype.extractChildNodes = function () {\n        var childNodes = [];\n        var childNode;\n        while (childNode = this.element.firstChild) {\n            this.element.removeChild(childNode);\n            childNodes.push(childNode);\n        }\n        return childNodes;\n    };\n    UpgradeHelper.prototype.getDirectiveRequire = function () {\n        var require = this.directive.require || (this.directive.controller && this.directive.name);\n        if (isMap(require)) {\n            Object.keys(require).forEach(function (key) {\n                var value = require[key];\n                var match = value.match(REQUIRE_PREFIX_RE);\n                var name = value.substring(match[0].length);\n                if (!name) {\n                    require[key] = match[0] + key;\n                }\n            });\n        }\n        return require;\n    };\n    UpgradeHelper.prototype.resolveRequire = function (require, controllerInstance) {\n        var _this = this;\n        if (!require) {\n            return null;\n        }\n        else if (Array.isArray(require)) {\n            return require.map(function (req) { return _this.resolveRequire(req); });\n        }\n        else if (typeof require === 'object') {\n            var value_1 = {};\n            Object.keys(require).forEach(function (key) { return value_1[key] = _this.resolveRequire(require[key]); });\n            return value_1;\n        }\n        else if (typeof require === 'string') {\n            var match = require.match(REQUIRE_PREFIX_RE);\n            var inheritType = match[1] || match[3];\n            var name_1 = require.substring(match[0].length);\n            var isOptional = !!match[2];\n            var searchParents = !!inheritType;\n            var startOnParent = inheritType === '^^';\n            var ctrlKey = controllerKey(name_1);\n            var elem = startOnParent ? this.$element.parent() : this.$element;\n            var value = searchParents ? elem.inheritedData(ctrlKey) : elem.data(ctrlKey);\n            if (!value && !isOptional) {\n                throw new Error(\"Unable to find required '\" + require + \"' in upgraded directive '\" + this.name + \"'.\");\n            }\n            return value;\n        }\n        else {\n            throw new Error(\"Unrecognized 'require' syntax on upgraded directive '\" + this.name + \"': \" + require);\n        }\n    };\n    return UpgradeHelper;\n}());\nexport { UpgradeHelper };\nfunction getOrCall(property) {\n    return isFunction(property) ? property() : property;\n}\n// NOTE: Only works for `typeof T !== 'object'`.\nfunction isMap(value) {\n    return value && !Array.isArray(value) && typeof value === 'object';\n}\nfunction notSupported(name, feature) {\n    throw new Error(\"Upgraded directive '\" + name + \"' contains unsupported feature: '\" + feature + \"'.\");\n}\n//# sourceMappingURL=upgrade_helper.js.map","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { EventEmitter, ɵlooseIdentical as looseIdentical } from '@angular/core';\nimport { $SCOPE } from '../common/constants';\nimport { UpgradeHelper } from '../common/upgrade_helper';\nimport { isFunction } from '../common/util';\nvar NOT_SUPPORTED = 'NOT_SUPPORTED';\nvar INITIAL_VALUE = {\n    __UNINITIALIZED__: true\n};\nvar Bindings = /** @class */ (function () {\n    function Bindings() {\n        this.twoWayBoundProperties = [];\n        this.twoWayBoundLastValues = [];\n        this.expressionBoundProperties = [];\n        this.propertyToOutputMap = {};\n    }\n    return Bindings;\n}());\n/**\n * @description\n *\n * A helper class that allows an AngularJS component to be used from Angular.\n *\n * *Part of the [upgrade/static](api?query=upgrade%2Fstatic)\n * library for hybrid upgrade apps that support AoT compilation*\n *\n * This helper class should be used as a base class for creating Angular directives\n * that wrap AngularJS components that need to be \"upgraded\".\n *\n * ### Examples\n *\n * Let's assume that you have an AngularJS component called `ng1Hero` that needs\n * to be made available in Angular templates.\n *\n * {@example upgrade/static/ts/full/module.ts region=\"ng1-hero\"}\n *\n * We must create a `Directive` that will make this AngularJS component\n * available inside Angular templates.\n *\n * {@example upgrade/static/ts/full/module.ts region=\"ng1-hero-wrapper\"}\n *\n * In this example you can see that we must derive from the `UpgradeComponent`\n * base class but also provide an {@link Directive `@Directive`} decorator. This is\n * because the AoT compiler requires that this information is statically available at\n * compile time.\n *\n * Note that we must do the following:\n * * specify the directive's selector (`ng1-hero`)\n * * specify all inputs and outputs that the AngularJS component expects\n * * derive from `UpgradeComponent`\n * * call the base class from the constructor, passing\n *   * the AngularJS name of the component (`ng1Hero`)\n *   * the `ElementRef` and `Injector` for the component wrapper\n *\n * @experimental\n */\nvar UpgradeComponent = /** @class */ (function () {\n    /**\n     * Create a new `UpgradeComponent` instance. You should not normally need to do this.\n     * Instead you should derive a new class from this one and call the super constructor\n     * from the base class.\n     *\n     * {@example upgrade/static/ts/full/module.ts region=\"ng1-hero-wrapper\" }\n     *\n     * * The `name` parameter should be the name of the AngularJS directive.\n     * * The `elementRef` and `injector` parameters should be acquired from Angular by dependency\n     *   injection into the base class constructor.\n     */\n    function UpgradeComponent(name, elementRef, injector) {\n        this.name = name;\n        this.elementRef = elementRef;\n        this.injector = injector;\n        this.helper = new UpgradeHelper(injector, name, elementRef);\n        this.$injector = this.helper.$injector;\n        this.element = this.helper.element;\n        this.$element = this.helper.$element;\n        this.directive = this.helper.directive;\n        this.bindings = this.initializeBindings(this.directive);\n        // We ask for the AngularJS scope from the Angular injector, since\n        // we will put the new component scope onto the new injector for each component\n        var $parentScope = injector.get($SCOPE);\n        // QUESTION 1: Should we create an isolated scope if the scope is only true?\n        // QUESTION 2: Should we make the scope accessible through `$element.scope()/isolateScope()`?\n        this.$componentScope = $parentScope.$new(!!this.directive.scope);\n        this.initializeOutputs();\n    }\n    UpgradeComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        // Collect contents, insert and compile template\n        var attachChildNodes = this.helper.prepareTransclusion();\n        var linkFn = this.helper.compileTemplate();\n        // Instantiate controller\n        var controllerType = this.directive.controller;\n        var bindToController = this.directive.bindToController;\n        if (controllerType) {\n            this.controllerInstance = this.helper.buildController(controllerType, this.$componentScope);\n        }\n        else if (bindToController) {\n            throw new Error(\"Upgraded directive '\" + this.directive.name + \"' specifies 'bindToController' but no controller.\");\n        }\n        // Set up outputs\n        this.bindingDestination = bindToController ? this.controllerInstance : this.$componentScope;\n        this.bindOutputs();\n        // Require other controllers\n        var requiredControllers = this.helper.resolveAndBindRequiredControllers(this.controllerInstance);\n        // Hook: $onChanges\n        if (this.pendingChanges) {\n            this.forwardChanges(this.pendingChanges);\n            this.pendingChanges = null;\n        }\n        // Hook: $onInit\n        if (this.controllerInstance && isFunction(this.controllerInstance.$onInit)) {\n            this.controllerInstance.$onInit();\n        }\n        // Hook: $doCheck\n        if (this.controllerInstance && isFunction(this.controllerInstance.$doCheck)) {\n            var callDoCheck = function () { return _this.controllerInstance.$doCheck(); };\n            this.unregisterDoCheckWatcher = this.$componentScope.$parent.$watch(callDoCheck);\n            callDoCheck();\n        }\n        // Linking\n        var link = this.directive.link;\n        var preLink = (typeof link == 'object') && link.pre;\n        var postLink = (typeof link == 'object') ? link.post : link;\n        var attrs = NOT_SUPPORTED;\n        var transcludeFn = NOT_SUPPORTED;\n        if (preLink) {\n            preLink(this.$componentScope, this.$element, attrs, requiredControllers, transcludeFn);\n        }\n        linkFn(this.$componentScope, null, { parentBoundTranscludeFn: attachChildNodes });\n        if (postLink) {\n            postLink(this.$componentScope, this.$element, attrs, requiredControllers, transcludeFn);\n        }\n        // Hook: $postLink\n        if (this.controllerInstance && isFunction(this.controllerInstance.$postLink)) {\n            this.controllerInstance.$postLink();\n        }\n    };\n    UpgradeComponent.prototype.ngOnChanges = function (changes) {\n        if (!this.bindingDestination) {\n            this.pendingChanges = changes;\n        }\n        else {\n            this.forwardChanges(changes);\n        }\n    };\n    UpgradeComponent.prototype.ngDoCheck = function () {\n        var _this = this;\n        var twoWayBoundProperties = this.bindings.twoWayBoundProperties;\n        var twoWayBoundLastValues = this.bindings.twoWayBoundLastValues;\n        var propertyToOutputMap = this.bindings.propertyToOutputMap;\n        twoWayBoundProperties.forEach(function (propName, idx) {\n            var newValue = _this.bindingDestination[propName];\n            var oldValue = twoWayBoundLastValues[idx];\n            if (!looseIdentical(newValue, oldValue)) {\n                var outputName = propertyToOutputMap[propName];\n                var eventEmitter = _this[outputName];\n                eventEmitter.emit(newValue);\n                twoWayBoundLastValues[idx] = newValue;\n            }\n        });\n    };\n    UpgradeComponent.prototype.ngOnDestroy = function () {\n        if (isFunction(this.unregisterDoCheckWatcher)) {\n            this.unregisterDoCheckWatcher();\n        }\n        if (this.controllerInstance && isFunction(this.controllerInstance.$onDestroy)) {\n            this.controllerInstance.$onDestroy();\n        }\n        this.$componentScope.$destroy();\n    };\n    UpgradeComponent.prototype.initializeBindings = function (directive) {\n        var _this = this;\n        var btcIsObject = typeof directive.bindToController === 'object';\n        if (btcIsObject && Object.keys(directive.scope).length) {\n            throw new Error(\"Binding definitions on scope and controller at the same time is not supported.\");\n        }\n        var context = (btcIsObject) ? directive.bindToController : directive.scope;\n        var bindings = new Bindings();\n        if (typeof context == 'object') {\n            Object.keys(context).forEach(function (propName) {\n                var definition = context[propName];\n                var bindingType = definition.charAt(0);\n                // QUESTION: What about `=*`? Ignore? Throw? Support?\n                switch (bindingType) {\n                    case '@':\n                    case '<':\n                        // We don't need to do anything special. They will be defined as inputs on the\n                        // upgraded component facade and the change propagation will be handled by\n                        // `ngOnChanges()`.\n                        break;\n                    case '=':\n                        bindings.twoWayBoundProperties.push(propName);\n                        bindings.twoWayBoundLastValues.push(INITIAL_VALUE);\n                        bindings.propertyToOutputMap[propName] = propName + 'Change';\n                        break;\n                    case '&':\n                        bindings.expressionBoundProperties.push(propName);\n                        bindings.propertyToOutputMap[propName] = propName;\n                        break;\n                    default:\n                        var json = JSON.stringify(context);\n                        throw new Error(\"Unexpected mapping '\" + bindingType + \"' in '\" + json + \"' in '\" + _this.name + \"' directive.\");\n                }\n            });\n        }\n        return bindings;\n    };\n    UpgradeComponent.prototype.initializeOutputs = function () {\n        var _this = this;\n        // Initialize the outputs for `=` and `&` bindings\n        this.bindings.twoWayBoundProperties.concat(this.bindings.expressionBoundProperties)\n            .forEach(function (propName) {\n            var outputName = _this.bindings.propertyToOutputMap[propName];\n            _this[outputName] = new EventEmitter();\n        });\n    };\n    UpgradeComponent.prototype.bindOutputs = function () {\n        var _this = this;\n        // Bind `&` bindings to the corresponding outputs\n        this.bindings.expressionBoundProperties.forEach(function (propName) {\n            var outputName = _this.bindings.propertyToOutputMap[propName];\n            var emitter = _this[outputName];\n            _this.bindingDestination[propName] = function (value) { return emitter.emit(value); };\n        });\n    };\n    UpgradeComponent.prototype.forwardChanges = function (changes) {\n        var _this = this;\n        // Forward input changes to `bindingDestination`\n        Object.keys(changes).forEach(function (propName) { return _this.bindingDestination[propName] = changes[propName].currentValue; });\n        if (isFunction(this.bindingDestination.$onChanges)) {\n            this.bindingDestination.$onChanges(changes);\n        }\n    };\n    return UpgradeComponent;\n}());\nexport { UpgradeComponent };\n//# sourceMappingURL=upgrade_component.js.map","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { Injector, NgModule, NgZone, Testability } from '@angular/core';\nimport * as angular from '../common/angular1';\nimport { $$TESTABILITY, $DELEGATE, $INJECTOR, $INTERVAL, $PROVIDE, INJECTOR_KEY, LAZY_MODULE_REF, UPGRADE_MODULE_NAME } from '../common/constants';\nimport { controllerKey } from '../common/util';\nimport { angular1Providers, setTempInjectorRef } from './angular1_providers';\nimport { NgAdapterInjector } from './util';\n/**\n * @description\n *\n * An `NgModule`, which you import to provide AngularJS core services,\n * and has an instance method used to bootstrap the hybrid upgrade application.\n *\n * *Part of the [upgrade/static](api?query=upgrade/static)\n * library for hybrid upgrade apps that support AoT compilation*\n *\n * The `upgrade/static` package contains helpers that allow AngularJS and Angular components\n * to be used together inside a hybrid upgrade application, which supports AoT compilation.\n *\n * Specifically, the classes and functions in the `upgrade/static` module allow the following:\n *\n * 1. Creation of an Angular directive that wraps and exposes an AngularJS component so\n *    that it can be used in an Angular template. See `UpgradeComponent`.\n * 2. Creation of an AngularJS directive that wraps and exposes an Angular component so\n *    that it can be used in an AngularJS template. See `downgradeComponent`.\n * 3. Creation of an Angular root injector provider that wraps and exposes an AngularJS\n *    service so that it can be injected into an Angular context. See\n *    {@link UpgradeModule#upgrading-an-angular-1-service Upgrading an AngularJS service} below.\n * 4. Creation of an AngularJS service that wraps and exposes an Angular injectable\n *    so that it can be injected into an AngularJS context. See `downgradeInjectable`.\n * 3. Bootstrapping of a hybrid Angular application which contains both of the frameworks\n *    coexisting in a single application.\n *\n * @usageNotes\n *\n * ```ts\n * import {UpgradeModule} from '@angular/upgrade/static';\n * ```\n *\n * See also the {@link UpgradeModule#examples examples} below.\n *\n * ### Mental Model\n *\n * When reasoning about how a hybrid application works it is useful to have a mental model which\n * describes what is happening and explains what is happening at the lowest level.\n *\n * 1. There are two independent frameworks running in a single application, each framework treats\n *    the other as a black box.\n * 2. Each DOM element on the page is owned exactly by one framework. Whichever framework\n *    instantiated the element is the owner. Each framework only updates/interacts with its own\n *    DOM elements and ignores others.\n * 3. AngularJS directives always execute inside the AngularJS framework codebase regardless of\n *    where they are instantiated.\n * 4. Angular components always execute inside the Angular framework codebase regardless of\n *    where they are instantiated.\n * 5. An AngularJS component can be \"upgraded\"\" to an Angular component. This is achieved by\n *    defining an Angular directive, which bootstraps the AngularJS component at its location\n *    in the DOM. See `UpgradeComponent`.\n * 6. An Angular component can be \"downgraded\" to an AngularJS component. This is achieved by\n *    defining an AngularJS directive, which bootstraps the Angular component at its location\n *    in the DOM. See `downgradeComponent`.\n * 7. Whenever an \"upgraded\"/\"downgraded\" component is instantiated the host element is owned by\n *    the framework doing the instantiation. The other framework then instantiates and owns the\n *    view for that component.\n *    1. This implies that the component bindings will always follow the semantics of the\n *       instantiation framework.\n *    2. The DOM attributes are parsed by the framework that owns the current template. So\n *       attributes in AngularJS templates must use kebab-case, while AngularJS templates must use\n *       camelCase.\n *    3. However the template binding syntax will always use the Angular style, e.g. square\n *       brackets (`[...]`) for property binding.\n * 8. Angular is bootstrapped first; AngularJS is bootstrapped second. AngularJS always owns the\n *    root component of the application.\n * 9. The new application is running in an Angular zone, and therefore it no longer needs calls to\n *    `$apply()`.\n *\n * ### The `UpgradeModule` class\n *\n * This class is an `NgModule`, which you import to provide AngularJS core services,\n * and has an instance method used to bootstrap the hybrid upgrade application.\n *\n * #### Core AngularJS services\n * Importing this `NgModule` will add providers for the core\n * [AngularJS services](https://docs.angularjs.org/api/ng/service) to the root injector.\n *\n * #### Bootstrap\n * The runtime instance of this class contains a {@link UpgradeModule#bootstrap `bootstrap()`}\n * method, which you use to bootstrap the top level AngularJS module onto an element in the\n * DOM for the hybrid upgrade app.\n *\n * It also contains properties to access the {@link UpgradeModule#injector root injector}, the\n * bootstrap `NgZone` and the\n * [AngularJS $injector](https://docs.angularjs.org/api/auto/service/$injector).\n *\n * ### Examples\n *\n * Import the `UpgradeModule` into your top level {@link NgModule Angular `NgModule`}.\n *\n * {@example upgrade/static/ts/full/module.ts region='ng2-module'}\n *\n * Then inject `UpgradeModule` into your Angular `NgModule` and use it to bootstrap the top level\n * [AngularJS module](https://docs.angularjs.org/api/ng/type/angular.Module) in the\n * `ngDoBootstrap()` method.\n *\n * {@example upgrade/static/ts/full/module.ts region='bootstrap-ng1'}\n *\n * Finally, kick off the whole process, by bootstraping your top level Angular `NgModule`.\n *\n * {@example upgrade/static/ts/full/module.ts region='bootstrap-ng2'}\n *\n * {@a upgrading-an-angular-1-service}\n * ### Upgrading an AngularJS service\n *\n * There is no specific API for upgrading an AngularJS service. Instead you should just follow the\n * following recipe:\n *\n * Let's say you have an AngularJS service:\n *\n * {@example upgrade/static/ts/full/module.ts region=\"ng1-text-formatter-service\"}\n *\n * Then you should define an Angular provider to be included in your `NgModule` `providers`\n * property.\n *\n * {@example upgrade/static/ts/full/module.ts region=\"upgrade-ng1-service\"}\n *\n * Then you can use the \"upgraded\" AngularJS service by injecting it into an Angular component\n * or service.\n *\n * {@example upgrade/static/ts/full/module.ts region=\"use-ng1-upgraded-service\"}\n *\n * @experimental\n */\nvar UpgradeModule = /** @class */ (function () {\n    function UpgradeModule(\n    /** The root `Injector` for the upgrade application. */\n    injector, \n    /** The bootstrap zone for the upgrade application */\n    ngZone) {\n        this.ngZone = ngZone;\n        this.injector = new NgAdapterInjector(injector);\n    }\n    /**\n     * Bootstrap an AngularJS application from this NgModule\n     * @param element the element on which to bootstrap the AngularJS application\n     * @param [modules] the AngularJS modules to bootstrap for this application\n     * @param [config] optional extra AngularJS bootstrap configuration\n     */\n    UpgradeModule.prototype.bootstrap = function (element, modules, config /*angular.IAngularBootstrapConfig*/) {\n        var _this = this;\n        if (modules === void 0) { modules = []; }\n        var INIT_MODULE_NAME = UPGRADE_MODULE_NAME + '.init';\n        // Create an ng1 module to bootstrap\n        var initModule = angular\n            .module(INIT_MODULE_NAME, [])\n            .value(INJECTOR_KEY, this.injector)\n            .factory(LAZY_MODULE_REF, [\n            INJECTOR_KEY,\n            function (injector) { return ({ injector: injector, needsNgZone: false }); }\n        ])\n            .config([\n            $PROVIDE, $INJECTOR,\n            function ($provide, $injector) {\n                if ($injector.has($$TESTABILITY)) {\n                    $provide.decorator($$TESTABILITY, [\n                        $DELEGATE,\n                        function (testabilityDelegate) {\n                            var originalWhenStable = testabilityDelegate.whenStable;\n                            var injector = _this.injector;\n                            // Cannot use arrow function below because we need the context\n                            var newWhenStable = function (callback) {\n                                originalWhenStable.call(testabilityDelegate, function () {\n                                    var ng2Testability = injector.get(Testability);\n                                    if (ng2Testability.isStable()) {\n                                        callback();\n                                    }\n                                    else {\n                                        ng2Testability.whenStable(newWhenStable.bind(testabilityDelegate, callback));\n                                    }\n                                });\n                            };\n                            testabilityDelegate.whenStable = newWhenStable;\n                            return testabilityDelegate;\n                        }\n                    ]);\n                }\n                if ($injector.has($INTERVAL)) {\n                    $provide.decorator($INTERVAL, [\n                        $DELEGATE,\n                        function (intervalDelegate) {\n                            // Wrap the $interval service so that setInterval is called outside NgZone,\n                            // but the callback is still invoked within it. This is so that $interval\n                            // won't block stability, which preserves the behavior from AngularJS.\n                            var wrappedInterval = function (fn, delay, count, invokeApply) {\n                                var pass = [];\n                                for (var _i = 4; _i < arguments.length; _i++) {\n                                    pass[_i - 4] = arguments[_i];\n                                }\n                                return _this.ngZone.runOutsideAngular(function () {\n                                    return intervalDelegate.apply(void 0, [function () {\n                                            var args = [];\n                                            for (var _i = 0; _i < arguments.length; _i++) {\n                                                args[_i] = arguments[_i];\n                                            }\n                                            // Run callback in the next VM turn - $interval calls\n                                            // $rootScope.$apply, and running the callback in NgZone will\n                                            // cause a '$digest already in progress' error if it's in the\n                                            // same vm turn.\n                                            setTimeout(function () { _this.ngZone.run(function () { return fn.apply(void 0, args); }); });\n                                        }, delay, count, invokeApply].concat(pass));\n                                });\n                            };\n                            wrappedInterval['cancel'] = intervalDelegate.cancel;\n                            return wrappedInterval;\n                        }\n                    ]);\n                }\n            }\n        ])\n            .run([\n            $INJECTOR,\n            function ($injector) {\n                _this.$injector = $injector;\n                // Initialize the ng1 $injector provider\n                setTempInjectorRef($injector);\n                _this.injector.get($INJECTOR);\n                // Put the injector on the DOM, so that it can be \"required\"\n                angular.element(element).data(controllerKey(INJECTOR_KEY), _this.injector);\n                // Wire up the ng1 rootScope to run a digest cycle whenever the zone settles\n                // We need to do this in the next tick so that we don't prevent the bootup\n                // stabilizing\n                setTimeout(function () {\n                    var $rootScope = $injector.get('$rootScope');\n                    var subscription = _this.ngZone.onMicrotaskEmpty.subscribe(function () { return $rootScope.$digest(); });\n                    $rootScope.$on('$destroy', function () { subscription.unsubscribe(); });\n                }, 0);\n            }\n        ]);\n        var upgradeModule = angular.module(UPGRADE_MODULE_NAME, [INIT_MODULE_NAME].concat(modules));\n        // Make sure resumeBootstrap() only exists if the current bootstrap is deferred\n        var windowAngular = window['angular'];\n        windowAngular.resumeBootstrap = undefined;\n        // Bootstrap the AngularJS application inside our zone\n        this.ngZone.run(function () { angular.bootstrap(element, [upgradeModule.name], config); });\n        // Patch resumeBootstrap() to run inside the ngZone\n        if (windowAngular.resumeBootstrap) {\n            var originalResumeBootstrap_1 = windowAngular.resumeBootstrap;\n            var ngZone_1 = this.ngZone;\n            windowAngular.resumeBootstrap = function () {\n                var _this = this;\n                var args = arguments;\n                windowAngular.resumeBootstrap = originalResumeBootstrap_1;\n                return ngZone_1.run(function () { return windowAngular.resumeBootstrap.apply(_this, args); });\n            };\n        }\n    };\n    UpgradeModule = tslib_1.__decorate([\n        NgModule({ providers: [angular1Providers] }),\n        tslib_1.__metadata(\"design:paramtypes\", [Injector,\n            NgZone])\n    ], UpgradeModule);\n    return UpgradeModule;\n}());\nexport { UpgradeModule };\n//# sourceMappingURL=upgrade_module.js.map","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { platformBrowser } from '@angular/platform-browser';\nimport * as angular from '../common/angular1';\nimport { $INJECTOR, INJECTOR_KEY, LAZY_MODULE_REF, UPGRADE_MODULE_NAME } from '../common/constants';\nimport { isFunction } from '../common/util';\nimport { angular1Providers, setTempInjectorRef } from './angular1_providers';\nimport { NgAdapterInjector } from './util';\n/**\n * @description\n *\n * A helper function for creating an AngularJS module that can bootstrap an Angular module\n * \"on-demand\" (possibly lazily) when a {@link downgradeComponent downgraded component} needs to be\n * instantiated.\n *\n * *Part of the [upgrade/static](api?query=upgrade/static) library for hybrid upgrade apps that\n * support AoT compilation.*\n *\n * It allows loading/bootstrapping the Angular part of a hybrid application lazily and not having to\n * pay the cost up-front. For example, you can have an AngularJS application that uses Angular for\n * specific routes and only instantiate the Angular modules if/when the user visits one of these\n * routes.\n *\n * The Angular module will be bootstrapped once (when requested for the first time) and the same\n * reference will be used from that point onwards.\n *\n * `downgradeModule()` requires either an `NgModuleFactory` or a function:\n * - `NgModuleFactory`: If you pass an `NgModuleFactory`, it will be used to instantiate a module\n *   using `platformBrowser`'s {@link PlatformRef#bootstrapModuleFactory bootstrapModuleFactory()}.\n * - `Function`: If you pass a function, it is expected to return a promise resolving to an\n *   `NgModuleRef`. The function is called with an array of extra {@link StaticProvider Providers}\n *   that are expected to be available from the returned `NgModuleRef`'s `Injector`.\n *\n * `downgradeModule()` returns the name of the created AngularJS wrapper module. You can use it to\n * declare a dependency in your main AngularJS module.\n *\n * {@example upgrade/static/ts/lite/module.ts region=\"basic-how-to\"}\n *\n * For more details on how to use `downgradeModule()` see\n * [Upgrading for Performance](guide/upgrade-performance).\n *\n * @usageNotes\n *\n * Apart from `UpgradeModule`, you can use the rest of the `upgrade/static` helpers as usual to\n * build a hybrid application. Note that the Angular pieces (e.g. downgraded services) will not be\n * available until the downgraded module has been bootstrapped, i.e. by instantiating a downgraded\n * component.\n *\n * <div class=\"alert is-important\">\n *\n *   You cannot use `downgradeModule()` and `UpgradeModule` in the same hybrid application.<br />\n *   Use one or the other.\n *\n * </div>\n *\n * ### Differences with `UpgradeModule`\n *\n * Besides their different API, there are two important internal differences between\n * `downgradeModule()` and `UpgradeModule` that affect the behavior of hybrid applications:\n *\n * 1. Unlike `UpgradeModule`, `downgradeModule()` does not bootstrap the main AngularJS module\n *    inside the {@link NgZone Angular zone}.\n * 2. Unlike `UpgradeModule`, `downgradeModule()` does not automatically run a\n *    [$digest()](https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$digest) when changes are\n *    detected in the Angular part of the application.\n *\n * What this means is that applications using `UpgradeModule` will run change detection more\n * frequently in order to ensure that both frameworks are properly notified about possible changes.\n * This will inevitably result in more change detection runs than necessary.\n *\n * `downgradeModule()`, on the other side, does not try to tie the two change detection systems as\n * tightly, restricting the explicit change detection runs only to cases where it knows it is\n * necessary (e.g. when the inputs of a downgraded component change). This improves performance,\n * especially in change-detection-heavy applications, but leaves it up to the developer to manually\n * notify each framework as needed.\n *\n * For a more detailed discussion of the differences and their implications, see\n * [Upgrading for Performance](guide/upgrade-performance).\n *\n * <div class=\"alert is-helpful\">\n *\n *   You can manually trigger a change detection run in AngularJS using\n *   [scope.$apply(...)](https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$apply) or\n *   [$rootScope.$digest()](https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$digest).\n *\n *   You can manually trigger a change detection run in Angular using {@link NgZone#run\n *   ngZone.run(...)}.\n *\n * </div>\n *\n * @experimental\n */\nexport function downgradeModule(moduleFactoryOrBootstrapFn) {\n    var LAZY_MODULE_NAME = UPGRADE_MODULE_NAME + '.lazy';\n    var bootstrapFn = isFunction(moduleFactoryOrBootstrapFn) ?\n        moduleFactoryOrBootstrapFn :\n        function (extraProviders) {\n            return platformBrowser(extraProviders).bootstrapModuleFactory(moduleFactoryOrBootstrapFn);\n        };\n    var injector;\n    // Create an ng1 module to bootstrap.\n    angular.module(LAZY_MODULE_NAME, [])\n        .factory(INJECTOR_KEY, function () {\n        if (!injector) {\n            throw new Error('Trying to get the Angular injector before bootstrapping an Angular module.');\n        }\n        return injector;\n    })\n        .factory(LAZY_MODULE_REF, [\n        $INJECTOR,\n        function ($injector) {\n            setTempInjectorRef($injector);\n            var result = {\n                needsNgZone: true,\n                promise: bootstrapFn(angular1Providers).then(function (ref) {\n                    injector = result.injector = new NgAdapterInjector(ref.injector);\n                    injector.get($INJECTOR);\n                    return injector;\n                })\n            };\n            return result;\n        }\n    ]);\n    return LAZY_MODULE_NAME;\n}\n//# sourceMappingURL=downgrade_module.js.map"]}