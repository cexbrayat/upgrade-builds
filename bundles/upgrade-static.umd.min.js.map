{"version":3,"sources":["../../../packages/upgrade/esm5/static/src/common/angular1.js","../../../packages/upgrade/esm5/static/src/common/component_info.js","../../../packages/upgrade/esm5/static/src/common/downgrade_component_adapter.js","../../../packages/upgrade/esm5/static/src/common/util.js","../../../packages/upgrade/esm5/static/src/common/downgrade_component.js","../../../packages/upgrade/esm5/static/src/static/angular1_providers.js","../../../packages/upgrade/esm5/static/src/static/util.js","../../../packages/upgrade/esm5/static/src/common/upgrade_helper.js","../../../packages/upgrade/esm5/static/src/static/upgrade_component.js","../../../packages/upgrade/esm5/static/src/static/upgrade_module.js","../../../packages/upgrade/esm5/static/src/common/downgrade_injectable.js","../../../packages/upgrade/esm5/static/src/static/downgrade_module.js"],"names":["noNg","Error","noNgElement","cleanData","angular","bootstrap","module","element","version","getAngularJSGlobal","module$1","prefix","dependencies","this","parseBinding","prototype","bracketAttr","attr","parenAttr","bracketParenAttr","capitalAttr","charAt","toUpperCase","substr","onAttr","DowngradeComponentAdapter","attrs","scope","ngModel","parentInjector","$injector","$compile","$parse","componentFactory","wrapCallback","componentScope","$new","compiledProjectableNodes","groupProjectableNodes","map","nodes","_this","forEach","linkFn","clone","push","projectableNodes","providers","provide","$SCOPE","useValue","childInjector","_angular_core","Injector","create","parent","name","Testability","viewChangeDetector","componentRef","injector","get","ChangeDetectorRef","changeDetector","TestabilityRegistry","instance","component","testability","supportsNgModel","$render","writeValue","$viewValue","registerOnChange","$setViewValue","bind","setupInputs","propagateDigest","inputs","_loop_1","i","prop","input","PropertyBinding","propName","templateName","hasOwnProperty","INITIAL_VALUE","currValue","prevValue","updateInput","$observe","observeFn_1","unwatch_1","this_1","$watch","bindAttr","bindonAttr","expr","watchFn","ngOnChanges","inputChangeCount","implementsOnChanges","inputChanges","markForCheck","detectChanges","unwatch_2","setupOutputs","outputs","output","substring","length","subscribeToOutput","isAssignment","getter","setter","assign","emitter","subscribe","next","v","$event","destroyComponentRef","destroy","$destroy","$on","destroyed","ngContentSelectors","ii","j","jj","node","ngContentIndex","findMatchingNgContentIndex","ngContentIndices","selector","matchesSelector","sort","wildcardNgContentIndex","el","_matches","elProto","Element","injectorKey","controllerKey","INJECTOR_KEY","then","callback","resolve","tempInjectorRef","injectorFactory","angular1Providers","NgAdapterInjector","token","notFoundValue","ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR","UpgradeHelper","elementRef","directive","$INJECTOR","$COMPILE","getDirective","directives","compile","link","notSupported","replace","fetchRemoteTemplate","undefined","template","$templateCache_1","url_1","getOrCall","templateUrl","reject","status","response","put","buildController","controllerType","$scope","locals","$element","compileTemplate","onDestroy","querySelectorAll","attachChildrenFn","cloneAttachFn","contentChildNodes","transclude","keys","slotName","optional","slotMap_1","filledSlots_1","nodeName","toLowerCase","slots_1","$template","Object","filter","nodeType","Node","TEXT_NODE","nodeValue","controllerInstance","directiveRequire","getDirectiveRequire","resolveRequire","bindToController","isMap","requiredControllersMap_1","key","compileHtml","childNodes","extractChildNodes","childNode","firstChild","require","value","match","REQUIRE_PREFIX_RE","Array","isArray","req","value_1","ctrlKey","name_1","elem","startOnParent","searchParents","isOptional","twoWayBoundProperties","twoWayBoundLastValues","UpgradeComponent","helper","bindings","initializeBindings","$parentScope","initializeOutputs","controller","bindingDestination","$componentScope","bindOutputs","requiredControllers","resolveAndBindRequiredControllers","pendingChanges","forwardChanges","$onInit","isFunction","$doCheck","callDoCheck","postLink","post","preLink","parentBoundTranscludeFn","attachChildNodes","changes","propertyToOutputMap","looseIdentical","idx","newValue","oldValue","ɵlooseIdentical","outputName","ngOnDestroy","btcIsObject","context","INITIAL_VALUE$1","expressionBoundProperties","json","JSON","stringify","bindingType","concat","currentValue","$onChanges","modules","INIT_MODULE_NAME","UPGRADE_MODULE_NAME","upgradeModule","factory","LAZY_MODULE_REF","needsNgZone","has","originalWhenStable","testabilityDelegate","whenStable","call","ng2Testability","isStable","newWhenStable","wrappedInterval","fn","delay","count","invokeApply","pass","_i","arguments","ngZone","runOutsideAngular","setTimeout","run","apply","args","intervalDelegate","cancel","$rootScope","angular.module","subscription","unsubscribe","windowAngular","e","config","resumeBootstrap","ngZone_1","NgModule","originalResumeBootstrap_1","type","NgZone","UpgradeModule","ctorParameters","cb","REQUIRE_INJECTOR","REQUIRE_NG_MODEL","required","ranAsync","lazyModuleRef","ComponentFactoryResolver","doDowngrade","resolveComponentFactory","info","getComponentName","injectorPromise","ParentInjectorPromise","facade","compileContents","createComponent","registerCleanup","getInjector","$evalAsync","isInAngularZone","downgradeFn","moduleFactoryOrBootstrapFn","platformBrowser","_angular_platformBrowser","extraProviders","bootstrapModuleFactory","LAZY_MODULE_NAME","promise","bootstrapFn","ref","result"],"mappings":";;;;;;;;;;;;;;;;;GAwXA,SAAIA,OACJ,MAAA,IAAYC,MAAA,iCAEZ,IAEIC,YAFA,WAAU,OAAAF,oBAGHG,UAAaH,SAEpBI,SACAC,UAAAL,KACFM,OAAAN,KACEO,QAAAL,YACAM,aAA0B,kBACZR,oBACbA,MAEL,uCAECI,QAAA,OAAAA,sFAoCGK,qBACF,OAAAL,YAOFM,SAAQ,SAAYC,OAAUC;;;;;;;2SC1ZzB,6EAIDC,KAAAC,sCAKSC,UAAeD,wBAIpBD,KAAKG,YAAa,IAAGH,KAAAI,KAAY,IACjCJ,KAAKK,UAAW,IAAML,KAAGI,KAAA,IACzBJ,KAAKM,iBAAa,KAAWN,KAAAI,KAAY,KAE7C,IAAOG,YAAeP,KAACI,KAAAI,OAAA,GAAAC,cAAAT,KAAAI,KAAAM,OAAA,GACvBV,KAAAW,OAAA,KAAAJ,mGAlBC;;;;;;;;+CCNgB,6BAEU,oBAClBK,0BAAiBlB,QAAemB,MAAAC,MAAAC,QAAAC,eAAAC,UAAAC,SAAAC,OAAAC,iBAAAC,cACrCrB,KAAKN,QAASA,QACdM,KAAKa,MAAQA,MACbb,KAAKc,MAAMA,MACXd,KAAKe,QAAAA,QACLf,KAAKgB,eAAeA,eACpBhB,KAAKiB,UAAAA,UACLjB,KAAKkB,SAAAA,SACLlB,KAAKmB,OAAAA,OACLnB,KAAKoB,iBAAiBA,iBACzBpB,KAAAqB,aAAAA,sFAIDrB,KAAAsB,eAA0BR,MAAAS,4FAWpBC,oCAEoBxB,KAAEyB,wBAEMC,IAAG,SAAOC,OAAA,OAAAC,MAAAV,SAAAS,qBACjCjC,QAAA,gBACJmC,QAAA,SAAAC,QACHA,OAAOF,MAAAd,MAAA,SAAyBiB,OAClCP,yBAAAQ,KAAAD,8HAcOE,kBAEL,IAAIC,YAACC,QAAqBC,OAAKC,SAAarC,KAAAsB,iBAExCgB,cAAaC,cAAiBC,SAASC,QAACP,UAAAA,UAAAQ,OAAA1C,KAAAgB,eAAA2B,KAAA,gDAExC3C,KAAAoB,iBAAmBqB,OAAAH,cAAyBL,iBAACW,KAAAA,QAAa,IAC9D5C,KAAI6C,mBAAa7C,KAAA8C,aAAAC,SAAAC,IAAAT,cAAAU,wBACbC,eAAkBlD,KAAA8C,aAAaK,iCAC1BnD,KAAA8C,aAAyBM,SAElC,ICqCcrC,QAAAsC,UDrCdC,YAAkBtD,KAAC8C,aAAcC,SAAWC,IAAAT,cAAAK,YAAA,MAC9CU,yJCoCgBvC,qBAAAsC,mJACbE,CAAAF,aACJtC,QAAAyC,QAAA,WAAAH,UAAAI,WAAA1C,QAAA2C,aACJL,UAAAM,iBAAA5C,QAAA6C,cAAAC,KAAA9C,2HD5BGH,0BAAuBV,UAAA4D,kDAMnB,IAAIlC,MAAM5B,UACc,IAApB+D,kBAAuBA,iBAAA,WAEvBlD,MAAIb,KAAQa,MAEZmD,OAAQhE,KAAGoB,iBAAK4C,WAChBC,QAAU,SAAAC,OAOoBC,eAL1BC,MAAI,IAAAC,gBAAeL,OAAgBE,GAAAI,SAAAN,OAAAE,GAAAK,mBAE/B,cACAC,eAAiBJ,MAAAhE,MAAW,kBAEN+D,WAatBA,eAXYM,uBACHC,+BAEWC,mBAAUD,qCACzBC,YAAAF,gBACHE,UAAAD,WAEA9C,MAASgD,YAAYT,KAAAQ,UAAaD,wCAKpCG,SAAWT,MAAMhE,KAAM0E,aAE9B,IAAAC,UAAAC,OAAA1D,eAAA2D,OAAA,WACc,YACPF,UAAS,KAChBD,YAAAjE,MAAAuD,MAAAhE,cAGAS,MAAA2D,eAAAJ,MAAAc,eACQrE,MAAMuD,MAAAc,UAEdrE,MAAA2D,eAAAJ,MAAAjE,kBACQU,MAAMuD,MAAAjE,aAEdU,MAAA2D,eAAAJ,MAAAe,YACGC,KAAIvE,MAAQuD,MAAEe,YAEVtE,MAAO2D,eAAcJ,MAAM9D,yBAC3BO,MAAOuD,MAAM9D,sBAEV,MAAP8E,KAAO,CAEb,IAAAC,QAAA,SAAAlB,MAAA,OAAA,SAAAO,UAAAC,WACQ,OAAQ/C,MAAAgD,YAAAT,KAAAQ,UAAAD,YADhB,CAEYN,MAAMD,MAChBa,OAAW1D,eAAA2D,OAAAG,KAAAC,WAGXL,OAAAhF,6BAEAiE,QAAAC,oKAMuBhE,YAAM,UAAaoF,iCAChCL,OAAY,WAAM,OAAArD,MAAA2D,kBAAAvF,KAAAqB,aAAA,cAE3BO,MAAA4D,oBAAA,qCAGG5D,MAAC6D,gBACe7D,MAAA,UAAA0D,YAAA,cAEpB1D,MAAAiB,mBAAA6C,eAEA3B,iBACI4B,mBAIJ5B,gHAOI6B,UAAO5F,KAAUsB,eAAO2D,OAAa,WACtC,YACNW,UAAA,iIAUqB1F,UAAC2F,gCAKnBhF,MAAIb,KAASa,MAEbiF,QAAI9F,KAAUoB,iBAAU0E,kHAKpBX,WAAKY,OAAAZ,WAA0Ba,UAAM,EAAAD,OAAaZ,WAAMc,OAAA,GAExD3F,iBAAM,KAAeyF,OAAAzF,iBAAmB0F,UAAA,EAAAD,OAAAzF,iBAAA2F,OAAA,GAAA,KAE3CpF,MAAA2D,eAAAW,aACGnF,KAAKkG,kBAAgBH,OAAOlF,MAASsE,aAAA,GAExCtE,MAAA2D,eAAAlE,mBACGN,KAAKkG,kBAAgBH,OAAOlF,MAASP,mBAAG,GAE3CO,MAAA2D,eAAAuB,OAAApF,SACJX,KAAAkG,kBAAAH,OAAAlF,MAAAkF,OAAApF,mMAoBD,IAAIiB,MAAM5B,UACW,IAAjBmG,eAAyBA,cAAA,OAE5BC,OAAApG,KAAAmB,OAAAiE,MAEGiB,OAAOD,OAAAE,OACX,GAAIH,eAASE,OACT,MAAA,IAAQjH,MAAA,eAAUgG,KAAA,oCAGfpF,KAAAqD,UAAA0C,OAAA5B,UACNoC,+IACIC,WACDC,KAAUN,aAAM,SAAmBO,GAAG,OAAO,OAAO9E,MAAAd,MAAkB4F,IACzE,SAAAA,GAAA,OAAAN,OAAAxE,MAAAd,OAAA6F,OAAAD,uEAcD,IAAE9E,MAAK5B,KAEH4G,oBAAgB5G,KAAAqB,aAAA,WAAA,OAAAO,MAAAkB,aAAA+D,uBAEN,eACD,GAAA,WAAA,WAA4B,OAAYjF,MAACN,eAASwF,iCACvDC,IAAA,WAAsB,WACzBC,YACFA,WAAA,EACLpF,MAAAkB,aAAAC,SAAAC,IAAAT,cAAAY,uQAyBOgB,KAAAQ,UAAkBD,WACzB1E,KAAAwF,iJAIFxF,KAAAqD,UAAAc,MAA0BO,qCAKAxE,UAAQuB,sBAGlC,2BAoDqBwF,mBAAyBtF,eAE7CM,oBAGOiC,EAAI,EAAGgD,GAAMD,mBAAGhB,OAAA/B,EAAAgD,KAAAhD,6BAGpB,IAAIiD,EAAA,EAAAC,GAAAzF,MAAkBsE,OAAMkB,EAAAC,KAAAD,EAAA,KAE3BE,KAAA1F,MAAAwF,GAEEG,eAAiBC,2BAAAF,KAAAJ,oBAC3B,MAAAK,kLAtW8B,YAiXtBC,2BAAe7H,QAAmBuH,4BAEnCO,4CAE0B,EACzBtD,EAAA,EAAAA,EAAA+C,mBAAAhB,OAAA/B,IAAA,KAEGuD,SAAIR,mBAAyB/C,GACzB,sCACHA,EAGTwD,gBAAwBhI,QAAA+H,WACpBD,iBAAsBxF,KAAOkC,UAIpCsD,iBAAAG,oCAEGH,iBAASxF,KAAA4F,kGAWOC,GAAAJ,cACfK,SAAA,CAEJ,IAAAC,QAAAC,QAAA;;;;;;;6BEnRwB,mDAEjBhI,KAAAN,QAAeA,QAClBM,KAAAiI,YAAAC,cAAAC,iGAUoBjI,UAAEkI,cAIfC,UACHrI,KAAA+C,SACHsF,SAAArI,KAAA+C,+DAUkB7C,UAASoI,2BAKzBtI,KAAK+C,SAAOA,SAGZ/C,KAAKN,QAAU,KAAAM,KAAUiI,YAAClF,UAE9B/C,KAAON,QAAsB,0HAvCR;;;;;;;;ICtIzB6I;;;;;;;yCAMAA,gBAAgBxF,kBAKRyF,kBACJ,IAAAD,gBACA,MAAO,IAAAnJ,MAAS,+RA6BhBqJ,4XC7BAC,kBAAiBxI,UAAA8C,aAKf2F,MAAAC,eACF,OAAOA,gBAAkBrG,cAAAsG,uCACzBD;;;;;;;;;;;;;;;6DCKyB,oBAChBE,cAAc/F,SAAKJ,KAAUoG,WAAIC,WACtChJ,KAAK+C,SAAUA,SACf/C,KAAK2C,KAAAA,KACL3C,KAAKiB,UAAY8B,SAASC,IAAIiG,WACjCjJ,KAAAkB,SAAAlB,KAAAiB,UAAA+B,IAAAkG,sNAWDJ,cAAUK,sBAKLlI,UAAA0B,MAED,IAAIyG,WAAYnI,UAAW+B,IAAGL,KAAA,2GAK9B,IAAIqG,UAAUI,WAAO,UAGjBJ,UAAAK,UAAmBL,UAAYM,MACnCC,aAAiB5G,KAAA,WACnBqG,UAAAQ,sIAkBOvI,UAAI+H,UAAUS,oFAEKC,IAApBV,UAAIW,wEAKJ,IAAIC,iBAAwB3I,UAAA+B,sBAE3B6G,MAAAC,UAAAd,UAAAe,aAEGJ,SAAUC,iBAAM5G,IAAA6G,eACnBH,IAAAC,SACD,OAAWA,SAEP,IAAIF,oBACJ,MAAA,IAAArK,MAAa,kFAEE,SAACkJ,QAAiB0B,QAExB/I,UAAA+B,oBACD,MAAO6G,MAAA,KAAA,SAAAI,OAAkCC,UAC5C,MAAAD,OACF3B,QAAAsB,iBAAAO,IAAAN,MAAAK,WAGNF,OAAA,gCAAAH,MAAA,eAAAI,OAAA,KAAAC,SAAA,wGAcTpB,cAAU5I,UAAckK,yBAKdC,eAAcC,QAEtB,IAAAC,QAAAD,OAAAA,OAAAE,SAAAxK,KAAAwK,iMAUMtK,UAAauK,yBAInBd,oIAWFb,cAAU5I,UAAQwK,iMAiBlBhL,QAAAJ,UAAcU,KAAUN,QAAAiL,iBAAmB,6JAenCC,iBAAmB,SAAU9J,MAAA+J,8CAK7B/J,MAAAA,QAAYgG,SAAA,0BAIRgE,oEAIoB,iBAAhBC,WAAuB,yFAOvBC,KAAQD,YAAWlJ,QAAG,SAASoJ,UAE/B,IAAAxD,SAAQsD,WAAiBE,UAE1BC,SAAA,MAAAzD,SAAAjH,OAAA,oDAEH2K,UAAA1D,UAA0BwD,gCAEtBG,cAAYH,UAAaC,6BAGbrJ,QAAS,SAAWwF,eAE/B4D,SAAAE,gBAAA9D,KAAAgE,SAAAC,2JAEGF,cAAcH,WAAO,EACxBM,QAAAN,UAAAM,QAAAN,cACFM,QAAAN,UAAAjJ,KAAAqF,OAGKmE,UAACxJ,KAAcqF,QAIvBoE,OAAOT,KAAKI,eAAevJ,QAAC,SAAUoJ,sCAE9B,MAAK,IAAG7L,MAAQ,+BAAU6L,SAAA,mBAAArJ,MAAAe,QAGrC8I,OAAAT,KAAAO,SAAAG,OAAA,SAAAT,UAAA,OAAAM,QAAAN,YAAApJ,QAAA,SAAAoJ,UAED,IAAAtJ,MAAiB4J,QAAUN,4HAgB9BO,UAAA3J,QAAA,SAAAwF,MACMA,KAAAsE,WAAiBC,KAAAC,WAAAxE,KAAAyE,YAC1BzE,KAAAyE,UAAA,mGAcMC,wBAEAC,iBAAIhM,KAAAiM,0CAEkBjM,KAAKkM,eAAGF,yCAC3BhM,KAAAgJ,UAAAmD,kBAAAC,MAAAJ,kBAAA,CAEP,IAAOK,yBAAoB,oBAC7BZ,OAAAT,KAAAqB,0BAAAxK,QAAA,SAAAyK,uGAUOpM,UAAQqM,2BAMjB,mCAAAvM,KAAckB,SAAUlB,KAAAN,QAAA8M,2BAKhBtM,UAAgBuM,6BAQtB,QADEC,UAFIF,cAGNE,UAAA1M,KAAAN,QAAAiN,2EAIF,OAAAH,0BAKQtM,UAAe+L,+HAMXW,qDAGA,IAAIC,MAAOD,QAAAN,KAEVQ,MAAAD,MAAAC,MAAAC,mBAERF,MAAA7G,UAAA8G,MAAA,GAAA7G,UAEH2G,QAAAN,KAAAQ,MAAA,GAAAR,gBAWFxD,cAAU5I,UAASgM,wBAKVU,QAAUb,wBACXnK,MAAO5B,QACV4M,QAGG,CAAA,GAAII,MAAOC,QAAML,SACjB,OAAOA,QAAKlL,IAAO,SAAUwL,KAAA,OAAatL,MAAIsK,eAAkBgB,OAEnE,GAAA,iBAAAN,QAAA,uBAGGnB,OAAIT,KAAK4B,SAAA/K,QAAA,SAA8ByK,KAAM,OAAAa,QAAAb,KAAqB1K,MAAAsK,eAAAU,QAAAN,oPAiB9Dc,QAAUlF,cAAamF,QAE1BC,KAAAC,cAAAvN,KAAAwK,SAAA,SAAAxK,KAAAwK,SAEJqC,MAAAW,cAAAF,KAAA,cAAAF,SAAAE,KAAA,KAAAF,aACIP,QAAAY,WACD,MAAU,IAAArO,MAAM,4BAAAwN,QAAA,4BAAsE5M,KAAQ2C,KAAQ,MAE5G,OAAAkK,8GAjCW,oBA9TY;;;;;;;GCrB7B,wCAGa,YAEA,6BAET7M,KAAO0N,yBACN1N,KAAA2N,wFAHQ,wCA6GAC,iBAAiBjL,KAAMoG,WAAWhG,UACvC/C,KAAK2C,KAAOA,KACZ3C,KAAK+I,WAAWA,WAChB/I,KAAK+C,SAASA,SACd/C,KAAK6N,OAAQ,IAAG/E,cAAK/F,SAAmBJ,KAAKoG,iDAE7C/I,KAAIN,QAAAM,KAAe6N,OAAQnO,gFAG3BM,KAAK8N,SAAA9N,KAAe+N,mBAAoB/N,KAAGgJ,WAE9C,IAAAgF,aAAAjL,SAAAC,IAAAZ,uEAIDpC,KAAAiO,4IAaQnM,OAAA9B,KAAc6N,OAAEpD,kBAEnBJ,eAAArK,KAAAgJ,UAAAkF,WAEG/B,iBAAgBnM,KAAAgJ,UAAAmD,oBACnB9B,6GAGI,GAAA8B,iIAILnM,KAAImO,mBAAqBhC,iBAAAnM,KAAA+L,mBAAA/L,KAAAoO,qBACrBC,kBAEHC,oBAAAtO,KAAA6N,OAAAU,kCAAAvO,KAAA+L,uBAEG/L,KAAKwO,iBACLxO,KAAKyO,eAAAzO,KAAmBwO,gBAC3BxO,KAAAwO,eAAA,4EAIGxO,KAAI+L,mBAAc2C,UAGrB1O,KAAA+L,oBAAA4C,WAAA3O,KAAA+L,mBAAA6C,UAAA,CAEG,IAAIC,YAAQ,WAAe,OAAAjN,MAAAmK,mBAAA,2FAE3B8C,mFAOAC,SAAS,iBAAAxF,KAAA,KAAAyF,KAAAzF,KAKT0F,SACHA,QAAAhP,KAAAoO,gBAAApO,KAAAwK,SAzLG,gBAyLH8D,oBAzLG,iBA2LJxM,OAAI9B,KAAKoO,gBAAqC,MAACa,wBAA+BC,mBAC1EJ,UACHA,SAAA9O,KAAAoO,gBAAApO,KAAAwK,SA7LG,gBA6LH8D,oBA7LG,+IAwMMpO,UAAAoF,qBAIN6J,SACHnP,KAAAmO,gDACHnO,KAAAwO,eAAAW,wEAeEzB,sBAAsB1N,KAAQ8N,SAAUJ,sBAEpCC,sBAAqB3N,KAAA8N,SAAAH,sBAErByB,oBAAepP,KAAA8N,SAAqBsB,0CAC/BC,QAAAA,SAAe/K,SAAUgL,SAE1BC,SAAI3N,MAAauM,mBAAmB7J,UAEpCkL,SAAI7B,sBAAe2B,SACnB/M,cAAakN,gBAAeF,SAAAC,UAAA,CAE/B,IAAAE,WAAAN,oBAAA9K,UAEP,MAAAoL,oFASWxP,UAAAyP,wLAaGzP,UAAK6N,4BAIb/E,eACHpH,MAAA5B,KAEG4P,YAAoD,iBAAzC5G,UAAemD,qEAE1B,MAAA,IAAQ/M,MAAO,2KAoCvB,MA9BgB,iBAAJyQ,yEAGaA,QAAAvL,4CAKL,IACJ,IAAK,IAID,MACJ,IAAK,IACDwJ,SAASJ,sBAAA1L,KAA0BsC,UACnCwJ,SAASH,sBAAoB3L,KAAA8N,iBAC7BhC,SAAMsB,oBAAA9K,UAAAA,SAAA,SACV,cAEIwJ,SAAQiC,0BAA2B/N,KAAAsC,UACnCwJ,SAAMsB,oBAAU9K,UAAyBA,SAChD,MACF,QAES,IAAA0L,KAAAC,KAAAC,UAAAL,SAClB,MAAA,IAAAzQ,MAAA,uBAAA+Q,YAAA,SAAAH,KAAA,SAAApO,MAAAe,KAAA,mBAIFmL,sEASQlM,MAAI5B,UAEL8N,SAAAJ,sBAAA0C,OAAApQ,KAAA8N,SAAAiC,2BACLlO,QAAA,SAAAyC,gMAeMwJ,SAAMiC,0BAA4BlO,QAAG,SAAiByC,UAE5D,IAAAoL,WAAA9N,MAAAkM,SAAAsB,oBAAA9K,uIAUcpE,UAAKuO,wBAIbU,aACHvN,MAAA5B,KAELyL,OAAOT,KAAAmE,SAAiBtN,QAAA,SAAAyC,UAAA,OAAA1C,MAAAuM,mBAAA7J,UAAA6K,QAAA7K,UAAA+L,eACxB1B,WAAA3O,KAAAmO,mBAAAmC,4FC/NC,iMA2BG,IAAI1O,MAAA5B,UAEO,cAAcuQ,gBAErBC,iBAAYC,oBAAA,QA2FZC,eAzFF7Q,SAAA2Q,qBACG3D,MAAM1E,aAACnI,KAAA+C,UACR4N,QAAQC,iBACRzI,sBACQpF,UAAc,OAAgBA,SAAAA,SAAA8N,aAAA,0EAKtBC,wGAKIC,mBAAmBC,oBAAKC,oBAEhBrP,MAAAmB,uBAEQ,SAAGsF,6BACd6I,KAAAF,oBAAA,eAEGG,eAAepO,SAAWC,IAAAT,cAAkBK,aAC/CuO,eAAAC,WACF/I,WAGA8I,eAAoBF,WAAAI,cAAAxN,KAAAmN,oBAAA3I,cAK3B,OADR2I,oBAA0BC,WAAAI,cACjBL,iCAIDF,6FAKIQ,gBAAa,SAAOC,GAAAC,MAAkBC,MAAAC,qBAClCC,WACQ,EAAIC,GAAIC,UAAM5L,OAAA2L,aACd,GAAKC,UAAYD,iBAEhBE,OAAAC,kBAAA,iIAUVC,WAAgB,WAAApQ,MAAAkQ,OAAAG,IAAA,WAAA,OAAAV,GAAAW,WAAA,EAAAC,WAC1BX,MAAAC,MAAAC,aAAAtB,OAAAuB,UAIf,OADG,gBAAA,OAAAS,iBAAAC,OACHf,8CAQMrQ,iLAWI,WAEP,IAAAqR,WAAArR,UAAA+B,IAAA,4GAGDsP,WAAgBC,IAAAA,WAAe,WAAsBC,aAAAC,uBAKzC5S,SAAY4Q,qBAA2BD,kBAAiBJ,OAAOG,WAE3EmC,cAAc,OAAiB,4ETmKhC,SAAeC,EAAApC,QAAQqC,QAChCrT,QAAAC,UAAAmT,EAAApC,QAAAqC,mDS/JUF,cAAcG,gBAAe,6DAIzBC,SAAA9S,KAAc8R,qBACPe,gBAAa,WACtB,IAAAjR,MAAA5B,KAERmS,KAAAN,UAEUkB,OADZL,cAAwBG,gBAAGG,0BACfD,SAAAA,IAAAA,WAAmB,OAAAL,cAAYG,gBAAwBX,MAAAtQ,MAAAuQ,yBAIvD3P,aACNyQ,KAAMC,cAAAA,SAAQf,OAAAjQ,WAAAuG,uBAGpB0K,cAAAC,eAAA,WAAA,iFAnJC,2TL5EG,IAIItB,OAJJjB,aAAO,EAEHxP,aAAc,SAAAgS,IAAA,OAAAA,oBAIN,yBAEAC,iBAAiBC,8DAGrB,IAAIxS,QAACyS,SAAgB,GAEjBxS,eAAiBwS,SAAA,GAEjBC,UAAA,MACHzS,eAAA,CAEG,IAAA0S,cAAkCzS,UAAA+B,IAAA4N,uDAElC5P,eAAI0S,cAA2B3Q,UAAa4Q,cAAwB,YAGpEC,YAAK,SAAkB7Q,cAInB3B,iBAFH2B,SAAAC,IAAAT,cAAAoR,0BAEwDE,wBAAAC,KAAAzQ,gCAErD,MAAM,IAAGjE,MAAI,mCAAwC2U,iBAAgBD,KAAEzQ,YAG3E,IAAA2Q,gBAAsB,IAACC,sBAAkBvU,SAEzCwU,OAAO,IAAAtT,0BAAelB,QAAAmB,MAAAC,MAAAC,QAAAgC,SAAA9B,UAAAC,SAAAC,OAAAC,iBAAAC,cAEtBY,iBAAuBiS,OAAOC,kBAC9BD,OAAIE,gBAAUnS,oGAGVoS,kCACH/L,QAAA4L,OAAAI,eACHb,UAGM3S,MAACyT,WAAQ,2BAIJ1D,YAAA,SAAA9N,UACR+O,SACDA,OAAa/O,SAAAC,IAAYT,cAAS2Q,QACpC7R,aAAA,SAAAgS,IAAA,OAAA,WACE,OAAW9Q,cAAiB2Q,OAAAsB,kBAAAnB,KAAAvB,OAAAG,IAAAoB,oBAG3B,WAAA,OAAAO,YAAA7Q,eAPQ6Q,uBASZ5S,qBACDA,eAAgBoH,KAAAqM,aAG1BA,YAAAzT,gBAEFyS,UAAiB;;;;;;;;SM7EpB9K;;;;;;;;SCmDO+L,0DAEWC,oBAAAA,2DAGXD,oDAEU,OAACE,yBAAqBD,gBAAAE,gBAAAC,uBAAAJ,6CAKhCK,qBACFpE,QAAAxI,aAAA,eACGpF,SACD,MAAS,IAAA3D,MAAA,qFAEL2D,mBAEI6N,oCAEA3P,8BACeA,oCAGb,EACJ+T,QAAAC,YAAAxM,mBAAAL,KAAA,SAAA8M,KAGP,OAFYnS,SAAOoS,OAAApS,SAAA,IAAA2F,kBAAAwM,IAAAnS,WACjBC,IAAAiG,WACFlG","file":"/Users/ced-pro/Code/angular/angular/dist/packages-dist/upgrade/bundles/upgrade-static.umd.min.js.map","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @typedef {?} */\nvar Ng1Token;\nexport { Ng1Token };\n/** @typedef {?} */\nvar Ng1Expression;\nexport { Ng1Expression };\n/**\n * @record\n */\nexport function IAnnotatedFunction() { }\n/** @type {?|undefined} */\nIAnnotatedFunction.prototype.$inject;\n/** @typedef {?} */\nvar IInjectable;\nexport { IInjectable };\n/** @typedef {?} */\nvar SingleOrListOrMap;\nexport { SingleOrListOrMap };\n/**\n * @record\n */\nexport function IModule() { }\n/** @type {?} */\nIModule.prototype.name;\n/** @type {?} */\nIModule.prototype.requires;\n/** @type {?} */\nIModule.prototype.config;\n/** @type {?} */\nIModule.prototype.directive;\n/** @type {?} */\nIModule.prototype.component;\n/** @type {?} */\nIModule.prototype.controller;\n/** @type {?} */\nIModule.prototype.factory;\n/** @type {?} */\nIModule.prototype.value;\n/** @type {?} */\nIModule.prototype.constant;\n/** @type {?} */\nIModule.prototype.run;\n/**\n * @record\n */\nexport function ICompileService() { }\n/**\n * @record\n */\nexport function ILinkFn() { }\n/* TODO: handle strange member:\n(scope: IScope, cloneAttachFn?: ICloneAttachFunction, options?: ILinkFnOptions): IAugmentedJQuery;\n*/\n/** @type {?|undefined} */\nILinkFn.prototype.$$slots;\n/**\n * @record\n */\nexport function ILinkFnOptions() { }\n/** @type {?|undefined} */\nILinkFnOptions.prototype.parentBoundTranscludeFn;\n/** @type {?|undefined} */\nILinkFnOptions.prototype.transcludeControllers;\n/** @type {?|undefined} */\nILinkFnOptions.prototype.futureParentElement;\n/**\n * @record\n */\nexport function IRootScopeService() { }\n/** @type {?} */\nIRootScopeService.prototype.$new;\n/** @type {?} */\nIRootScopeService.prototype.$id;\n/** @type {?} */\nIRootScopeService.prototype.$parent;\n/** @type {?} */\nIRootScopeService.prototype.$root;\n/** @type {?} */\nIRootScopeService.prototype.$watch;\n/** @type {?} */\nIRootScopeService.prototype.$on;\n/** @type {?} */\nIRootScopeService.prototype.$destroy;\n/** @type {?} */\nIRootScopeService.prototype.$apply;\n/** @type {?} */\nIRootScopeService.prototype.$digest;\n/** @type {?} */\nIRootScopeService.prototype.$evalAsync;\n/** @type {?} */\nIRootScopeService.prototype.$on;\n/** @type {?} */\nIRootScopeService.prototype.$$childTail;\n/** @type {?} */\nIRootScopeService.prototype.$$childHead;\n/** @type {?} */\nIRootScopeService.prototype.$$nextSibling;\n/**\n * @record\n */\nexport function IScope() { }\n/**\n * @record\n */\nexport function IAngularBootstrapConfig() { }\n/** @type {?|undefined} */\nIAngularBootstrapConfig.prototype.strictDi;\n/**\n * @record\n */\nexport function IDirective() { }\n/** @type {?|undefined} */\nIDirective.prototype.compile;\n/** @type {?|undefined} */\nIDirective.prototype.controller;\n/** @type {?|undefined} */\nIDirective.prototype.controllerAs;\n/** @type {?|undefined} */\nIDirective.prototype.bindToController;\n/** @type {?|undefined} */\nIDirective.prototype.link;\n/** @type {?|undefined} */\nIDirective.prototype.name;\n/** @type {?|undefined} */\nIDirective.prototype.priority;\n/** @type {?|undefined} */\nIDirective.prototype.replace;\n/** @type {?|undefined} */\nIDirective.prototype.require;\n/** @type {?|undefined} */\nIDirective.prototype.restrict;\n/** @type {?|undefined} */\nIDirective.prototype.scope;\n/** @type {?|undefined} */\nIDirective.prototype.template;\n/** @type {?|undefined} */\nIDirective.prototype.templateUrl;\n/** @type {?|undefined} */\nIDirective.prototype.templateNamespace;\n/** @type {?|undefined} */\nIDirective.prototype.terminal;\n/** @type {?|undefined} */\nIDirective.prototype.transclude;\n/** @typedef {?} */\nvar DirectiveRequireProperty;\nexport { DirectiveRequireProperty };\n/** @typedef {?} */\nvar DirectiveTranscludeProperty;\nexport { DirectiveTranscludeProperty };\n/**\n * @record\n */\nexport function IDirectiveCompileFn() { }\n/**\n * @record\n */\nexport function IDirectivePrePost() { }\n/** @type {?|undefined} */\nIDirectivePrePost.prototype.pre;\n/** @type {?|undefined} */\nIDirectivePrePost.prototype.post;\n/**\n * @record\n */\nexport function IDirectiveLinkFn() { }\n/**\n * @record\n */\nexport function IComponent() { }\n/** @type {?|undefined} */\nIComponent.prototype.bindings;\n/** @type {?|undefined} */\nIComponent.prototype.controller;\n/** @type {?|undefined} */\nIComponent.prototype.controllerAs;\n/** @type {?|undefined} */\nIComponent.prototype.require;\n/** @type {?|undefined} */\nIComponent.prototype.template;\n/** @type {?|undefined} */\nIComponent.prototype.templateUrl;\n/** @type {?|undefined} */\nIComponent.prototype.transclude;\n/**\n * @record\n */\nexport function IAttributes() { }\n/** @type {?} */\nIAttributes.prototype.$observe;\n/**\n * @record\n */\nexport function ITranscludeFunction() { }\n/**\n * @record\n */\nexport function ICloneAttachFunction() { }\n/** @typedef {?} */\nvar IAugmentedJQuery;\nexport { IAugmentedJQuery };\n/**\n * @record\n */\nexport function IProvider() { }\n/** @type {?} */\nIProvider.prototype.$get;\n/**\n * @record\n */\nexport function IProvideService() { }\n/** @type {?} */\nIProvideService.prototype.provider;\n/** @type {?} */\nIProvideService.prototype.factory;\n/** @type {?} */\nIProvideService.prototype.service;\n/** @type {?} */\nIProvideService.prototype.value;\n/** @type {?} */\nIProvideService.prototype.constant;\n/** @type {?} */\nIProvideService.prototype.decorator;\n/**\n * @record\n */\nexport function IParseService() { }\n/**\n * @record\n */\nexport function ICompiledExpression() { }\n/* TODO: handle strange member:\n(context: any, locals: any): any;\n*/\n/** @type {?|undefined} */\nICompiledExpression.prototype.assign;\n/**\n * @record\n */\nexport function IHttpBackendService() { }\n/**\n * @record\n */\nexport function ICacheObject() { }\n/** @type {?} */\nICacheObject.prototype.put;\n/** @type {?} */\nICacheObject.prototype.get;\n/**\n * @record\n */\nexport function ITemplateCacheService() { }\n/**\n * @record\n */\nexport function ITemplateRequestService() { }\n/* TODO: handle strange member:\n(template: string|any __ TrustedResourceUrl __, ignoreRequestError?: boolean): Promise<string>;\n*/\n/** @type {?} */\nITemplateRequestService.prototype.totalPendingRequests;\n/** @typedef {?} */\nvar IController;\nexport { IController };\n/**\n * @record\n */\nexport function IControllerService() { }\n/**\n * @record\n */\nexport function IInjectorService() { }\n/** @type {?} */\nIInjectorService.prototype.get;\n/** @type {?} */\nIInjectorService.prototype.has;\n/**\n * @record\n */\nexport function IIntervalService() { }\n/* TODO: handle strange member:\n(func: Function, delay: number, count?: number, invokeApply?: boolean,\n   ...args: any[]): Promise<any>;\n*/\n/** @type {?} */\nIIntervalService.prototype.cancel;\n/**\n * @record\n */\nexport function ITestabilityService() { }\n/** @type {?} */\nITestabilityService.prototype.findBindings;\n/** @type {?} */\nITestabilityService.prototype.findModels;\n/** @type {?} */\nITestabilityService.prototype.getLocation;\n/** @type {?} */\nITestabilityService.prototype.setLocation;\n/** @type {?} */\nITestabilityService.prototype.whenStable;\n/**\n * @record\n */\nexport function INgModelController() { }\n/** @type {?} */\nINgModelController.prototype.$render;\n/** @type {?} */\nINgModelController.prototype.$isEmpty;\n/** @type {?} */\nINgModelController.prototype.$setValidity;\n/** @type {?} */\nINgModelController.prototype.$setPristine;\n/** @type {?} */\nINgModelController.prototype.$setDirty;\n/** @type {?} */\nINgModelController.prototype.$setUntouched;\n/** @type {?} */\nINgModelController.prototype.$setTouched;\n/** @type {?} */\nINgModelController.prototype.$rollbackViewValue;\n/** @type {?} */\nINgModelController.prototype.$validate;\n/** @type {?} */\nINgModelController.prototype.$commitViewValue;\n/** @type {?} */\nINgModelController.prototype.$setViewValue;\n/** @type {?} */\nINgModelController.prototype.$viewValue;\n/** @type {?} */\nINgModelController.prototype.$modelValue;\n/** @type {?} */\nINgModelController.prototype.$parsers;\n/** @type {?} */\nINgModelController.prototype.$formatters;\n/** @type {?} */\nINgModelController.prototype.$validators;\n/** @type {?} */\nINgModelController.prototype.$asyncValidators;\n/** @type {?} */\nINgModelController.prototype.$viewChangeListeners;\n/** @type {?} */\nINgModelController.prototype.$error;\n/** @type {?} */\nINgModelController.prototype.$pending;\n/** @type {?} */\nINgModelController.prototype.$untouched;\n/** @type {?} */\nINgModelController.prototype.$touched;\n/** @type {?} */\nINgModelController.prototype.$pristine;\n/** @type {?} */\nINgModelController.prototype.$dirty;\n/** @type {?} */\nINgModelController.prototype.$valid;\n/** @type {?} */\nINgModelController.prototype.$invalid;\n/** @type {?} */\nINgModelController.prototype.$name;\n/**\n * @return {?}\n */\nfunction noNg() {\n    throw new Error('AngularJS v1.x is not loaded!');\n}\nvar ɵ0 = function () { return noNg(); };\n/** @type {?} */\nvar noNgElement = /** @type {?} */ ((ɵ0));\nnoNgElement.cleanData = noNg;\n/** @type {?} */\nvar angular = {\n    bootstrap: noNg,\n    module: noNg,\n    element: noNgElement,\n    version: /** @type {?} */ (undefined),\n    resumeBootstrap: noNg,\n    getTestability: noNg\n};\ntry {\n    if (window.hasOwnProperty('angular')) {\n        angular = (/** @type {?} */ (window)).angular;\n    }\n}\ncatch (e) {\n    // ignore in CJS mode.\n}\n/**\n * @deprecated Use `setAngularJSGlobal` instead.\n * @param {?} ng\n * @return {?}\n */\nexport function setAngularLib(ng) {\n    setAngularJSGlobal(ng);\n}\n/**\n * @deprecated Use `getAngularJSGlobal` instead.\n * @return {?}\n */\nexport function getAngularLib() {\n    return getAngularJSGlobal();\n}\n/**\n * Resets the AngularJS global.\n *\n * Used when AngularJS is loaded lazily, and not available on `window`.\n * @param {?} ng\n * @return {?}\n */\nexport function setAngularJSGlobal(ng) {\n    angular = ng;\n    version = ng && ng.version;\n}\n/**\n * Returns the current AngularJS global.\n * @return {?}\n */\nexport function getAngularJSGlobal() {\n    return angular;\n}\n/** @type {?} */\nexport var bootstrap = function (e, modules, config) {\n    return angular.bootstrap(e, modules, config);\n};\n/** @type {?} */\nexport var module = function (prefix, dependencies) {\n    return angular.module(prefix, dependencies);\n};\n/** @type {?} */\nexport var element = /** @type {?} */ ((function (e) { return angular.element(e); }));\nelement.cleanData = function (nodes) { return angular.element.cleanData(nodes); };\n/** @type {?} */\nexport var resumeBootstrap = function () { return angular.resumeBootstrap(); };\n/** @type {?} */\nexport var getTestability = function (e) { return angular.getTestability(e); };\n/** @type {?} */\nexport var version = angular.version;\nexport { ɵ0 };\n//# sourceMappingURL=angular1.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A `PropertyBinding` represents a mapping between a property name\n * and an attribute name. It is parsed from a string of the form\n * `\"prop: attr\"`; or simply `\"propAndAttr\" where the property\n * and attribute have the same identifier.\n */\nvar /**\n * A `PropertyBinding` represents a mapping between a property name\n * and an attribute name. It is parsed from a string of the form\n * `\"prop: attr\"`; or simply `\"propAndAttr\" where the property\n * and attribute have the same identifier.\n */\nPropertyBinding = /** @class */ (function () {\n    function PropertyBinding(prop, attr) {\n        this.prop = prop;\n        this.attr = attr;\n        this.parseBinding();\n    }\n    /**\n     * @return {?}\n     */\n    PropertyBinding.prototype.parseBinding = /**\n     * @return {?}\n     */\n    function () {\n        this.bracketAttr = \"[\" + this.attr + \"]\";\n        this.parenAttr = \"(\" + this.attr + \")\";\n        this.bracketParenAttr = \"[(\" + this.attr + \")]\";\n        /** @type {?} */\n        var capitalAttr = this.attr.charAt(0).toUpperCase() + this.attr.substr(1);\n        this.onAttr = \"on\" + capitalAttr;\n        this.bindAttr = \"bind\" + capitalAttr;\n        this.bindonAttr = \"bindon\" + capitalAttr;\n    };\n    return PropertyBinding;\n}());\n/**\n * A `PropertyBinding` represents a mapping between a property name\n * and an attribute name. It is parsed from a string of the form\n * `\"prop: attr\"`; or simply `\"propAndAttr\" where the property\n * and attribute have the same identifier.\n */\nexport { PropertyBinding };\nif (false) {\n    /** @type {?} */\n    PropertyBinding.prototype.bracketAttr;\n    /** @type {?} */\n    PropertyBinding.prototype.bracketParenAttr;\n    /** @type {?} */\n    PropertyBinding.prototype.parenAttr;\n    /** @type {?} */\n    PropertyBinding.prototype.onAttr;\n    /** @type {?} */\n    PropertyBinding.prototype.bindAttr;\n    /** @type {?} */\n    PropertyBinding.prototype.bindonAttr;\n    /** @type {?} */\n    PropertyBinding.prototype.prop;\n    /** @type {?} */\n    PropertyBinding.prototype.attr;\n}\n//# sourceMappingURL=component_info.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ApplicationRef, ChangeDetectorRef, Injector, SimpleChange, Testability, TestabilityRegistry } from '@angular/core';\nimport { PropertyBinding } from './component_info';\nimport { $SCOPE } from './constants';\nimport { getComponentName, hookupNgModel, strictEquals } from './util';\n/** @type {?} */\nvar INITIAL_VALUE = {\n    __UNINITIALIZED__: true\n};\nvar DowngradeComponentAdapter = /** @class */ (function () {\n    function DowngradeComponentAdapter(element, attrs, scope, ngModel, parentInjector, $injector, $compile, $parse, componentFactory, wrapCallback) {\n        this.element = element;\n        this.attrs = attrs;\n        this.scope = scope;\n        this.ngModel = ngModel;\n        this.parentInjector = parentInjector;\n        this.$injector = $injector;\n        this.$compile = $compile;\n        this.$parse = $parse;\n        this.componentFactory = componentFactory;\n        this.wrapCallback = wrapCallback;\n        this.implementsOnChanges = false;\n        this.inputChangeCount = 0;\n        this.inputChanges = {};\n        this.componentScope = scope.$new();\n    }\n    /**\n     * @return {?}\n     */\n    DowngradeComponentAdapter.prototype.compileContents = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        /** @type {?} */\n        var compiledProjectableNodes = [];\n        /** @type {?} */\n        var projectableNodes = this.groupProjectableNodes();\n        /** @type {?} */\n        var linkFns = projectableNodes.map(function (nodes) { return _this.$compile(nodes); }); /** @type {?} */\n        ((this.element.empty))();\n        linkFns.forEach(function (linkFn) {\n            linkFn(_this.scope, function (clone) {\n                compiledProjectableNodes.push(clone); /** @type {?} */\n                ((_this.element.append))(clone);\n            });\n        });\n        return compiledProjectableNodes;\n    };\n    /**\n     * @param {?} projectableNodes\n     * @return {?}\n     */\n    DowngradeComponentAdapter.prototype.createComponent = /**\n     * @param {?} projectableNodes\n     * @return {?}\n     */\n    function (projectableNodes) {\n        /** @type {?} */\n        var providers = [{ provide: $SCOPE, useValue: this.componentScope }];\n        /** @type {?} */\n        var childInjector = Injector.create({ providers: providers, parent: this.parentInjector, name: 'DowngradeComponentAdapter' });\n        this.componentRef =\n            this.componentFactory.create(childInjector, projectableNodes, this.element[0]);\n        this.viewChangeDetector = this.componentRef.injector.get(ChangeDetectorRef);\n        this.changeDetector = this.componentRef.changeDetectorRef;\n        this.component = this.componentRef.instance;\n        /** @type {?} */\n        var testability = this.componentRef.injector.get(Testability, null);\n        if (testability) {\n            this.componentRef.injector.get(TestabilityRegistry)\n                .registerApplication(this.componentRef.location.nativeElement, testability);\n        }\n        hookupNgModel(this.ngModel, this.component);\n    };\n    /**\n     * @param {?} needsNgZone\n     * @param {?=} propagateDigest\n     * @return {?}\n     */\n    DowngradeComponentAdapter.prototype.setupInputs = /**\n     * @param {?} needsNgZone\n     * @param {?=} propagateDigest\n     * @return {?}\n     */\n    function (needsNgZone, propagateDigest) {\n        var _this = this;\n        if (propagateDigest === void 0) { propagateDigest = true; }\n        /** @type {?} */\n        var attrs = this.attrs;\n        /** @type {?} */\n        var inputs = this.componentFactory.inputs || [];\n        var _loop_1 = function (i) {\n            /** @type {?} */\n            var input = new PropertyBinding(inputs[i].propName, inputs[i].templateName);\n            /** @type {?} */\n            var expr = null;\n            if (attrs.hasOwnProperty(input.attr)) {\n                /** @type {?} */\n                var observeFn_1 = (function (prop) {\n                    /** @type {?} */\n                    var prevValue = INITIAL_VALUE;\n                    return function (currValue) {\n                        // Initially, both `$observe()` and `$watch()` will call this function.\n                        if (!strictEquals(prevValue, currValue)) {\n                            if (prevValue === INITIAL_VALUE) {\n                                prevValue = currValue;\n                            }\n                            _this.updateInput(prop, prevValue, currValue);\n                            prevValue = currValue;\n                        }\n                    };\n                })(input.prop);\n                attrs.$observe(input.attr, observeFn_1);\n                /** @type {?} */\n                var unwatch_1 = this_1.componentScope.$watch(function () {\n                    /** @type {?} */ ((unwatch_1))();\n                    unwatch_1 = null;\n                    observeFn_1(attrs[input.attr]);\n                });\n            }\n            else if (attrs.hasOwnProperty(input.bindAttr)) {\n                expr = attrs[input.bindAttr];\n            }\n            else if (attrs.hasOwnProperty(input.bracketAttr)) {\n                expr = attrs[input.bracketAttr];\n            }\n            else if (attrs.hasOwnProperty(input.bindonAttr)) {\n                expr = attrs[input.bindonAttr];\n            }\n            else if (attrs.hasOwnProperty(input.bracketParenAttr)) {\n                expr = attrs[input.bracketParenAttr];\n            }\n            if (expr != null) {\n                /** @type {?} */\n                var watchFn = (function (prop) { return function (currValue, prevValue) {\n                    return _this.updateInput(prop, prevValue, currValue);\n                }; })(input.prop);\n                this_1.componentScope.$watch(expr, watchFn);\n            }\n        };\n        var this_1 = this;\n        for (var i = 0; i < inputs.length; i++) {\n            _loop_1(i);\n        }\n        /** @type {?} */\n        var detectChanges = function () { return _this.changeDetector.detectChanges(); };\n        /** @type {?} */\n        var prototype = this.componentFactory.componentType.prototype;\n        this.implementsOnChanges = !!(prototype && (/** @type {?} */ (prototype)).ngOnChanges);\n        this.componentScope.$watch(function () { return _this.inputChangeCount; }, this.wrapCallback(function () {\n            // Invoke `ngOnChanges()`\n            if (_this.implementsOnChanges) {\n                /** @type {?} */\n                var inputChanges = _this.inputChanges;\n                _this.inputChanges = {};\n                (/** @type {?} */ (_this.component)).ngOnChanges(/** @type {?} */ ((inputChanges)));\n            }\n            _this.viewChangeDetector.markForCheck();\n            // If opted out of propagating digests, invoke change detection when inputs change.\n            if (!propagateDigest) {\n                detectChanges();\n            }\n        }));\n        // If not opted out of propagating digests, invoke change detection on every digest\n        if (propagateDigest) {\n            this.componentScope.$watch(this.wrapCallback(detectChanges));\n        }\n        // If necessary, attach the view so that it will be dirty-checked.\n        // (Allow time for the initial input values to be set and `ngOnChanges()` to be called.)\n        if (needsNgZone || !propagateDigest) {\n            /** @type {?} */\n            var unwatch_2 = this.componentScope.$watch(function () {\n                /** @type {?} */ ((unwatch_2))();\n                unwatch_2 = null;\n                /** @type {?} */\n                var appRef = _this.parentInjector.get(ApplicationRef);\n                appRef.attachView(_this.componentRef.hostView);\n            });\n        }\n    };\n    /**\n     * @return {?}\n     */\n    DowngradeComponentAdapter.prototype.setupOutputs = /**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var attrs = this.attrs;\n        /** @type {?} */\n        var outputs = this.componentFactory.outputs || [];\n        for (var j = 0; j < outputs.length; j++) {\n            /** @type {?} */\n            var output = new PropertyBinding(outputs[j].propName, outputs[j].templateName);\n            /** @type {?} */\n            var bindonAttr = output.bindonAttr.substring(0, output.bindonAttr.length - 6);\n            /** @type {?} */\n            var bracketParenAttr = \"[(\" + output.bracketParenAttr.substring(2, output.bracketParenAttr.length - 8) + \")]\";\n            // order below is important - first update bindings then evaluate expressions\n            if (attrs.hasOwnProperty(bindonAttr)) {\n                this.subscribeToOutput(output, attrs[bindonAttr], true);\n            }\n            if (attrs.hasOwnProperty(bracketParenAttr)) {\n                this.subscribeToOutput(output, attrs[bracketParenAttr], true);\n            }\n            if (attrs.hasOwnProperty(output.onAttr)) {\n                this.subscribeToOutput(output, attrs[output.onAttr]);\n            }\n            if (attrs.hasOwnProperty(output.parenAttr)) {\n                this.subscribeToOutput(output, attrs[output.parenAttr]);\n            }\n        }\n    };\n    /**\n     * @param {?} output\n     * @param {?} expr\n     * @param {?=} isAssignment\n     * @return {?}\n     */\n    DowngradeComponentAdapter.prototype.subscribeToOutput = /**\n     * @param {?} output\n     * @param {?} expr\n     * @param {?=} isAssignment\n     * @return {?}\n     */\n    function (output, expr, isAssignment) {\n        var _this = this;\n        if (isAssignment === void 0) { isAssignment = false; }\n        /** @type {?} */\n        var getter = this.$parse(expr);\n        /** @type {?} */\n        var setter = getter.assign;\n        if (isAssignment && !setter) {\n            throw new Error(\"Expression '\" + expr + \"' is not assignable!\");\n        }\n        /** @type {?} */\n        var emitter = /** @type {?} */ (this.component[output.prop]);\n        if (emitter) {\n            emitter.subscribe({\n                next: isAssignment ? function (v) { return ((setter))(_this.scope, v); } :\n                    function (v) { return getter(_this.scope, { '$event': v }); }\n            });\n        }\n        else {\n            throw new Error(\"Missing emitter '\" + output.prop + \"' on component '\" + getComponentName(this.componentFactory.componentType) + \"'!\");\n        }\n    };\n    /**\n     * @return {?}\n     */\n    DowngradeComponentAdapter.prototype.registerCleanup = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        /** @type {?} */\n        var destroyComponentRef = this.wrapCallback(function () { return _this.componentRef.destroy(); });\n        /** @type {?} */\n        var destroyed = false; /** @type {?} */\n        ((this.element.on))('$destroy', function () { return _this.componentScope.$destroy(); });\n        this.componentScope.$on('$destroy', function () {\n            if (!destroyed) {\n                destroyed = true;\n                _this.componentRef.injector.get(TestabilityRegistry)\n                    .unregisterApplication(_this.componentRef.location.nativeElement);\n                destroyComponentRef();\n            }\n        });\n    };\n    /**\n     * @return {?}\n     */\n    DowngradeComponentAdapter.prototype.getInjector = /**\n     * @return {?}\n     */\n    function () { return this.componentRef.injector; };\n    /**\n     * @param {?} prop\n     * @param {?} prevValue\n     * @param {?} currValue\n     * @return {?}\n     */\n    DowngradeComponentAdapter.prototype.updateInput = /**\n     * @param {?} prop\n     * @param {?} prevValue\n     * @param {?} currValue\n     * @return {?}\n     */\n    function (prop, prevValue, currValue) {\n        if (this.implementsOnChanges) {\n            this.inputChanges[prop] = new SimpleChange(prevValue, currValue, prevValue === currValue);\n        }\n        this.inputChangeCount++;\n        this.component[prop] = currValue;\n    };\n    /**\n     * @return {?}\n     */\n    DowngradeComponentAdapter.prototype.groupProjectableNodes = /**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var ngContentSelectors = this.componentFactory.ngContentSelectors;\n        return groupNodesBySelector(ngContentSelectors, /** @type {?} */ ((this.element.contents))());\n    };\n    return DowngradeComponentAdapter;\n}());\nexport { DowngradeComponentAdapter };\nif (false) {\n    /** @type {?} */\n    DowngradeComponentAdapter.prototype.implementsOnChanges;\n    /** @type {?} */\n    DowngradeComponentAdapter.prototype.inputChangeCount;\n    /** @type {?} */\n    DowngradeComponentAdapter.prototype.inputChanges;\n    /** @type {?} */\n    DowngradeComponentAdapter.prototype.componentScope;\n    /** @type {?} */\n    DowngradeComponentAdapter.prototype.componentRef;\n    /** @type {?} */\n    DowngradeComponentAdapter.prototype.component;\n    /** @type {?} */\n    DowngradeComponentAdapter.prototype.changeDetector;\n    /** @type {?} */\n    DowngradeComponentAdapter.prototype.viewChangeDetector;\n    /** @type {?} */\n    DowngradeComponentAdapter.prototype.element;\n    /** @type {?} */\n    DowngradeComponentAdapter.prototype.attrs;\n    /** @type {?} */\n    DowngradeComponentAdapter.prototype.scope;\n    /** @type {?} */\n    DowngradeComponentAdapter.prototype.ngModel;\n    /** @type {?} */\n    DowngradeComponentAdapter.prototype.parentInjector;\n    /** @type {?} */\n    DowngradeComponentAdapter.prototype.$injector;\n    /** @type {?} */\n    DowngradeComponentAdapter.prototype.$compile;\n    /** @type {?} */\n    DowngradeComponentAdapter.prototype.$parse;\n    /** @type {?} */\n    DowngradeComponentAdapter.prototype.componentFactory;\n    /** @type {?} */\n    DowngradeComponentAdapter.prototype.wrapCallback;\n}\n/**\n * Group a set of DOM nodes into `ngContent` groups, based on the given content selectors.\n * @param {?} ngContentSelectors\n * @param {?} nodes\n * @return {?}\n */\nexport function groupNodesBySelector(ngContentSelectors, nodes) {\n    /** @type {?} */\n    var projectableNodes = [];\n    /** @type {?} */\n    var wildcardNgContentIndex;\n    for (var i = 0, ii = ngContentSelectors.length; i < ii; ++i) {\n        projectableNodes[i] = [];\n    }\n    for (var j = 0, jj = nodes.length; j < jj; ++j) {\n        /** @type {?} */\n        var node = nodes[j];\n        /** @type {?} */\n        var ngContentIndex = findMatchingNgContentIndex(node, ngContentSelectors);\n        if (ngContentIndex != null) {\n            projectableNodes[ngContentIndex].push(node);\n        }\n    }\n    return projectableNodes;\n}\n/**\n * @param {?} element\n * @param {?} ngContentSelectors\n * @return {?}\n */\nfunction findMatchingNgContentIndex(element, ngContentSelectors) {\n    /** @type {?} */\n    var ngContentIndices = [];\n    /** @type {?} */\n    var wildcardNgContentIndex = -1;\n    for (var i = 0; i < ngContentSelectors.length; i++) {\n        /** @type {?} */\n        var selector = ngContentSelectors[i];\n        if (selector === '*') {\n            wildcardNgContentIndex = i;\n        }\n        else {\n            if (matchesSelector(element, selector)) {\n                ngContentIndices.push(i);\n            }\n        }\n    }\n    ngContentIndices.sort();\n    if (wildcardNgContentIndex !== -1) {\n        ngContentIndices.push(wildcardNgContentIndex);\n    }\n    return ngContentIndices.length ? ngContentIndices[0] : null;\n}\n/** @type {?} */\nvar _matches;\n/**\n * @param {?} el\n * @param {?} selector\n * @return {?}\n */\nfunction matchesSelector(el, selector) {\n    if (!_matches) {\n        /** @type {?} */\n        var elProto = /** @type {?} */ (Element.prototype);\n        _matches = elProto.matches || elProto.matchesSelector || elProto.mozMatchesSelector ||\n            elProto.msMatchesSelector || elProto.oMatchesSelector || elProto.webkitMatchesSelector;\n    }\n    return el.nodeType === Node.ELEMENT_NODE ? _matches.call(el, selector) : false;\n}\n//# sourceMappingURL=downgrade_component_adapter.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @type {?} */\nvar DIRECTIVE_PREFIX_REGEXP = /^(?:x|data)[:\\-_]/i;\n/** @type {?} */\nvar DIRECTIVE_SPECIAL_CHARS_REGEXP = /[:\\-_]+(.)/g;\n/**\n * @param {?} e\n * @return {?}\n */\nexport function onError(e) {\n    // TODO: (misko): We seem to not have a stack trace here!\n    if (console.error) {\n        console.error(e, e.stack);\n    }\n    else {\n        // tslint:disable-next-line:no-console\n        console.log(e, e.stack);\n    }\n    throw e;\n}\n/**\n * @param {?} name\n * @return {?}\n */\nexport function controllerKey(name) {\n    return '$' + name + 'Controller';\n}\n/**\n * @param {?} name\n * @return {?}\n */\nexport function directiveNormalize(name) {\n    return name.replace(DIRECTIVE_PREFIX_REGEXP, '')\n        .replace(DIRECTIVE_SPECIAL_CHARS_REGEXP, function (_, letter) { return letter.toUpperCase(); });\n}\n/**\n * @param {?} component\n * @return {?}\n */\nexport function getComponentName(component) {\n    // Return the name of the component or the first line of its stringified version.\n    return (/** @type {?} */ (component)).overriddenName || component.name || component.toString().split('\\n')[0];\n}\n/**\n * @param {?} value\n * @return {?}\n */\nexport function isFunction(value) {\n    return typeof value === 'function';\n}\n/**\n * @template R\n */\nvar /**\n * @template R\n */\nDeferred = /** @class */ (function () {\n    function Deferred() {\n        var _this = this;\n        this.promise = new Promise(function (res, rej) {\n            _this.resolve = res;\n            _this.reject = rej;\n        });\n    }\n    return Deferred;\n}());\n/**\n * @template R\n */\nexport { Deferred };\nif (false) {\n    /** @type {?} */\n    Deferred.prototype.promise;\n    /** @type {?} */\n    Deferred.prototype.resolve;\n    /** @type {?} */\n    Deferred.prototype.reject;\n}\n/**\n * @record\n */\nexport function LazyModuleRef() { }\n/** @type {?} */\nLazyModuleRef.prototype.needsNgZone;\n/** @type {?|undefined} */\nLazyModuleRef.prototype.injector;\n/** @type {?|undefined} */\nLazyModuleRef.prototype.promise;\n/**\n * @param {?} component\n * @return {?} Whether the passed-in component implements the subset of the\n *     `ControlValueAccessor` interface needed for AngularJS `ng-model`\n *     compatibility.\n */\nfunction supportsNgModel(component) {\n    return typeof component.writeValue === 'function' &&\n        typeof component.registerOnChange === 'function';\n}\n/**\n * Glue the AngularJS `NgModelController` (if it exists) to the component\n * (if it implements the needed subset of the `ControlValueAccessor` interface).\n * @param {?} ngModel\n * @param {?} component\n * @return {?}\n */\nexport function hookupNgModel(ngModel, component) {\n    if (ngModel && supportsNgModel(component)) {\n        ngModel.$render = function () { component.writeValue(ngModel.$viewValue); };\n        component.registerOnChange(ngModel.$setViewValue.bind(ngModel));\n        if (typeof component.registerOnTouched === 'function') {\n            component.registerOnTouched(ngModel.$setTouched.bind(ngModel));\n        }\n    }\n}\n/**\n * Test two values for strict equality, accounting for the fact that `NaN !== NaN`.\n * @param {?} val1\n * @param {?} val2\n * @return {?}\n */\nexport function strictEquals(val1, val2) {\n    return val1 === val2 || (val1 !== val1 && val2 !== val2);\n}\n//# sourceMappingURL=util.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ComponentFactoryResolver, NgZone } from '@angular/core';\nimport { $COMPILE, $INJECTOR, $PARSE, INJECTOR_KEY, LAZY_MODULE_REF, REQUIRE_INJECTOR, REQUIRE_NG_MODEL } from './constants';\nimport { DowngradeComponentAdapter } from './downgrade_component_adapter';\nimport { controllerKey, getComponentName, isFunction } from './util';\n/**\n * @record\n * @template T\n */\nfunction Thenable() { }\n/** @type {?} */\nThenable.prototype.then;\n/**\n * \\@description\n *\n * A helper function that allows an Angular component to be used from AngularJS.\n *\n * *Part of the [upgrade/static](api?query=upgrade%2Fstatic)\n * library for hybrid upgrade apps that support AoT compilation*\n *\n * This helper function returns a factory function to be used for registering\n * an AngularJS wrapper directive for \"downgrading\" an Angular component.\n *\n * \\@usageNotes\n * ### Examples\n *\n * Let's assume that you have an Angular component called `ng2Heroes` that needs\n * to be made available in AngularJS templates.\n *\n * {\\@example upgrade/static/ts/full/module.ts region=\"ng2-heroes\"}\n *\n * We must create an AngularJS [directive](https://docs.angularjs.org/guide/directive)\n * that will make this Angular component available inside AngularJS templates.\n * The `downgradeComponent()` function returns a factory function that we\n * can use to define the AngularJS directive that wraps the \"downgraded\" component.\n *\n * {\\@example upgrade/static/ts/full/module.ts region=\"ng2-heroes-wrapper\"}\n *\n * \\@experimental\n * @param {?} info contains information about the Component that is being downgraded:\n *\n * * `component: Type<any>`: The type of the Component that will be downgraded\n * * `propagateDigest?: boolean`: Whether to perform {\\@link ChangeDetectorRef#detectChanges\n *   change detection} on the component on every\n *   [$digest](https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$digest). If set to `false`,\n *   change detection will still be performed when any of the component's inputs changes.\n *   (Default: true)\n *\n * @return {?} a factory function that can be used to register the component in an\n * AngularJS module.\n *\n */\nexport function downgradeComponent(info) {\n    /** @type {?} */\n    var directiveFactory = function ($compile, $injector, $parse) {\n        /** @type {?} */\n        var needsNgZone = false;\n        /** @type {?} */\n        var wrapCallback = function (cb) { return cb; };\n        /** @type {?} */\n        var ngZone;\n        return {\n            restrict: 'E',\n            terminal: true,\n            require: [REQUIRE_INJECTOR, REQUIRE_NG_MODEL],\n            link: function (scope, element, attrs, required) {\n                /** @type {?} */\n                var ngModel = required[1];\n                /** @type {?} */\n                var parentInjector = required[0];\n                /** @type {?} */\n                var ranAsync = false;\n                if (!parentInjector) {\n                    /** @type {?} */\n                    var lazyModuleRef = /** @type {?} */ ($injector.get(LAZY_MODULE_REF));\n                    needsNgZone = lazyModuleRef.needsNgZone;\n                    parentInjector = lazyModuleRef.injector || /** @type {?} */ (lazyModuleRef.promise);\n                }\n                /** @type {?} */\n                var doDowngrade = function (injector) {\n                    /** @type {?} */\n                    var componentFactoryResolver = injector.get(ComponentFactoryResolver);\n                    /** @type {?} */\n                    var componentFactory = /** @type {?} */ ((componentFactoryResolver.resolveComponentFactory(info.component)));\n                    if (!componentFactory) {\n                        throw new Error('Expecting ComponentFactory for: ' + getComponentName(info.component));\n                    }\n                    /** @type {?} */\n                    var injectorPromise = new ParentInjectorPromise(element);\n                    /** @type {?} */\n                    var facade = new DowngradeComponentAdapter(element, attrs, scope, ngModel, injector, $injector, $compile, $parse, componentFactory, wrapCallback);\n                    /** @type {?} */\n                    var projectableNodes = facade.compileContents();\n                    facade.createComponent(projectableNodes);\n                    facade.setupInputs(needsNgZone, info.propagateDigest);\n                    facade.setupOutputs();\n                    facade.registerCleanup();\n                    injectorPromise.resolve(facade.getInjector());\n                    if (ranAsync) {\n                        // If this is run async, it is possible that it is not run inside a\n                        // digest and initial input values will not be detected.\n                        scope.$evalAsync(function () { });\n                    }\n                };\n                /** @type {?} */\n                var downgradeFn = !needsNgZone ? doDowngrade : function (injector) {\n                    if (!ngZone) {\n                        ngZone = injector.get(NgZone);\n                        wrapCallback = function (cb) { return function () {\n                            return NgZone.isInAngularZone() ? cb() : ngZone.run(cb);\n                        }; };\n                    }\n                    wrapCallback(function () { return doDowngrade(injector); })();\n                };\n                if (isThenable(parentInjector)) {\n                    parentInjector.then(downgradeFn);\n                }\n                else {\n                    downgradeFn(parentInjector);\n                }\n                ranAsync = true;\n            }\n        };\n    };\n    // bracket-notation because of closure - see #14441\n    directiveFactory['$inject'] = [$COMPILE, $INJECTOR, $PARSE];\n    return directiveFactory;\n}\n/**\n * Synchronous promise-like object to wrap parent injectors,\n * to preserve the synchronous nature of Angular 1's $compile.\n */\nvar /**\n * Synchronous promise-like object to wrap parent injectors,\n * to preserve the synchronous nature of Angular 1's $compile.\n */\nParentInjectorPromise = /** @class */ (function () {\n    function ParentInjectorPromise(element) {\n        this.element = element;\n        this.injectorKey = controllerKey(INJECTOR_KEY);\n        this.callbacks = [];\n        /** @type {?} */ ((\n        // Store the promise on the element.\n        element.data))(this.injectorKey, this);\n    }\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    ParentInjectorPromise.prototype.then = /**\n     * @param {?} callback\n     * @return {?}\n     */\n    function (callback) {\n        if (this.injector) {\n            callback(this.injector);\n        }\n        else {\n            this.callbacks.push(callback);\n        }\n    };\n    /**\n     * @param {?} injector\n     * @return {?}\n     */\n    ParentInjectorPromise.prototype.resolve = /**\n     * @param {?} injector\n     * @return {?}\n     */\n    function (injector) {\n        this.injector = injector; /** @type {?} */\n        ((\n        // Store the real injector on the element.\n        this.element.data))(this.injectorKey, injector);\n        // Release the element to prevent memory leaks.\n        this.element = /** @type {?} */ ((null));\n        // Run the queued callbacks.\n        this.callbacks.forEach(function (callback) { return callback(injector); });\n        this.callbacks.length = 0;\n    };\n    return ParentInjectorPromise;\n}());\nif (false) {\n    /** @type {?} */\n    ParentInjectorPromise.prototype.injector;\n    /** @type {?} */\n    ParentInjectorPromise.prototype.injectorKey;\n    /** @type {?} */\n    ParentInjectorPromise.prototype.callbacks;\n    /** @type {?} */\n    ParentInjectorPromise.prototype.element;\n}\n/**\n * @template T\n * @param {?} obj\n * @return {?}\n */\nfunction isThenable(obj) {\n    return isFunction((/** @type {?} */ (obj)).then);\n}\n//# sourceMappingURL=downgrade_component.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @type {?} */\nvar tempInjectorRef;\n/**\n * @param {?} injector\n * @return {?}\n */\nexport function setTempInjectorRef(injector) {\n    tempInjectorRef = injector;\n}\n/**\n * @return {?}\n */\nexport function injectorFactory() {\n    if (!tempInjectorRef) {\n        throw new Error('Trying to get the AngularJS injector before it being set.');\n    }\n    /** @type {?} */\n    var injector = tempInjectorRef;\n    tempInjectorRef = null; // clear the value to prevent memory leaks\n    return injector;\n}\n/**\n * @param {?} i\n * @return {?}\n */\nexport function rootScopeFactory(i) {\n    return i.get('$rootScope');\n}\n/**\n * @param {?} i\n * @return {?}\n */\nexport function compileFactory(i) {\n    return i.get('$compile');\n}\n/**\n * @param {?} i\n * @return {?}\n */\nexport function parseFactory(i) {\n    return i.get('$parse');\n}\n/** @type {?} */\nexport var angular1Providers = [\n    // We must use exported named functions for the ng2 factories to keep the compiler happy:\n    // > Metadata collected contains an error that will be reported at runtime:\n    // >   Function calls are not supported.\n    // >   Consider replacing the function or lambda with a reference to an exported function\n    { provide: '$injector', useFactory: injectorFactory, deps: [] },\n    { provide: '$rootScope', useFactory: rootScopeFactory, deps: ['$injector'] },\n    { provide: '$compile', useFactory: compileFactory, deps: ['$injector'] },\n    { provide: '$parse', useFactory: parseFactory, deps: ['$injector'] }\n];\n//# sourceMappingURL=angular1_providers.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR as NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR } from '@angular/core';\nvar NgAdapterInjector = /** @class */ (function () {\n    function NgAdapterInjector(modInjector) {\n        this.modInjector = modInjector;\n    }\n    // When Angular locate a service in the component injector tree, the not found value is set to\n    // `NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR`. In such a case we should not walk up to the module\n    // injector.\n    // AngularJS only supports a single tree and should always check the module injector.\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    NgAdapterInjector.prototype.get = /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    function (token, notFoundValue) {\n        if (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {\n            return notFoundValue;\n        }\n        return this.modInjector.get(token, notFoundValue);\n    };\n    return NgAdapterInjector;\n}());\nexport { NgAdapterInjector };\nif (false) {\n    /** @type {?} */\n    NgAdapterInjector.prototype.modInjector;\n}\n//# sourceMappingURL=util.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as angular from './angular1';\nimport { $COMPILE, $CONTROLLER, $HTTP_BACKEND, $INJECTOR, $TEMPLATE_CACHE } from './constants';\nimport { controllerKey, directiveNormalize, isFunction } from './util';\n/** @type {?} */\nvar REQUIRE_PREFIX_RE = /^(\\^\\^?)?(\\?)?(\\^\\^?)?/;\n/**\n * @record\n */\nexport function IBindingDestination() { }\n/* TODO: handle strange member:\n[key: string]: any;\n*/\n/** @type {?|undefined} */\nIBindingDestination.prototype.$onChanges;\n/**\n * @record\n */\nexport function IControllerInstance() { }\n/** @type {?|undefined} */\nIControllerInstance.prototype.$doCheck;\n/** @type {?|undefined} */\nIControllerInstance.prototype.$onDestroy;\n/** @type {?|undefined} */\nIControllerInstance.prototype.$onInit;\n/** @type {?|undefined} */\nIControllerInstance.prototype.$postLink;\nvar UpgradeHelper = /** @class */ (function () {\n    function UpgradeHelper(injector, name, elementRef, directive) {\n        this.injector = injector;\n        this.name = name;\n        this.$injector = injector.get($INJECTOR);\n        this.$compile = this.$injector.get($COMPILE);\n        this.$controller = this.$injector.get($CONTROLLER);\n        this.element = elementRef.nativeElement;\n        this.$element = angular.element(this.element);\n        this.directive = directive || UpgradeHelper.getDirective(this.$injector, name);\n    }\n    /**\n     * @param {?} $injector\n     * @param {?} name\n     * @return {?}\n     */\n    UpgradeHelper.getDirective = /**\n     * @param {?} $injector\n     * @param {?} name\n     * @return {?}\n     */\n    function ($injector, name) {\n        /** @type {?} */\n        var directives = $injector.get(name + 'Directive');\n        if (directives.length > 1) {\n            throw new Error(\"Only support single directive definition for: \" + name);\n        }\n        /** @type {?} */\n        var directive = directives[0];\n        // AngularJS will transform `link: xyz` to `compile: () => xyz`. So we can only tell there was a\n        // user-defined `compile` if there is no `link`. In other cases, we will just ignore `compile`.\n        if (directive.compile && !directive.link)\n            notSupported(name, 'compile');\n        if (directive.replace)\n            notSupported(name, 'replace');\n        if (directive.terminal)\n            notSupported(name, 'terminal');\n        return directive;\n    };\n    /**\n     * @param {?} $injector\n     * @param {?} directive\n     * @param {?=} fetchRemoteTemplate\n     * @return {?}\n     */\n    UpgradeHelper.getTemplate = /**\n     * @param {?} $injector\n     * @param {?} directive\n     * @param {?=} fetchRemoteTemplate\n     * @return {?}\n     */\n    function ($injector, directive, fetchRemoteTemplate) {\n        if (fetchRemoteTemplate === void 0) { fetchRemoteTemplate = false; }\n        if (directive.template !== undefined) {\n            return getOrCall(directive.template);\n        }\n        else if (directive.templateUrl) {\n            /** @type {?} */\n            var $templateCache_1 = /** @type {?} */ ($injector.get($TEMPLATE_CACHE));\n            /** @type {?} */\n            var url_1 = getOrCall(directive.templateUrl);\n            /** @type {?} */\n            var template = $templateCache_1.get(url_1);\n            if (template !== undefined) {\n                return template;\n            }\n            else if (!fetchRemoteTemplate) {\n                throw new Error('loading directive templates asynchronously is not supported');\n            }\n            return new Promise(function (resolve, reject) {\n                /** @type {?} */\n                var $httpBackend = /** @type {?} */ ($injector.get($HTTP_BACKEND));\n                $httpBackend('GET', url_1, null, function (status, response) {\n                    if (status === 200) {\n                        resolve($templateCache_1.put(url_1, response));\n                    }\n                    else {\n                        reject(\"GET component template from '\" + url_1 + \"' returned '\" + status + \": \" + response + \"'\");\n                    }\n                });\n            });\n        }\n        else {\n            throw new Error(\"Directive '\" + directive.name + \"' is not a component, it is missing template.\");\n        }\n    };\n    /**\n     * @param {?} controllerType\n     * @param {?} $scope\n     * @return {?}\n     */\n    UpgradeHelper.prototype.buildController = /**\n     * @param {?} controllerType\n     * @param {?} $scope\n     * @return {?}\n     */\n    function (controllerType, $scope) {\n        /** @type {?} */\n        var locals = { '$scope': $scope, '$element': this.$element };\n        /** @type {?} */\n        var controller = this.$controller(controllerType, locals, null, this.directive.controllerAs); /** @type {?} */\n        ((this.$element.data))(controllerKey(/** @type {?} */ ((this.directive.name))), controller);\n        return controller;\n    };\n    /**\n     * @param {?=} template\n     * @return {?}\n     */\n    UpgradeHelper.prototype.compileTemplate = /**\n     * @param {?=} template\n     * @return {?}\n     */\n    function (template) {\n        if (template === undefined) {\n            template = /** @type {?} */ (UpgradeHelper.getTemplate(this.$injector, this.directive));\n        }\n        return this.compileHtml(template);\n    };\n    /**\n     * @param {?} $scope\n     * @param {?=} controllerInstance\n     * @return {?}\n     */\n    UpgradeHelper.prototype.onDestroy = /**\n     * @param {?} $scope\n     * @param {?=} controllerInstance\n     * @return {?}\n     */\n    function ($scope, controllerInstance) {\n        if (controllerInstance && isFunction(controllerInstance.$onDestroy)) {\n            controllerInstance.$onDestroy();\n        }\n        $scope.$destroy();\n        // Clean the jQuery/jqLite data on the component+child elements.\n        // Equivelent to how jQuery/jqLite invoke `cleanData` on an Element (this.element)\n        //  https://github.com/jquery/jquery/blob/e743cbd28553267f955f71ea7248377915613fd9/src/manipulation.js#L223\n        //  https://github.com/angular/angular.js/blob/26ddc5f830f902a3d22f4b2aab70d86d4d688c82/src/jqLite.js#L306-L312\n        // `cleanData` will invoke the AngularJS `$destroy` DOM event\n        //  https://github.com/angular/angular.js/blob/26ddc5f830f902a3d22f4b2aab70d86d4d688c82/src/Angular.js#L1911-L1924\n        angular.element.cleanData([this.element]);\n        angular.element.cleanData(this.element.querySelectorAll('*'));\n    };\n    /**\n     * @return {?}\n     */\n    UpgradeHelper.prototype.prepareTransclusion = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        /** @type {?} */\n        var transclude = this.directive.transclude;\n        /** @type {?} */\n        var contentChildNodes = this.extractChildNodes();\n        /** @type {?} */\n        var attachChildrenFn = function (scope, cloneAttachFn) {\n            // Since AngularJS v1.5.8, `cloneAttachFn` will try to destroy the transclusion scope if\n            // `$template` is empty. Since the transcluded content comes from Angular, not AngularJS,\n            // there will be no transclusion scope here.\n            // Provide a dummy `scope.$destroy()` method to prevent `cloneAttachFn` from throwing.\n            scope = scope || { $destroy: function () { return undefined; } };\n            return /** @type {?} */ ((cloneAttachFn))($template, scope);\n        };\n        /** @type {?} */\n        var $template = contentChildNodes;\n        if (transclude) {\n            /** @type {?} */\n            var slots_1 = Object.create(null);\n            if (typeof transclude === 'object') {\n                $template = [];\n                /** @type {?} */\n                var slotMap_1 = Object.create(null);\n                /** @type {?} */\n                var filledSlots_1 = Object.create(null);\n                // Parse the element selectors.\n                Object.keys(transclude).forEach(function (slotName) {\n                    /** @type {?} */\n                    var selector = transclude[slotName];\n                    /** @type {?} */\n                    var optional = selector.charAt(0) === '?';\n                    selector = optional ? selector.substring(1) : selector;\n                    slotMap_1[selector] = slotName;\n                    slots_1[slotName] = null; // `null`: Defined but not yet filled.\n                    filledSlots_1[slotName] = optional; // Consider optional slots as filled.\n                });\n                // Add the matching elements into their slot.\n                contentChildNodes.forEach(function (node) {\n                    /** @type {?} */\n                    var slotName = slotMap_1[directiveNormalize(node.nodeName.toLowerCase())];\n                    if (slotName) {\n                        filledSlots_1[slotName] = true;\n                        slots_1[slotName] = slots_1[slotName] || [];\n                        slots_1[slotName].push(node);\n                    }\n                    else {\n                        $template.push(node);\n                    }\n                });\n                // Check for required slots that were not filled.\n                Object.keys(filledSlots_1).forEach(function (slotName) {\n                    if (!filledSlots_1[slotName]) {\n                        throw new Error(\"Required transclusion slot '\" + slotName + \"' on directive: \" + _this.name);\n                    }\n                });\n                Object.keys(slots_1).filter(function (slotName) { return slots_1[slotName]; }).forEach(function (slotName) {\n                    /** @type {?} */\n                    var nodes = slots_1[slotName];\n                    slots_1[slotName] = function (scope, cloneAttach) { return ((cloneAttach))(nodes, scope); };\n                });\n            }\n            // Attach `$$slots` to default slot transclude fn.\n            attachChildrenFn.$$slots = slots_1;\n            // AngularJS v1.6+ ignores empty or whitespace-only transcluded text nodes. But Angular\n            // removes all text content after the first interpolation and updates it later, after\n            // evaluating the expressions. This would result in AngularJS failing to recognize text\n            // nodes that start with an interpolation as transcluded content and use the fallback\n            // content instead.\n            // To avoid this issue, we add a\n            // [zero-width non-joiner character](https://en.wikipedia.org/wiki/Zero-width_non-joiner)\n            // to empty text nodes (which can only be a result of Angular removing their initial content).\n            // NOTE: Transcluded text content that starts with whitespace followed by an interpolation\n            //       will still fail to be detected by AngularJS v1.6+\n            $template.forEach(function (node) {\n                if (node.nodeType === Node.TEXT_NODE && !node.nodeValue) {\n                    node.nodeValue = '\\u200C';\n                }\n            });\n        }\n        return attachChildrenFn;\n    };\n    /**\n     * @param {?} controllerInstance\n     * @return {?}\n     */\n    UpgradeHelper.prototype.resolveAndBindRequiredControllers = /**\n     * @param {?} controllerInstance\n     * @return {?}\n     */\n    function (controllerInstance) {\n        /** @type {?} */\n        var directiveRequire = this.getDirectiveRequire();\n        /** @type {?} */\n        var requiredControllers = this.resolveRequire(directiveRequire);\n        if (controllerInstance && this.directive.bindToController && isMap(directiveRequire)) {\n            /** @type {?} */\n            var requiredControllersMap_1 = /** @type {?} */ (requiredControllers);\n            Object.keys(requiredControllersMap_1).forEach(function (key) {\n                controllerInstance[key] = requiredControllersMap_1[key];\n            });\n        }\n        return requiredControllers;\n    };\n    /**\n     * @param {?} html\n     * @return {?}\n     */\n    UpgradeHelper.prototype.compileHtml = /**\n     * @param {?} html\n     * @return {?}\n     */\n    function (html) {\n        this.element.innerHTML = html;\n        return this.$compile(this.element.childNodes);\n    };\n    /**\n     * @return {?}\n     */\n    UpgradeHelper.prototype.extractChildNodes = /**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var childNodes = [];\n        /** @type {?} */\n        var childNode;\n        while (childNode = this.element.firstChild) {\n            this.element.removeChild(childNode);\n            childNodes.push(childNode);\n        }\n        return childNodes;\n    };\n    /**\n     * @return {?}\n     */\n    UpgradeHelper.prototype.getDirectiveRequire = /**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var require = this.directive.require || /** @type {?} */ (((this.directive.controller && this.directive.name)));\n        if (isMap(require)) {\n            Object.keys(require).forEach(function (key) {\n                /** @type {?} */\n                var value = require[key];\n                /** @type {?} */\n                var match = /** @type {?} */ ((value.match(REQUIRE_PREFIX_RE)));\n                /** @type {?} */\n                var name = value.substring(match[0].length);\n                if (!name) {\n                    require[key] = match[0] + key;\n                }\n            });\n        }\n        return require;\n    };\n    /**\n     * @param {?} require\n     * @param {?=} controllerInstance\n     * @return {?}\n     */\n    UpgradeHelper.prototype.resolveRequire = /**\n     * @param {?} require\n     * @param {?=} controllerInstance\n     * @return {?}\n     */\n    function (require, controllerInstance) {\n        var _this = this;\n        if (!require) {\n            return null;\n        }\n        else if (Array.isArray(require)) {\n            return require.map(function (req) { return _this.resolveRequire(req); });\n        }\n        else if (typeof require === 'object') {\n            /** @type {?} */\n            var value_1 = {};\n            Object.keys(require).forEach(function (key) { return value_1[key] = /** @type {?} */ ((_this.resolveRequire(require[key]))); });\n            return value_1;\n        }\n        else if (typeof require === 'string') {\n            /** @type {?} */\n            var match = /** @type {?} */ ((require.match(REQUIRE_PREFIX_RE)));\n            /** @type {?} */\n            var inheritType = match[1] || match[3];\n            /** @type {?} */\n            var name_1 = require.substring(match[0].length);\n            /** @type {?} */\n            var isOptional = !!match[2];\n            /** @type {?} */\n            var searchParents = !!inheritType;\n            /** @type {?} */\n            var startOnParent = inheritType === '^^';\n            /** @type {?} */\n            var ctrlKey = controllerKey(name_1);\n            /** @type {?} */\n            var elem = startOnParent ? /** @type {?} */ ((this.$element.parent))() : this.$element;\n            /** @type {?} */\n            var value = searchParents ? /** @type {?} */ ((elem.inheritedData))(ctrlKey) : /** @type {?} */ ((elem.data))(ctrlKey);\n            if (!value && !isOptional) {\n                throw new Error(\"Unable to find required '\" + require + \"' in upgraded directive '\" + this.name + \"'.\");\n            }\n            return value;\n        }\n        else {\n            throw new Error(\"Unrecognized 'require' syntax on upgraded directive '\" + this.name + \"': \" + require);\n        }\n    };\n    return UpgradeHelper;\n}());\nexport { UpgradeHelper };\nif (false) {\n    /** @type {?} */\n    UpgradeHelper.prototype.$injector;\n    /** @type {?} */\n    UpgradeHelper.prototype.element;\n    /** @type {?} */\n    UpgradeHelper.prototype.$element;\n    /** @type {?} */\n    UpgradeHelper.prototype.directive;\n    /** @type {?} */\n    UpgradeHelper.prototype.$compile;\n    /** @type {?} */\n    UpgradeHelper.prototype.$controller;\n    /** @type {?} */\n    UpgradeHelper.prototype.injector;\n    /** @type {?} */\n    UpgradeHelper.prototype.name;\n}\n/**\n * @template T\n * @param {?} property\n * @return {?}\n */\nfunction getOrCall(property) {\n    return isFunction(property) ? property() : property;\n}\n/**\n * @template T\n * @param {?} value\n * @return {?}\n */\nfunction isMap(value) {\n    return value && !Array.isArray(value) && typeof value === 'object';\n}\n/**\n * @param {?} name\n * @param {?} feature\n * @return {?}\n */\nfunction notSupported(name, feature) {\n    throw new Error(\"Upgraded directive '\" + name + \"' contains unsupported feature: '\" + feature + \"'.\");\n}\n//# sourceMappingURL=upgrade_helper.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { EventEmitter, ɵlooseIdentical as looseIdentical } from '@angular/core';\nimport { $SCOPE } from '../common/constants';\nimport { UpgradeHelper } from '../common/upgrade_helper';\nimport { isFunction } from '../common/util';\n/** @type {?} */\nvar NOT_SUPPORTED = 'NOT_SUPPORTED';\n/** @type {?} */\nvar INITIAL_VALUE = {\n    __UNINITIALIZED__: true\n};\nvar Bindings = /** @class */ (function () {\n    function Bindings() {\n        this.twoWayBoundProperties = [];\n        this.twoWayBoundLastValues = [];\n        this.expressionBoundProperties = [];\n        this.propertyToOutputMap = {};\n    }\n    return Bindings;\n}());\nif (false) {\n    /** @type {?} */\n    Bindings.prototype.twoWayBoundProperties;\n    /** @type {?} */\n    Bindings.prototype.twoWayBoundLastValues;\n    /** @type {?} */\n    Bindings.prototype.expressionBoundProperties;\n    /** @type {?} */\n    Bindings.prototype.propertyToOutputMap;\n}\n/**\n * \\@description\n *\n * A helper class that allows an AngularJS component to be used from Angular.\n *\n * *Part of the [upgrade/static](api?query=upgrade%2Fstatic)\n * library for hybrid upgrade apps that support AoT compilation.*\n *\n * This helper class should be used as a base class for creating Angular directives\n * that wrap AngularJS components that need to be \"upgraded\".\n *\n * \\@usageNotes\n * ### Examples\n *\n * Let's assume that you have an AngularJS component called `ng1Hero` that needs\n * to be made available in Angular templates.\n *\n * {\\@example upgrade/static/ts/full/module.ts region=\"ng1-hero\"}\n *\n * We must create a `Directive` that will make this AngularJS component\n * available inside Angular templates.\n *\n * {\\@example upgrade/static/ts/full/module.ts region=\"ng1-hero-wrapper\"}\n *\n * In this example you can see that we must derive from the `UpgradeComponent`\n * base class but also provide an {\\@link Directive `\\@Directive`} decorator. This is\n * because the AoT compiler requires that this information is statically available at\n * compile time.\n *\n * Note that we must do the following:\n * * specify the directive's selector (`ng1-hero`)\n * * specify all inputs and outputs that the AngularJS component expects\n * * derive from `UpgradeComponent`\n * * call the base class from the constructor, passing\n *   * the AngularJS name of the component (`ng1Hero`)\n *   * the `ElementRef` and `Injector` for the component wrapper\n *\n * \\@experimental\n */\nvar /**\n * \\@description\n *\n * A helper class that allows an AngularJS component to be used from Angular.\n *\n * *Part of the [upgrade/static](api?query=upgrade%2Fstatic)\n * library for hybrid upgrade apps that support AoT compilation.*\n *\n * This helper class should be used as a base class for creating Angular directives\n * that wrap AngularJS components that need to be \"upgraded\".\n *\n * \\@usageNotes\n * ### Examples\n *\n * Let's assume that you have an AngularJS component called `ng1Hero` that needs\n * to be made available in Angular templates.\n *\n * {\\@example upgrade/static/ts/full/module.ts region=\"ng1-hero\"}\n *\n * We must create a `Directive` that will make this AngularJS component\n * available inside Angular templates.\n *\n * {\\@example upgrade/static/ts/full/module.ts region=\"ng1-hero-wrapper\"}\n *\n * In this example you can see that we must derive from the `UpgradeComponent`\n * base class but also provide an {\\@link Directive `\\@Directive`} decorator. This is\n * because the AoT compiler requires that this information is statically available at\n * compile time.\n *\n * Note that we must do the following:\n * * specify the directive's selector (`ng1-hero`)\n * * specify all inputs and outputs that the AngularJS component expects\n * * derive from `UpgradeComponent`\n * * call the base class from the constructor, passing\n *   * the AngularJS name of the component (`ng1Hero`)\n *   * the `ElementRef` and `Injector` for the component wrapper\n *\n * \\@experimental\n */\nUpgradeComponent = /** @class */ (function () {\n    /**\n     * Create a new `UpgradeComponent` instance. You should not normally need to do this.\n     * Instead you should derive a new class from this one and call the super constructor\n     * from the base class.\n     *\n     * {@example upgrade/static/ts/full/module.ts region=\"ng1-hero-wrapper\" }\n     *\n     * * The `name` parameter should be the name of the AngularJS directive.\n     * * The `elementRef` and `injector` parameters should be acquired from Angular by dependency\n     *   injection into the base class constructor.\n     */\n    function UpgradeComponent(name, elementRef, injector) {\n        this.name = name;\n        this.elementRef = elementRef;\n        this.injector = injector;\n        this.helper = new UpgradeHelper(injector, name, elementRef);\n        this.$injector = this.helper.$injector;\n        this.element = this.helper.element;\n        this.$element = this.helper.$element;\n        this.directive = this.helper.directive;\n        this.bindings = this.initializeBindings(this.directive);\n        /** @type {?} */\n        var $parentScope = injector.get($SCOPE);\n        // QUESTION 1: Should we create an isolated scope if the scope is only true?\n        // QUESTION 2: Should we make the scope accessible through `$element.scope()/isolateScope()`?\n        this.$componentScope = $parentScope.$new(!!this.directive.scope);\n        this.initializeOutputs();\n    }\n    /**\n     * @return {?}\n     */\n    UpgradeComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        /** @type {?} */\n        var attachChildNodes = this.helper.prepareTransclusion();\n        /** @type {?} */\n        var linkFn = this.helper.compileTemplate();\n        /** @type {?} */\n        var controllerType = this.directive.controller;\n        /** @type {?} */\n        var bindToController = this.directive.bindToController;\n        if (controllerType) {\n            this.controllerInstance = this.helper.buildController(controllerType, this.$componentScope);\n        }\n        else if (bindToController) {\n            throw new Error(\"Upgraded directive '\" + this.directive.name + \"' specifies 'bindToController' but no controller.\");\n        }\n        // Set up outputs\n        this.bindingDestination = bindToController ? this.controllerInstance : this.$componentScope;\n        this.bindOutputs();\n        /** @type {?} */\n        var requiredControllers = this.helper.resolveAndBindRequiredControllers(this.controllerInstance);\n        // Hook: $onChanges\n        if (this.pendingChanges) {\n            this.forwardChanges(this.pendingChanges);\n            this.pendingChanges = null;\n        }\n        // Hook: $onInit\n        if (this.controllerInstance && isFunction(this.controllerInstance.$onInit)) {\n            this.controllerInstance.$onInit();\n        }\n        // Hook: $doCheck\n        if (this.controllerInstance && isFunction(this.controllerInstance.$doCheck)) {\n            /** @type {?} */\n            var callDoCheck = function () { return ((_this.controllerInstance.$doCheck))(); };\n            this.unregisterDoCheckWatcher = this.$componentScope.$parent.$watch(callDoCheck);\n            callDoCheck();\n        }\n        /** @type {?} */\n        var link = this.directive.link;\n        /** @type {?} */\n        var preLink = (typeof link == 'object') && (/** @type {?} */ (link)).pre;\n        /** @type {?} */\n        var postLink = (typeof link == 'object') ? (/** @type {?} */ (link)).post : link;\n        /** @type {?} */\n        var attrs = NOT_SUPPORTED;\n        /** @type {?} */\n        var transcludeFn = NOT_SUPPORTED;\n        if (preLink) {\n            preLink(this.$componentScope, this.$element, attrs, requiredControllers, transcludeFn);\n        }\n        linkFn(this.$componentScope, /** @type {?} */ ((null)), { parentBoundTranscludeFn: attachChildNodes });\n        if (postLink) {\n            postLink(this.$componentScope, this.$element, attrs, requiredControllers, transcludeFn);\n        }\n        // Hook: $postLink\n        if (this.controllerInstance && isFunction(this.controllerInstance.$postLink)) {\n            this.controllerInstance.$postLink();\n        }\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    UpgradeComponent.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        if (!this.bindingDestination) {\n            this.pendingChanges = changes;\n        }\n        else {\n            this.forwardChanges(changes);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    UpgradeComponent.prototype.ngDoCheck = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        /** @type {?} */\n        var twoWayBoundProperties = this.bindings.twoWayBoundProperties;\n        /** @type {?} */\n        var twoWayBoundLastValues = this.bindings.twoWayBoundLastValues;\n        /** @type {?} */\n        var propertyToOutputMap = this.bindings.propertyToOutputMap;\n        twoWayBoundProperties.forEach(function (propName, idx) {\n            /** @type {?} */\n            var newValue = _this.bindingDestination[propName];\n            /** @type {?} */\n            var oldValue = twoWayBoundLastValues[idx];\n            if (!looseIdentical(newValue, oldValue)) {\n                /** @type {?} */\n                var outputName = propertyToOutputMap[propName];\n                /** @type {?} */\n                var eventEmitter = (/** @type {?} */ (_this))[outputName];\n                eventEmitter.emit(newValue);\n                twoWayBoundLastValues[idx] = newValue;\n            }\n        });\n    };\n    /**\n     * @return {?}\n     */\n    UpgradeComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        if (isFunction(this.unregisterDoCheckWatcher)) {\n            this.unregisterDoCheckWatcher();\n        }\n        this.helper.onDestroy(this.$componentScope, this.controllerInstance);\n    };\n    /**\n     * @param {?} directive\n     * @return {?}\n     */\n    UpgradeComponent.prototype.initializeBindings = /**\n     * @param {?} directive\n     * @return {?}\n     */\n    function (directive) {\n        var _this = this;\n        /** @type {?} */\n        var btcIsObject = typeof directive.bindToController === 'object';\n        if (btcIsObject && Object.keys(/** @type {?} */ ((directive.scope))).length) {\n            throw new Error(\"Binding definitions on scope and controller at the same time is not supported.\");\n        }\n        /** @type {?} */\n        var context = (btcIsObject) ? directive.bindToController : directive.scope;\n        /** @type {?} */\n        var bindings = new Bindings();\n        if (typeof context == 'object') {\n            Object.keys(context).forEach(function (propName) {\n                /** @type {?} */\n                var definition = context[propName];\n                /** @type {?} */\n                var bindingType = definition.charAt(0);\n                // QUESTION: What about `=*`? Ignore? Throw? Support?\n                switch (bindingType) {\n                    case '@':\n                    case '<':\n                        // We don't need to do anything special. They will be defined as inputs on the\n                        // upgraded component facade and the change propagation will be handled by\n                        // `ngOnChanges()`.\n                        break;\n                    case '=':\n                        bindings.twoWayBoundProperties.push(propName);\n                        bindings.twoWayBoundLastValues.push(INITIAL_VALUE);\n                        bindings.propertyToOutputMap[propName] = propName + 'Change';\n                        break;\n                    case '&':\n                        bindings.expressionBoundProperties.push(propName);\n                        bindings.propertyToOutputMap[propName] = propName;\n                        break;\n                    default:\n                        /** @type {?} */\n                        var json = JSON.stringify(context);\n                        throw new Error(\"Unexpected mapping '\" + bindingType + \"' in '\" + json + \"' in '\" + _this.name + \"' directive.\");\n                }\n            });\n        }\n        return bindings;\n    };\n    /**\n     * @return {?}\n     */\n    UpgradeComponent.prototype.initializeOutputs = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        // Initialize the outputs for `=` and `&` bindings\n        this.bindings.twoWayBoundProperties.concat(this.bindings.expressionBoundProperties)\n            .forEach(function (propName) {\n            /** @type {?} */\n            var outputName = _this.bindings.propertyToOutputMap[propName];\n            (/** @type {?} */ (_this))[outputName] = new EventEmitter();\n        });\n    };\n    /**\n     * @return {?}\n     */\n    UpgradeComponent.prototype.bindOutputs = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        // Bind `&` bindings to the corresponding outputs\n        this.bindings.expressionBoundProperties.forEach(function (propName) {\n            /** @type {?} */\n            var outputName = _this.bindings.propertyToOutputMap[propName];\n            /** @type {?} */\n            var emitter = (/** @type {?} */ (_this))[outputName];\n            _this.bindingDestination[propName] = function (value) { return emitter.emit(value); };\n        });\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    UpgradeComponent.prototype.forwardChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        var _this = this;\n        // Forward input changes to `bindingDestination`\n        Object.keys(changes).forEach(function (propName) { return _this.bindingDestination[propName] = changes[propName].currentValue; });\n        if (isFunction(this.bindingDestination.$onChanges)) {\n            this.bindingDestination.$onChanges(changes);\n        }\n    };\n    return UpgradeComponent;\n}());\n/**\n * \\@description\n *\n * A helper class that allows an AngularJS component to be used from Angular.\n *\n * *Part of the [upgrade/static](api?query=upgrade%2Fstatic)\n * library for hybrid upgrade apps that support AoT compilation.*\n *\n * This helper class should be used as a base class for creating Angular directives\n * that wrap AngularJS components that need to be \"upgraded\".\n *\n * \\@usageNotes\n * ### Examples\n *\n * Let's assume that you have an AngularJS component called `ng1Hero` that needs\n * to be made available in Angular templates.\n *\n * {\\@example upgrade/static/ts/full/module.ts region=\"ng1-hero\"}\n *\n * We must create a `Directive` that will make this AngularJS component\n * available inside Angular templates.\n *\n * {\\@example upgrade/static/ts/full/module.ts region=\"ng1-hero-wrapper\"}\n *\n * In this example you can see that we must derive from the `UpgradeComponent`\n * base class but also provide an {\\@link Directive `\\@Directive`} decorator. This is\n * because the AoT compiler requires that this information is statically available at\n * compile time.\n *\n * Note that we must do the following:\n * * specify the directive's selector (`ng1-hero`)\n * * specify all inputs and outputs that the AngularJS component expects\n * * derive from `UpgradeComponent`\n * * call the base class from the constructor, passing\n *   * the AngularJS name of the component (`ng1Hero`)\n *   * the `ElementRef` and `Injector` for the component wrapper\n *\n * \\@experimental\n */\nexport { UpgradeComponent };\nif (false) {\n    /** @type {?} */\n    UpgradeComponent.prototype.helper;\n    /** @type {?} */\n    UpgradeComponent.prototype.$injector;\n    /** @type {?} */\n    UpgradeComponent.prototype.element;\n    /** @type {?} */\n    UpgradeComponent.prototype.$element;\n    /** @type {?} */\n    UpgradeComponent.prototype.$componentScope;\n    /** @type {?} */\n    UpgradeComponent.prototype.directive;\n    /** @type {?} */\n    UpgradeComponent.prototype.bindings;\n    /** @type {?} */\n    UpgradeComponent.prototype.controllerInstance;\n    /** @type {?} */\n    UpgradeComponent.prototype.bindingDestination;\n    /** @type {?} */\n    UpgradeComponent.prototype.pendingChanges;\n    /** @type {?} */\n    UpgradeComponent.prototype.unregisterDoCheckWatcher;\n    /** @type {?} */\n    UpgradeComponent.prototype.name;\n    /** @type {?} */\n    UpgradeComponent.prototype.elementRef;\n    /** @type {?} */\n    UpgradeComponent.prototype.injector;\n}\n//# sourceMappingURL=upgrade_component.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injector, NgModule, NgZone, Testability } from '@angular/core';\nimport * as angular from '../common/angular1';\nimport { $$TESTABILITY, $DELEGATE, $INJECTOR, $INTERVAL, $PROVIDE, INJECTOR_KEY, LAZY_MODULE_REF, UPGRADE_MODULE_NAME } from '../common/constants';\nimport { controllerKey } from '../common/util';\nimport { angular1Providers, setTempInjectorRef } from './angular1_providers';\nimport { NgAdapterInjector } from './util';\n/**\n * \\@description\n *\n * An `NgModule`, which you import to provide AngularJS core services,\n * and has an instance method used to bootstrap the hybrid upgrade application.\n *\n * *Part of the [upgrade/static](api?query=upgrade/static)\n * library for hybrid upgrade apps that support AoT compilation*\n *\n * The `upgrade/static` package contains helpers that allow AngularJS and Angular components\n * to be used together inside a hybrid upgrade application, which supports AoT compilation.\n *\n * Specifically, the classes and functions in the `upgrade/static` module allow the following:\n *\n * 1. Creation of an Angular directive that wraps and exposes an AngularJS component so\n *    that it can be used in an Angular template. See `UpgradeComponent`.\n * 2. Creation of an AngularJS directive that wraps and exposes an Angular component so\n *    that it can be used in an AngularJS template. See `downgradeComponent`.\n * 3. Creation of an Angular root injector provider that wraps and exposes an AngularJS\n *    service so that it can be injected into an Angular context. See\n *    {\\@link UpgradeModule#upgrading-an-angular-1-service Upgrading an AngularJS service} below.\n * 4. Creation of an AngularJS service that wraps and exposes an Angular injectable\n *    so that it can be injected into an AngularJS context. See `downgradeInjectable`.\n * 3. Bootstrapping of a hybrid Angular application which contains both of the frameworks\n *    coexisting in a single application.\n *\n * \\@usageNotes\n *\n * ```ts\n * import {UpgradeModule} from '\\@angular/upgrade/static';\n * ```\n *\n * See also the {\\@link UpgradeModule#examples examples} below.\n *\n * ### Mental Model\n *\n * When reasoning about how a hybrid application works it is useful to have a mental model which\n * describes what is happening and explains what is happening at the lowest level.\n *\n * 1. There are two independent frameworks running in a single application, each framework treats\n *    the other as a black box.\n * 2. Each DOM element on the page is owned exactly by one framework. Whichever framework\n *    instantiated the element is the owner. Each framework only updates/interacts with its own\n *    DOM elements and ignores others.\n * 3. AngularJS directives always execute inside the AngularJS framework codebase regardless of\n *    where they are instantiated.\n * 4. Angular components always execute inside the Angular framework codebase regardless of\n *    where they are instantiated.\n * 5. An AngularJS component can be \"upgraded\"\" to an Angular component. This is achieved by\n *    defining an Angular directive, which bootstraps the AngularJS component at its location\n *    in the DOM. See `UpgradeComponent`.\n * 6. An Angular component can be \"downgraded\" to an AngularJS component. This is achieved by\n *    defining an AngularJS directive, which bootstraps the Angular component at its location\n *    in the DOM. See `downgradeComponent`.\n * 7. Whenever an \"upgraded\"/\"downgraded\" component is instantiated the host element is owned by\n *    the framework doing the instantiation. The other framework then instantiates and owns the\n *    view for that component.\n *    1. This implies that the component bindings will always follow the semantics of the\n *       instantiation framework.\n *    2. The DOM attributes are parsed by the framework that owns the current template. So\n *       attributes in AngularJS templates must use kebab-case, while AngularJS templates must use\n *       camelCase.\n *    3. However the template binding syntax will always use the Angular style, e.g. square\n *       brackets (`[...]`) for property binding.\n * 8. Angular is bootstrapped first; AngularJS is bootstrapped second. AngularJS always owns the\n *    root component of the application.\n * 9. The new application is running in an Angular zone, and therefore it no longer needs calls to\n *    `$apply()`.\n *\n * ### The `UpgradeModule` class\n *\n * This class is an `NgModule`, which you import to provide AngularJS core services,\n * and has an instance method used to bootstrap the hybrid upgrade application.\n *\n * * Core AngularJS services\n *   Importing this `NgModule` will add providers for the core\n *   [AngularJS services](https://docs.angularjs.org/api/ng/service) to the root injector.\n *\n * * Bootstrap\n *   The runtime instance of this class contains a {\\@link UpgradeModule#bootstrap `bootstrap()`}\n *   method, which you use to bootstrap the top level AngularJS module onto an element in the\n *   DOM for the hybrid upgrade app.\n *\n *   It also contains properties to access the {\\@link UpgradeModule#injector root injector}, the\n *   bootstrap `NgZone` and the\n *   [AngularJS $injector](https://docs.angularjs.org/api/auto/service/$injector).\n *\n * ### Examples\n *\n * Import the `UpgradeModule` into your top level {\\@link NgModule Angular `NgModule`}.\n *\n * {\\@example upgrade/static/ts/full/module.ts region='ng2-module'}\n *\n * Then inject `UpgradeModule` into your Angular `NgModule` and use it to bootstrap the top level\n * [AngularJS module](https://docs.angularjs.org/api/ng/type/angular.Module) in the\n * `ngDoBootstrap()` method.\n *\n * {\\@example upgrade/static/ts/full/module.ts region='bootstrap-ng1'}\n *\n * Finally, kick off the whole process, by bootstraping your top level Angular `NgModule`.\n *\n * {\\@example upgrade/static/ts/full/module.ts region='bootstrap-ng2'}\n *\n * {\\@a upgrading-an-angular-1-service}\n * ### Upgrading an AngularJS service\n *\n * There is no specific API for upgrading an AngularJS service. Instead you should just follow the\n * following recipe:\n *\n * Let's say you have an AngularJS service:\n *\n * {\\@example upgrade/static/ts/full/module.ts region=\"ng1-text-formatter-service\"}\n *\n * Then you should define an Angular provider to be included in your `NgModule` `providers`\n * property.\n *\n * {\\@example upgrade/static/ts/full/module.ts region=\"upgrade-ng1-service\"}\n *\n * Then you can use the \"upgraded\" AngularJS service by injecting it into an Angular component\n * or service.\n *\n * {\\@example upgrade/static/ts/full/module.ts region=\"use-ng1-upgraded-service\"}\n *\n * \\@experimental\n */\nvar UpgradeModule = /** @class */ (function () {\n    function UpgradeModule(/** The root `Injector` for the upgrade application. */\n    injector, ngZone) {\n        this.ngZone = ngZone;\n        this.injector = new NgAdapterInjector(injector);\n    }\n    /**\n     * Bootstrap an AngularJS application from this NgModule\n     * @param element the element on which to bootstrap the AngularJS application\n     * @param [modules] the AngularJS modules to bootstrap for this application\n     * @param [config] optional extra AngularJS bootstrap configuration\n     */\n    /**\n     * Bootstrap an AngularJS application from this NgModule\n     * @param {?} element the element on which to bootstrap the AngularJS application\n     * @param {?=} modules\n     * @param {?=} config\n     * @return {?}\n     */\n    UpgradeModule.prototype.bootstrap = /**\n     * Bootstrap an AngularJS application from this NgModule\n     * @param {?} element the element on which to bootstrap the AngularJS application\n     * @param {?=} modules\n     * @param {?=} config\n     * @return {?}\n     */\n    function (element, modules, config /*angular.IAngularBootstrapConfig*/) {\n        var _this = this;\n        if (modules === void 0) { modules = []; }\n        /** @type {?} */\n        var INIT_MODULE_NAME = UPGRADE_MODULE_NAME + '.init';\n        /** @type {?} */\n        var initModule = angular\n            .module(INIT_MODULE_NAME, [])\n            .value(INJECTOR_KEY, this.injector)\n            .factory(LAZY_MODULE_REF, [\n            INJECTOR_KEY,\n            function (injector) { return (/** @type {?} */ ({ injector: injector, needsNgZone: false })); }\n        ])\n            .config([\n            $PROVIDE, $INJECTOR,\n            function ($provide, $injector) {\n                if ($injector.has($$TESTABILITY)) {\n                    $provide.decorator($$TESTABILITY, [\n                        $DELEGATE,\n                        function (testabilityDelegate) {\n                            /** @type {?} */\n                            var originalWhenStable = testabilityDelegate.whenStable;\n                            /** @type {?} */\n                            var injector = _this.injector;\n                            /** @type {?} */\n                            var newWhenStable = function (callback) {\n                                originalWhenStable.call(testabilityDelegate, function () {\n                                    /** @type {?} */\n                                    var ng2Testability = injector.get(Testability);\n                                    if (ng2Testability.isStable()) {\n                                        callback();\n                                    }\n                                    else {\n                                        ng2Testability.whenStable(newWhenStable.bind(testabilityDelegate, callback));\n                                    }\n                                });\n                            };\n                            testabilityDelegate.whenStable = newWhenStable;\n                            return testabilityDelegate;\n                        }\n                    ]);\n                }\n                if ($injector.has($INTERVAL)) {\n                    $provide.decorator($INTERVAL, [\n                        $DELEGATE,\n                        function (intervalDelegate) {\n                            /** @type {?} */\n                            var wrappedInterval = function (fn, delay, count, invokeApply) {\n                                var pass = [];\n                                for (var _i = 4; _i < arguments.length; _i++) {\n                                    pass[_i - 4] = arguments[_i];\n                                }\n                                return _this.ngZone.runOutsideAngular(function () {\n                                    return intervalDelegate.apply(void 0, [function () {\n                                            var args = [];\n                                            for (var _i = 0; _i < arguments.length; _i++) {\n                                                args[_i] = arguments[_i];\n                                            }\n                                            // Run callback in the next VM turn - $interval calls\n                                            // $rootScope.$apply, and running the callback in NgZone will\n                                            // cause a '$digest already in progress' error if it's in the\n                                            // same vm turn.\n                                            setTimeout(function () { _this.ngZone.run(function () { return fn.apply(void 0, args); }); });\n                                        }, delay, count, invokeApply].concat(pass));\n                                });\n                            };\n                            (/** @type {?} */ (wrappedInterval))['cancel'] = intervalDelegate.cancel;\n                            return wrappedInterval;\n                        }\n                    ]);\n                }\n            }\n        ])\n            .run([\n            $INJECTOR,\n            function ($injector) {\n                _this.$injector = $injector;\n                // Initialize the ng1 $injector provider\n                setTempInjectorRef($injector);\n                _this.injector.get($INJECTOR); /** @type {?} */\n                ((\n                // Put the injector on the DOM, so that it can be \"required\"\n                angular.element(element).data))(controllerKey(INJECTOR_KEY), _this.injector);\n                // Wire up the ng1 rootScope to run a digest cycle whenever the zone settles\n                // We need to do this in the next tick so that we don't prevent the bootup\n                // stabilizing\n                setTimeout(function () {\n                    /** @type {?} */\n                    var $rootScope = $injector.get('$rootScope');\n                    /** @type {?} */\n                    var subscription = _this.ngZone.onMicrotaskEmpty.subscribe(function () { return $rootScope.$digest(); });\n                    $rootScope.$on('$destroy', function () { subscription.unsubscribe(); });\n                }, 0);\n            }\n        ]);\n        /** @type {?} */\n        var upgradeModule = angular.module(UPGRADE_MODULE_NAME, [INIT_MODULE_NAME].concat(modules));\n        /** @type {?} */\n        var windowAngular = (/** @type {?} */ (window))['angular'];\n        windowAngular.resumeBootstrap = undefined;\n        // Bootstrap the AngularJS application inside our zone\n        this.ngZone.run(function () { angular.bootstrap(element, [upgradeModule.name], config); });\n        // Patch resumeBootstrap() to run inside the ngZone\n        if (windowAngular.resumeBootstrap) {\n            /** @type {?} */\n            var originalResumeBootstrap_1 = windowAngular.resumeBootstrap;\n            /** @type {?} */\n            var ngZone_1 = this.ngZone;\n            windowAngular.resumeBootstrap = function () {\n                var _this = this;\n                /** @type {?} */\n                var args = arguments;\n                windowAngular.resumeBootstrap = originalResumeBootstrap_1;\n                return ngZone_1.run(function () { return windowAngular.resumeBootstrap.apply(_this, args); });\n            };\n        }\n    };\n    UpgradeModule.decorators = [\n        { type: NgModule, args: [{ providers: [angular1Providers] },] },\n    ];\n    /** @nocollapse */\n    UpgradeModule.ctorParameters = function () { return [\n        { type: Injector },\n        { type: NgZone }\n    ]; };\n    return UpgradeModule;\n}());\nexport { UpgradeModule };\nif (false) {\n    /**\n     * The AngularJS `$injector` for the upgrade application.\n     * @type {?}\n     */\n    UpgradeModule.prototype.$injector;\n    /**\n     * The Angular Injector *\n     * @type {?}\n     */\n    UpgradeModule.prototype.injector;\n    /**\n     * The bootstrap zone for the upgrade application\n     * @type {?}\n     */\n    UpgradeModule.prototype.ngZone;\n}\n//# sourceMappingURL=upgrade_module.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { INJECTOR_KEY } from './constants';\n/**\n * \\@description\n *\n * A helper function to allow an Angular service to be accessible from AngularJS.\n *\n * *Part of the [upgrade/static](api?query=upgrade%2Fstatic)\n * library for hybrid upgrade apps that support AoT compilation*\n *\n * This helper function returns a factory function that provides access to the Angular\n * service identified by the `token` parameter.\n *\n * \\@usageNotes\n * ### Examples\n *\n * First ensure that the service to be downgraded is provided in an `NgModule`\n * that will be part of the upgrade application. For example, let's assume we have\n * defined `HeroesService`\n *\n * {\\@example upgrade/static/ts/full/module.ts region=\"ng2-heroes-service\"}\n *\n * and that we have included this in our upgrade app `NgModule`\n *\n * {\\@example upgrade/static/ts/full/module.ts region=\"ng2-module\"}\n *\n * Now we can register the `downgradeInjectable` factory function for the service\n * on an AngularJS module.\n *\n * {\\@example upgrade/static/ts/full/module.ts region=\"downgrade-ng2-heroes-service\"}\n *\n * Inside an AngularJS component's controller we can get hold of the\n * downgraded service via the name we gave when downgrading.\n *\n * {\\@example upgrade/static/ts/full/module.ts region=\"example-app\"}\n *\n * \\@experimental\n * @param {?} token an `InjectionToken` that identifies a service provided from Angular.\n *\n * @return {?} a [factory function](https://docs.angularjs.org/guide/di) that can be\n * used to register the service on an AngularJS module.\n *\n */\nexport function downgradeInjectable(token) {\n    /** @type {?} */\n    var factory = function (i) { return i.get(token); };\n    (/** @type {?} */ (factory))['$inject'] = [INJECTOR_KEY];\n    return factory;\n}\n//# sourceMappingURL=downgrade_injectable.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { platformBrowser } from '@angular/platform-browser';\nimport * as angular from '../common/angular1';\nimport { $INJECTOR, INJECTOR_KEY, LAZY_MODULE_REF, UPGRADE_MODULE_NAME } from '../common/constants';\nimport { isFunction } from '../common/util';\nimport { angular1Providers, setTempInjectorRef } from './angular1_providers';\nimport { NgAdapterInjector } from './util';\n/**\n * \\@description\n *\n * A helper function for creating an AngularJS module that can bootstrap an Angular module\n * \"on-demand\" (possibly lazily) when a {\\@link downgradeComponent downgraded component} needs to be\n * instantiated.\n *\n * *Part of the [upgrade/static](api?query=upgrade/static) library for hybrid upgrade apps that\n * support AoT compilation.*\n *\n * It allows loading/bootstrapping the Angular part of a hybrid application lazily and not having to\n * pay the cost up-front. For example, you can have an AngularJS application that uses Angular for\n * specific routes and only instantiate the Angular modules if/when the user visits one of these\n * routes.\n *\n * The Angular module will be bootstrapped once (when requested for the first time) and the same\n * reference will be used from that point onwards.\n *\n * `downgradeModule()` requires either an `NgModuleFactory` or a function:\n * - `NgModuleFactory`: If you pass an `NgModuleFactory`, it will be used to instantiate a module\n *   using `platformBrowser`'s {\\@link PlatformRef#bootstrapModuleFactory bootstrapModuleFactory()}.\n * - `Function`: If you pass a function, it is expected to return a promise resolving to an\n *   `NgModuleRef`. The function is called with an array of extra {\\@link StaticProvider Providers}\n *   that are expected to be available from the returned `NgModuleRef`'s `Injector`.\n *\n * `downgradeModule()` returns the name of the created AngularJS wrapper module. You can use it to\n * declare a dependency in your main AngularJS module.\n *\n * {\\@example upgrade/static/ts/lite/module.ts region=\"basic-how-to\"}\n *\n * For more details on how to use `downgradeModule()` see\n * [Upgrading for Performance](guide/upgrade-performance).\n *\n * \\@usageNotes\n *\n * Apart from `UpgradeModule`, you can use the rest of the `upgrade/static` helpers as usual to\n * build a hybrid application. Note that the Angular pieces (e.g. downgraded services) will not be\n * available until the downgraded module has been bootstrapped, i.e. by instantiating a downgraded\n * component.\n *\n * <div class=\"alert is-important\">\n *\n *   You cannot use `downgradeModule()` and `UpgradeModule` in the same hybrid application.<br />\n *   Use one or the other.\n *\n * </div>\n *\n * ### Differences with `UpgradeModule`\n *\n * Besides their different API, there are two important internal differences between\n * `downgradeModule()` and `UpgradeModule` that affect the behavior of hybrid applications:\n *\n * 1. Unlike `UpgradeModule`, `downgradeModule()` does not bootstrap the main AngularJS module\n *    inside the {\\@link NgZone Angular zone}.\n * 2. Unlike `UpgradeModule`, `downgradeModule()` does not automatically run a\n *    [$digest()](https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$digest) when changes are\n *    detected in the Angular part of the application.\n *\n * What this means is that applications using `UpgradeModule` will run change detection more\n * frequently in order to ensure that both frameworks are properly notified about possible changes.\n * This will inevitably result in more change detection runs than necessary.\n *\n * `downgradeModule()`, on the other side, does not try to tie the two change detection systems as\n * tightly, restricting the explicit change detection runs only to cases where it knows it is\n * necessary (e.g. when the inputs of a downgraded component change). This improves performance,\n * especially in change-detection-heavy applications, but leaves it up to the developer to manually\n * notify each framework as needed.\n *\n * For a more detailed discussion of the differences and their implications, see\n * [Upgrading for Performance](guide/upgrade-performance).\n *\n * <div class=\"alert is-helpful\">\n *\n *   You can manually trigger a change detection run in AngularJS using\n *   [scope.$apply(...)](https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$apply) or\n *   [$rootScope.$digest()](https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$digest).\n *\n *   You can manually trigger a change detection run in Angular using {\\@link NgZone#run\n *   ngZone.run(...)}.\n *\n * </div>\n *\n * \\@experimental\n * @template T\n * @param {?} moduleFactoryOrBootstrapFn\n * @return {?}\n */\nexport function downgradeModule(moduleFactoryOrBootstrapFn) {\n    /** @type {?} */\n    var LAZY_MODULE_NAME = UPGRADE_MODULE_NAME + '.lazy';\n    /** @type {?} */\n    var bootstrapFn = isFunction(moduleFactoryOrBootstrapFn) ?\n        moduleFactoryOrBootstrapFn :\n        function (extraProviders) {\n            return platformBrowser(extraProviders).bootstrapModuleFactory(moduleFactoryOrBootstrapFn);\n        };\n    /** @type {?} */\n    var injector;\n    // Create an ng1 module to bootstrap.\n    angular.module(LAZY_MODULE_NAME, [])\n        .factory(INJECTOR_KEY, function () {\n        if (!injector) {\n            throw new Error('Trying to get the Angular injector before bootstrapping an Angular module.');\n        }\n        return injector;\n    })\n        .factory(LAZY_MODULE_REF, [\n        $INJECTOR,\n        function ($injector) {\n            setTempInjectorRef($injector);\n            /** @type {?} */\n            var result = {\n                needsNgZone: true,\n                promise: bootstrapFn(angular1Providers).then(function (ref) {\n                    injector = result.injector = new NgAdapterInjector(ref.injector);\n                    injector.get($INJECTOR);\n                    return injector;\n                })\n            };\n            return result;\n        }\n    ]);\n    return LAZY_MODULE_NAME;\n}\n//# sourceMappingURL=downgrade_module.js.map"]}