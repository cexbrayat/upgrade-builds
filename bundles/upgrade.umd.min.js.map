{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","../../../packages/upgrade/esm5/src/common/angular1.js","../../../packages/upgrade/esm5/src/common/component_info.js","../../../packages/upgrade/esm5/src/common/util.js","../../../packages/upgrade/esm5/src/common/downgrade_component_adapter.js","../../../packages/upgrade/esm5/src/common/downgrade_component.js","../../../packages/upgrade/esm5/src/common/upgrade_helper.js","../../../packages/upgrade/esm5/src/dynamic/upgrade_ng1_adapter.js","../../../packages/upgrade/esm5/src/dynamic/upgrade_adapter.js","../../../packages/upgrade/esm5/src/common/downgrade_injectable.js"],"names":["exports","module","factory","require","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","noNg","Error","noNgElement","cleanData","angular","bootstrap","element","version","this","parseBinding","bracketAttr","attr","parenAttr","bracketParenAttr","capitalAttr","charAt","toUpperCase","substr","onAttr","DIRECTIVE_SPECIAL_CHARS_REGEXP","onError","e","console","error","stack","value","_this","promise","Promise","res","rej","resolve","DowngradeComponentAdapter","attrs","scope","ngModel","parentInjector","$injector","$compile","$parse","componentFactory","wrapCallback","componentScope","$new","compiledProjectableNodes","groupProjectableNodes","map","nodes","forEach","linkFn","clone","push","projectableNodes","providers","provide","$SCOPE","useValue","childInjector","_angular_core","Injector","create","parent","name","Testability","viewChangeDetector","componentRef","injector","get","ChangeDetectorRef","changeDetector","TestabilityRegistry","instance","component","testability","supportsNgModel","$render","writeValue","$viewValue","registerOnChange","$setViewValue","bind","setupInputs","propagateDigest","inputs","_loop_1","prop","input","PropertyBinding","propName","templateName","INITIAL_VALUE","currValue","strictEquals","prevValue","updateInput","$observe","observeFn_1","unwatch_1","this_1","$watch","bindAttr","bindonAttr","expr","watchFn","ngOnChanges","inputChangeCount","implementsOnChanges","inputChanges","markForCheck","detectChanges","unwatch_2","setupOutputs","outputs","output","substring","subscribeToOutput","isAssignment","getter","setter","emitter","subscribe","next","v","$event","destroyComponentRef","destroy","$destroy","$on","destroyed","ngContentSelectors","ii","j","jj","node","ngContentIndex","findMatchingNgContentIndex","ngContentIndices","selector","matchesSelector","sort","wildcardNgContentIndex","el","_matches","elProto","Element","ngZone","needsNgZone","cb","REQUIRE_INJECTOR","REQUIRE_NG_MODEL","required","ranAsync","lazyModuleRef","LAZY_MODULE_REF","ComponentFactoryResolver","doDowngrade","resolveComponentFactory","info","getComponentName","injectorPromise","ParentInjectorPromise$1","facade","compileContents","createComponent","registerCleanup","getInjector","$evalAsync","NgZone","isInAngularZone","run","then","downgradeFn","injectorKey","controllerKey","INJECTOR_KEY","callback","UpgradeHelper","elementRef","directive","$INJECTOR","$COMPILE","getDirective","directives","compile","link","notSupported","replace","fetchRemoteTemplate","undefined","template","$templateCache_1","url_1","getOrCall","templateUrl","reject","status","response","put","buildController","controllerType","$scope","locals","$element","compileTemplate","onDestroy","querySelectorAll","attachChildrenFn","cloneAttachFn","contentChildNodes","transclude","keys","slotName","optional","slotMap_1","filledSlots_1","nodeName","toLowerCase","slots_1","$template","filter","nodeType","Node","TEXT_NODE","nodeValue","controllerInstance","directiveRequire","getDirectiveRequire","resolveRequire","bindToController","isMap","requiredControllersMap_1","key","compileHtml","childNodes","extractChildNodes","childNode","firstChild","match","REQUIRE_PREFIX_RE","Array","isArray","req","value_1","ctrlKey","name_1","elem","startOnParent","searchParents","isOptional","INITIAL_VALUE$1","__UNINITIALIZED__","UpgradeNg1ComponentAdapterBuilder","inputsRename","propertyOutputs","propertyMap","CAMEL_CASE","all","outputsRename","UpgradeNg1ComponentAdapter","helper","self","checkProperties","ngOnInit","ngDoCheck","ngOnDestroy","decorators","type","args","__assign","jit","MyClass","ctorParameters","Inject","ElementRef","btcIsObject","context","outputName","attrName","outputNameRename","bindingType","inputName","inputNameRename","outputNameRenameChange","json","JSON","stringify","exportedComponents","promises","exportedComponent","extractBindings","getTemplate","propOuts","destinationObj","checkLastValues","controller","EventEmitter","indexOf","setComponentProperty","emit","$onInit","postLink","post","preLink","requiredControllers","parentBoundTranscludeFn","attachChildNodes","ng1Changes","changes","change","currentValue","lastValues","ng1ComponentsToBeUpgraded","upgradedProviders","modules","windowNgMock","mock","declareNg1Module","ng1Module","windowAngular","config","element$$1","originalResumeBootstrap_1","resumeBootstrap","r","apply","ng2BootstrapDeferred","ng1BootstrapPromise","_a","ng1Injector","options","token","asToken","prefix","dependencies","upgradeAdapter","idPrefix","platformRef","_angular_platformBrowserDynamic","platformBrowserDynamic","enableLongStackTrace","Zone","Deferred","Compiler","decorator","rootScopeDelegate","constructor","original$applyFn","rootScopePrototype","$apply","exp","delayApplyExps","has","testabilityDelegate","whenStable","ng2Testability","isStable","newWhenStable","rootScope","useFactory","ng2AppModule","DynamicNgUpgradeModule","NgModule","ngModule","ref","shift","subscription","onMicrotaskEmpty","$digest","unsubscribe","catch","UpgradeAdapterRef","_readyFn","_bootstrapDone","ngModuleRef","ng2ModuleRef","fn","dispose"],"mappings":"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","file":"/Users/ced-pro/Code/angular/angular/dist/packages-dist/upgrade/bundles/upgrade.umd.min.js.map","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @typedef {?} */\nvar Ng1Token;\nexport { Ng1Token };\n/** @typedef {?} */\nvar Ng1Expression;\nexport { Ng1Expression };\n/**\n * @record\n */\nexport function IAnnotatedFunction() { }\n/** @type {?|undefined} */\nIAnnotatedFunction.prototype.$inject;\n/** @typedef {?} */\nvar IInjectable;\nexport { IInjectable };\n/** @typedef {?} */\nvar SingleOrListOrMap;\nexport { SingleOrListOrMap };\n/**\n * @record\n */\nexport function IModule() { }\n/** @type {?} */\nIModule.prototype.name;\n/** @type {?} */\nIModule.prototype.requires;\n/** @type {?} */\nIModule.prototype.config;\n/** @type {?} */\nIModule.prototype.directive;\n/** @type {?} */\nIModule.prototype.component;\n/** @type {?} */\nIModule.prototype.controller;\n/** @type {?} */\nIModule.prototype.factory;\n/** @type {?} */\nIModule.prototype.value;\n/** @type {?} */\nIModule.prototype.constant;\n/** @type {?} */\nIModule.prototype.run;\n/**\n * @record\n */\nexport function ICompileService() { }\n/**\n * @record\n */\nexport function ILinkFn() { }\n/* TODO: handle strange member:\n(scope: IScope, cloneAttachFn?: ICloneAttachFunction, options?: ILinkFnOptions): IAugmentedJQuery;\n*/\n/** @type {?|undefined} */\nILinkFn.prototype.$$slots;\n/**\n * @record\n */\nexport function ILinkFnOptions() { }\n/** @type {?|undefined} */\nILinkFnOptions.prototype.parentBoundTranscludeFn;\n/** @type {?|undefined} */\nILinkFnOptions.prototype.transcludeControllers;\n/** @type {?|undefined} */\nILinkFnOptions.prototype.futureParentElement;\n/**\n * @record\n */\nexport function IRootScopeService() { }\n/** @type {?} */\nIRootScopeService.prototype.$new;\n/** @type {?} */\nIRootScopeService.prototype.$id;\n/** @type {?} */\nIRootScopeService.prototype.$parent;\n/** @type {?} */\nIRootScopeService.prototype.$root;\n/** @type {?} */\nIRootScopeService.prototype.$watch;\n/** @type {?} */\nIRootScopeService.prototype.$on;\n/** @type {?} */\nIRootScopeService.prototype.$destroy;\n/** @type {?} */\nIRootScopeService.prototype.$apply;\n/** @type {?} */\nIRootScopeService.prototype.$digest;\n/** @type {?} */\nIRootScopeService.prototype.$evalAsync;\n/** @type {?} */\nIRootScopeService.prototype.$on;\n/** @type {?} */\nIRootScopeService.prototype.$$childTail;\n/** @type {?} */\nIRootScopeService.prototype.$$childHead;\n/** @type {?} */\nIRootScopeService.prototype.$$nextSibling;\n/**\n * @record\n */\nexport function IScope() { }\n/**\n * @record\n */\nexport function IAngularBootstrapConfig() { }\n/** @type {?|undefined} */\nIAngularBootstrapConfig.prototype.strictDi;\n/**\n * @record\n */\nexport function IDirective() { }\n/** @type {?|undefined} */\nIDirective.prototype.compile;\n/** @type {?|undefined} */\nIDirective.prototype.controller;\n/** @type {?|undefined} */\nIDirective.prototype.controllerAs;\n/** @type {?|undefined} */\nIDirective.prototype.bindToController;\n/** @type {?|undefined} */\nIDirective.prototype.link;\n/** @type {?|undefined} */\nIDirective.prototype.name;\n/** @type {?|undefined} */\nIDirective.prototype.priority;\n/** @type {?|undefined} */\nIDirective.prototype.replace;\n/** @type {?|undefined} */\nIDirective.prototype.require;\n/** @type {?|undefined} */\nIDirective.prototype.restrict;\n/** @type {?|undefined} */\nIDirective.prototype.scope;\n/** @type {?|undefined} */\nIDirective.prototype.template;\n/** @type {?|undefined} */\nIDirective.prototype.templateUrl;\n/** @type {?|undefined} */\nIDirective.prototype.templateNamespace;\n/** @type {?|undefined} */\nIDirective.prototype.terminal;\n/** @type {?|undefined} */\nIDirective.prototype.transclude;\n/** @typedef {?} */\nvar DirectiveRequireProperty;\nexport { DirectiveRequireProperty };\n/** @typedef {?} */\nvar DirectiveTranscludeProperty;\nexport { DirectiveTranscludeProperty };\n/**\n * @record\n */\nexport function IDirectiveCompileFn() { }\n/**\n * @record\n */\nexport function IDirectivePrePost() { }\n/** @type {?|undefined} */\nIDirectivePrePost.prototype.pre;\n/** @type {?|undefined} */\nIDirectivePrePost.prototype.post;\n/**\n * @record\n */\nexport function IDirectiveLinkFn() { }\n/**\n * @record\n */\nexport function IComponent() { }\n/** @type {?|undefined} */\nIComponent.prototype.bindings;\n/** @type {?|undefined} */\nIComponent.prototype.controller;\n/** @type {?|undefined} */\nIComponent.prototype.controllerAs;\n/** @type {?|undefined} */\nIComponent.prototype.require;\n/** @type {?|undefined} */\nIComponent.prototype.template;\n/** @type {?|undefined} */\nIComponent.prototype.templateUrl;\n/** @type {?|undefined} */\nIComponent.prototype.transclude;\n/**\n * @record\n */\nexport function IAttributes() { }\n/** @type {?} */\nIAttributes.prototype.$observe;\n/**\n * @record\n */\nexport function ITranscludeFunction() { }\n/**\n * @record\n */\nexport function ICloneAttachFunction() { }\n/** @typedef {?} */\nvar IAugmentedJQuery;\nexport { IAugmentedJQuery };\n/**\n * @record\n */\nexport function IProvider() { }\n/** @type {?} */\nIProvider.prototype.$get;\n/**\n * @record\n */\nexport function IProvideService() { }\n/** @type {?} */\nIProvideService.prototype.provider;\n/** @type {?} */\nIProvideService.prototype.factory;\n/** @type {?} */\nIProvideService.prototype.service;\n/** @type {?} */\nIProvideService.prototype.value;\n/** @type {?} */\nIProvideService.prototype.constant;\n/** @type {?} */\nIProvideService.prototype.decorator;\n/**\n * @record\n */\nexport function IParseService() { }\n/**\n * @record\n */\nexport function ICompiledExpression() { }\n/* TODO: handle strange member:\n(context: any, locals: any): any;\n*/\n/** @type {?|undefined} */\nICompiledExpression.prototype.assign;\n/**\n * @record\n */\nexport function IHttpBackendService() { }\n/**\n * @record\n */\nexport function ICacheObject() { }\n/** @type {?} */\nICacheObject.prototype.put;\n/** @type {?} */\nICacheObject.prototype.get;\n/**\n * @record\n */\nexport function ITemplateCacheService() { }\n/**\n * @record\n */\nexport function ITemplateRequestService() { }\n/* TODO: handle strange member:\n(template: string|any __ TrustedResourceUrl __, ignoreRequestError?: boolean): Promise<string>;\n*/\n/** @type {?} */\nITemplateRequestService.prototype.totalPendingRequests;\n/** @typedef {?} */\nvar IController;\nexport { IController };\n/**\n * @record\n */\nexport function IControllerService() { }\n/**\n * @record\n */\nexport function IInjectorService() { }\n/** @type {?} */\nIInjectorService.prototype.get;\n/** @type {?} */\nIInjectorService.prototype.has;\n/**\n * @record\n */\nexport function IIntervalService() { }\n/* TODO: handle strange member:\n(func: Function, delay: number, count?: number, invokeApply?: boolean,\n   ...args: any[]): Promise<any>;\n*/\n/** @type {?} */\nIIntervalService.prototype.cancel;\n/**\n * @record\n */\nexport function ITestabilityService() { }\n/** @type {?} */\nITestabilityService.prototype.findBindings;\n/** @type {?} */\nITestabilityService.prototype.findModels;\n/** @type {?} */\nITestabilityService.prototype.getLocation;\n/** @type {?} */\nITestabilityService.prototype.setLocation;\n/** @type {?} */\nITestabilityService.prototype.whenStable;\n/**\n * @record\n */\nexport function INgModelController() { }\n/** @type {?} */\nINgModelController.prototype.$render;\n/** @type {?} */\nINgModelController.prototype.$isEmpty;\n/** @type {?} */\nINgModelController.prototype.$setValidity;\n/** @type {?} */\nINgModelController.prototype.$setPristine;\n/** @type {?} */\nINgModelController.prototype.$setDirty;\n/** @type {?} */\nINgModelController.prototype.$setUntouched;\n/** @type {?} */\nINgModelController.prototype.$setTouched;\n/** @type {?} */\nINgModelController.prototype.$rollbackViewValue;\n/** @type {?} */\nINgModelController.prototype.$validate;\n/** @type {?} */\nINgModelController.prototype.$commitViewValue;\n/** @type {?} */\nINgModelController.prototype.$setViewValue;\n/** @type {?} */\nINgModelController.prototype.$viewValue;\n/** @type {?} */\nINgModelController.prototype.$modelValue;\n/** @type {?} */\nINgModelController.prototype.$parsers;\n/** @type {?} */\nINgModelController.prototype.$formatters;\n/** @type {?} */\nINgModelController.prototype.$validators;\n/** @type {?} */\nINgModelController.prototype.$asyncValidators;\n/** @type {?} */\nINgModelController.prototype.$viewChangeListeners;\n/** @type {?} */\nINgModelController.prototype.$error;\n/** @type {?} */\nINgModelController.prototype.$pending;\n/** @type {?} */\nINgModelController.prototype.$untouched;\n/** @type {?} */\nINgModelController.prototype.$touched;\n/** @type {?} */\nINgModelController.prototype.$pristine;\n/** @type {?} */\nINgModelController.prototype.$dirty;\n/** @type {?} */\nINgModelController.prototype.$valid;\n/** @type {?} */\nINgModelController.prototype.$invalid;\n/** @type {?} */\nINgModelController.prototype.$name;\n/**\n * @return {?}\n */\nfunction noNg() {\n    throw new Error('AngularJS v1.x is not loaded!');\n}\nvar ɵ0 = function () { return noNg(); };\n/** @type {?} */\nvar noNgElement = /** @type {?} */ ((ɵ0));\nnoNgElement.cleanData = noNg;\n/** @type {?} */\nvar angular = {\n    bootstrap: noNg,\n    module: noNg,\n    element: noNgElement,\n    version: /** @type {?} */ (undefined),\n    resumeBootstrap: noNg,\n    getTestability: noNg\n};\ntry {\n    if (window.hasOwnProperty('angular')) {\n        angular = (/** @type {?} */ (window)).angular;\n    }\n}\ncatch (e) {\n    // ignore in CJS mode.\n}\n/**\n * @deprecated Use `setAngularJSGlobal` instead.\n * @param {?} ng\n * @return {?}\n */\nexport function setAngularLib(ng) {\n    setAngularJSGlobal(ng);\n}\n/**\n * @deprecated Use `getAngularJSGlobal` instead.\n * @return {?}\n */\nexport function getAngularLib() {\n    return getAngularJSGlobal();\n}\n/**\n * Resets the AngularJS global.\n *\n * Used when AngularJS is loaded lazily, and not available on `window`.\n * @param {?} ng\n * @return {?}\n */\nexport function setAngularJSGlobal(ng) {\n    angular = ng;\n    version = ng && ng.version;\n}\n/**\n * Returns the current AngularJS global.\n * @return {?}\n */\nexport function getAngularJSGlobal() {\n    return angular;\n}\n/** @type {?} */\nexport var bootstrap = function (e, modules, config) {\n    return angular.bootstrap(e, modules, config);\n};\n/** @type {?} */\nexport var module = function (prefix, dependencies) {\n    return angular.module(prefix, dependencies);\n};\n/** @type {?} */\nexport var element = /** @type {?} */ ((function (e) { return angular.element(e); }));\nelement.cleanData = function (nodes) { return angular.element.cleanData(nodes); };\n/** @type {?} */\nexport var resumeBootstrap = function () { return angular.resumeBootstrap(); };\n/** @type {?} */\nexport var getTestability = function (e) { return angular.getTestability(e); };\n/** @type {?} */\nexport var version = angular.version;\nexport { ɵ0 };\n//# sourceMappingURL=angular1.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A `PropertyBinding` represents a mapping between a property name\n * and an attribute name. It is parsed from a string of the form\n * `\"prop: attr\"`; or simply `\"propAndAttr\" where the property\n * and attribute have the same identifier.\n */\nvar /**\n * A `PropertyBinding` represents a mapping between a property name\n * and an attribute name. It is parsed from a string of the form\n * `\"prop: attr\"`; or simply `\"propAndAttr\" where the property\n * and attribute have the same identifier.\n */\nPropertyBinding = /** @class */ (function () {\n    function PropertyBinding(prop, attr) {\n        this.prop = prop;\n        this.attr = attr;\n        this.parseBinding();\n    }\n    /**\n     * @return {?}\n     */\n    PropertyBinding.prototype.parseBinding = /**\n     * @return {?}\n     */\n    function () {\n        this.bracketAttr = \"[\" + this.attr + \"]\";\n        this.parenAttr = \"(\" + this.attr + \")\";\n        this.bracketParenAttr = \"[(\" + this.attr + \")]\";\n        /** @type {?} */\n        var capitalAttr = this.attr.charAt(0).toUpperCase() + this.attr.substr(1);\n        this.onAttr = \"on\" + capitalAttr;\n        this.bindAttr = \"bind\" + capitalAttr;\n        this.bindonAttr = \"bindon\" + capitalAttr;\n    };\n    return PropertyBinding;\n}());\n/**\n * A `PropertyBinding` represents a mapping between a property name\n * and an attribute name. It is parsed from a string of the form\n * `\"prop: attr\"`; or simply `\"propAndAttr\" where the property\n * and attribute have the same identifier.\n */\nexport { PropertyBinding };\nif (false) {\n    /** @type {?} */\n    PropertyBinding.prototype.bracketAttr;\n    /** @type {?} */\n    PropertyBinding.prototype.bracketParenAttr;\n    /** @type {?} */\n    PropertyBinding.prototype.parenAttr;\n    /** @type {?} */\n    PropertyBinding.prototype.onAttr;\n    /** @type {?} */\n    PropertyBinding.prototype.bindAttr;\n    /** @type {?} */\n    PropertyBinding.prototype.bindonAttr;\n    /** @type {?} */\n    PropertyBinding.prototype.prop;\n    /** @type {?} */\n    PropertyBinding.prototype.attr;\n}\n//# sourceMappingURL=component_info.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @type {?} */\nvar DIRECTIVE_PREFIX_REGEXP = /^(?:x|data)[:\\-_]/i;\n/** @type {?} */\nvar DIRECTIVE_SPECIAL_CHARS_REGEXP = /[:\\-_]+(.)/g;\n/**\n * @param {?} e\n * @return {?}\n */\nexport function onError(e) {\n    // TODO: (misko): We seem to not have a stack trace here!\n    if (console.error) {\n        console.error(e, e.stack);\n    }\n    else {\n        // tslint:disable-next-line:no-console\n        console.log(e, e.stack);\n    }\n    throw e;\n}\n/**\n * @param {?} name\n * @return {?}\n */\nexport function controllerKey(name) {\n    return '$' + name + 'Controller';\n}\n/**\n * @param {?} name\n * @return {?}\n */\nexport function directiveNormalize(name) {\n    return name.replace(DIRECTIVE_PREFIX_REGEXP, '')\n        .replace(DIRECTIVE_SPECIAL_CHARS_REGEXP, function (_, letter) { return letter.toUpperCase(); });\n}\n/**\n * @param {?} component\n * @return {?}\n */\nexport function getComponentName(component) {\n    // Return the name of the component or the first line of its stringified version.\n    return (/** @type {?} */ (component)).overriddenName || component.name || component.toString().split('\\n')[0];\n}\n/**\n * @param {?} value\n * @return {?}\n */\nexport function isFunction(value) {\n    return typeof value === 'function';\n}\n/**\n * @template R\n */\nvar /**\n * @template R\n */\nDeferred = /** @class */ (function () {\n    function Deferred() {\n        var _this = this;\n        this.promise = new Promise(function (res, rej) {\n            _this.resolve = res;\n            _this.reject = rej;\n        });\n    }\n    return Deferred;\n}());\n/**\n * @template R\n */\nexport { Deferred };\nif (false) {\n    /** @type {?} */\n    Deferred.prototype.promise;\n    /** @type {?} */\n    Deferred.prototype.resolve;\n    /** @type {?} */\n    Deferred.prototype.reject;\n}\n/**\n * @record\n */\nexport function LazyModuleRef() { }\n/** @type {?} */\nLazyModuleRef.prototype.needsNgZone;\n/** @type {?|undefined} */\nLazyModuleRef.prototype.injector;\n/** @type {?|undefined} */\nLazyModuleRef.prototype.promise;\n/**\n * @param {?} component\n * @return {?} Whether the passed-in component implements the subset of the\n *     `ControlValueAccessor` interface needed for AngularJS `ng-model`\n *     compatibility.\n */\nfunction supportsNgModel(component) {\n    return typeof component.writeValue === 'function' &&\n        typeof component.registerOnChange === 'function';\n}\n/**\n * Glue the AngularJS `NgModelController` (if it exists) to the component\n * (if it implements the needed subset of the `ControlValueAccessor` interface).\n * @param {?} ngModel\n * @param {?} component\n * @return {?}\n */\nexport function hookupNgModel(ngModel, component) {\n    if (ngModel && supportsNgModel(component)) {\n        ngModel.$render = function () { component.writeValue(ngModel.$viewValue); };\n        component.registerOnChange(ngModel.$setViewValue.bind(ngModel));\n        if (typeof component.registerOnTouched === 'function') {\n            component.registerOnTouched(ngModel.$setTouched.bind(ngModel));\n        }\n    }\n}\n/**\n * Test two values for strict equality, accounting for the fact that `NaN !== NaN`.\n * @param {?} val1\n * @param {?} val2\n * @return {?}\n */\nexport function strictEquals(val1, val2) {\n    return val1 === val2 || (val1 !== val1 && val2 !== val2);\n}\n//# sourceMappingURL=util.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ApplicationRef, ChangeDetectorRef, Injector, SimpleChange, Testability, TestabilityRegistry } from '@angular/core';\nimport { PropertyBinding } from './component_info';\nimport { $SCOPE } from './constants';\nimport { getComponentName, hookupNgModel, strictEquals } from './util';\n/** @type {?} */\nvar INITIAL_VALUE = {\n    __UNINITIALIZED__: true\n};\nvar DowngradeComponentAdapter = /** @class */ (function () {\n    function DowngradeComponentAdapter(element, attrs, scope, ngModel, parentInjector, $injector, $compile, $parse, componentFactory, wrapCallback) {\n        this.element = element;\n        this.attrs = attrs;\n        this.scope = scope;\n        this.ngModel = ngModel;\n        this.parentInjector = parentInjector;\n        this.$injector = $injector;\n        this.$compile = $compile;\n        this.$parse = $parse;\n        this.componentFactory = componentFactory;\n        this.wrapCallback = wrapCallback;\n        this.implementsOnChanges = false;\n        this.inputChangeCount = 0;\n        this.inputChanges = {};\n        this.componentScope = scope.$new();\n    }\n    /**\n     * @return {?}\n     */\n    DowngradeComponentAdapter.prototype.compileContents = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        /** @type {?} */\n        var compiledProjectableNodes = [];\n        /** @type {?} */\n        var projectableNodes = this.groupProjectableNodes();\n        /** @type {?} */\n        var linkFns = projectableNodes.map(function (nodes) { return _this.$compile(nodes); }); /** @type {?} */\n        ((this.element.empty))();\n        linkFns.forEach(function (linkFn) {\n            linkFn(_this.scope, function (clone) {\n                compiledProjectableNodes.push(clone); /** @type {?} */\n                ((_this.element.append))(clone);\n            });\n        });\n        return compiledProjectableNodes;\n    };\n    /**\n     * @param {?} projectableNodes\n     * @return {?}\n     */\n    DowngradeComponentAdapter.prototype.createComponent = /**\n     * @param {?} projectableNodes\n     * @return {?}\n     */\n    function (projectableNodes) {\n        /** @type {?} */\n        var providers = [{ provide: $SCOPE, useValue: this.componentScope }];\n        /** @type {?} */\n        var childInjector = Injector.create({ providers: providers, parent: this.parentInjector, name: 'DowngradeComponentAdapter' });\n        this.componentRef =\n            this.componentFactory.create(childInjector, projectableNodes, this.element[0]);\n        this.viewChangeDetector = this.componentRef.injector.get(ChangeDetectorRef);\n        this.changeDetector = this.componentRef.changeDetectorRef;\n        this.component = this.componentRef.instance;\n        /** @type {?} */\n        var testability = this.componentRef.injector.get(Testability, null);\n        if (testability) {\n            this.componentRef.injector.get(TestabilityRegistry)\n                .registerApplication(this.componentRef.location.nativeElement, testability);\n        }\n        hookupNgModel(this.ngModel, this.component);\n    };\n    /**\n     * @param {?} needsNgZone\n     * @param {?=} propagateDigest\n     * @return {?}\n     */\n    DowngradeComponentAdapter.prototype.setupInputs = /**\n     * @param {?} needsNgZone\n     * @param {?=} propagateDigest\n     * @return {?}\n     */\n    function (needsNgZone, propagateDigest) {\n        var _this = this;\n        if (propagateDigest === void 0) { propagateDigest = true; }\n        /** @type {?} */\n        var attrs = this.attrs;\n        /** @type {?} */\n        var inputs = this.componentFactory.inputs || [];\n        var _loop_1 = function (i) {\n            /** @type {?} */\n            var input = new PropertyBinding(inputs[i].propName, inputs[i].templateName);\n            /** @type {?} */\n            var expr = null;\n            if (attrs.hasOwnProperty(input.attr)) {\n                /** @type {?} */\n                var observeFn_1 = (function (prop) {\n                    /** @type {?} */\n                    var prevValue = INITIAL_VALUE;\n                    return function (currValue) {\n                        // Initially, both `$observe()` and `$watch()` will call this function.\n                        if (!strictEquals(prevValue, currValue)) {\n                            if (prevValue === INITIAL_VALUE) {\n                                prevValue = currValue;\n                            }\n                            _this.updateInput(prop, prevValue, currValue);\n                            prevValue = currValue;\n                        }\n                    };\n                })(input.prop);\n                attrs.$observe(input.attr, observeFn_1);\n                /** @type {?} */\n                var unwatch_1 = this_1.componentScope.$watch(function () {\n                    /** @type {?} */ ((unwatch_1))();\n                    unwatch_1 = null;\n                    observeFn_1(attrs[input.attr]);\n                });\n            }\n            else if (attrs.hasOwnProperty(input.bindAttr)) {\n                expr = attrs[input.bindAttr];\n            }\n            else if (attrs.hasOwnProperty(input.bracketAttr)) {\n                expr = attrs[input.bracketAttr];\n            }\n            else if (attrs.hasOwnProperty(input.bindonAttr)) {\n                expr = attrs[input.bindonAttr];\n            }\n            else if (attrs.hasOwnProperty(input.bracketParenAttr)) {\n                expr = attrs[input.bracketParenAttr];\n            }\n            if (expr != null) {\n                /** @type {?} */\n                var watchFn = (function (prop) { return function (currValue, prevValue) {\n                    return _this.updateInput(prop, prevValue, currValue);\n                }; })(input.prop);\n                this_1.componentScope.$watch(expr, watchFn);\n            }\n        };\n        var this_1 = this;\n        for (var i = 0; i < inputs.length; i++) {\n            _loop_1(i);\n        }\n        /** @type {?} */\n        var detectChanges = function () { return _this.changeDetector.detectChanges(); };\n        /** @type {?} */\n        var prototype = this.componentFactory.componentType.prototype;\n        this.implementsOnChanges = !!(prototype && (/** @type {?} */ (prototype)).ngOnChanges);\n        this.componentScope.$watch(function () { return _this.inputChangeCount; }, this.wrapCallback(function () {\n            // Invoke `ngOnChanges()`\n            if (_this.implementsOnChanges) {\n                /** @type {?} */\n                var inputChanges = _this.inputChanges;\n                _this.inputChanges = {};\n                (/** @type {?} */ (_this.component)).ngOnChanges(/** @type {?} */ ((inputChanges)));\n            }\n            _this.viewChangeDetector.markForCheck();\n            // If opted out of propagating digests, invoke change detection when inputs change.\n            if (!propagateDigest) {\n                detectChanges();\n            }\n        }));\n        // If not opted out of propagating digests, invoke change detection on every digest\n        if (propagateDigest) {\n            this.componentScope.$watch(this.wrapCallback(detectChanges));\n        }\n        // If necessary, attach the view so that it will be dirty-checked.\n        // (Allow time for the initial input values to be set and `ngOnChanges()` to be called.)\n        if (needsNgZone || !propagateDigest) {\n            /** @type {?} */\n            var unwatch_2 = this.componentScope.$watch(function () {\n                /** @type {?} */ ((unwatch_2))();\n                unwatch_2 = null;\n                /** @type {?} */\n                var appRef = _this.parentInjector.get(ApplicationRef);\n                appRef.attachView(_this.componentRef.hostView);\n            });\n        }\n    };\n    /**\n     * @return {?}\n     */\n    DowngradeComponentAdapter.prototype.setupOutputs = /**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var attrs = this.attrs;\n        /** @type {?} */\n        var outputs = this.componentFactory.outputs || [];\n        for (var j = 0; j < outputs.length; j++) {\n            /** @type {?} */\n            var output = new PropertyBinding(outputs[j].propName, outputs[j].templateName);\n            /** @type {?} */\n            var bindonAttr = output.bindonAttr.substring(0, output.bindonAttr.length - 6);\n            /** @type {?} */\n            var bracketParenAttr = \"[(\" + output.bracketParenAttr.substring(2, output.bracketParenAttr.length - 8) + \")]\";\n            // order below is important - first update bindings then evaluate expressions\n            if (attrs.hasOwnProperty(bindonAttr)) {\n                this.subscribeToOutput(output, attrs[bindonAttr], true);\n            }\n            if (attrs.hasOwnProperty(bracketParenAttr)) {\n                this.subscribeToOutput(output, attrs[bracketParenAttr], true);\n            }\n            if (attrs.hasOwnProperty(output.onAttr)) {\n                this.subscribeToOutput(output, attrs[output.onAttr]);\n            }\n            if (attrs.hasOwnProperty(output.parenAttr)) {\n                this.subscribeToOutput(output, attrs[output.parenAttr]);\n            }\n        }\n    };\n    /**\n     * @param {?} output\n     * @param {?} expr\n     * @param {?=} isAssignment\n     * @return {?}\n     */\n    DowngradeComponentAdapter.prototype.subscribeToOutput = /**\n     * @param {?} output\n     * @param {?} expr\n     * @param {?=} isAssignment\n     * @return {?}\n     */\n    function (output, expr, isAssignment) {\n        var _this = this;\n        if (isAssignment === void 0) { isAssignment = false; }\n        /** @type {?} */\n        var getter = this.$parse(expr);\n        /** @type {?} */\n        var setter = getter.assign;\n        if (isAssignment && !setter) {\n            throw new Error(\"Expression '\" + expr + \"' is not assignable!\");\n        }\n        /** @type {?} */\n        var emitter = /** @type {?} */ (this.component[output.prop]);\n        if (emitter) {\n            emitter.subscribe({\n                next: isAssignment ? function (v) { return ((setter))(_this.scope, v); } :\n                    function (v) { return getter(_this.scope, { '$event': v }); }\n            });\n        }\n        else {\n            throw new Error(\"Missing emitter '\" + output.prop + \"' on component '\" + getComponentName(this.componentFactory.componentType) + \"'!\");\n        }\n    };\n    /**\n     * @return {?}\n     */\n    DowngradeComponentAdapter.prototype.registerCleanup = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        /** @type {?} */\n        var destroyComponentRef = this.wrapCallback(function () { return _this.componentRef.destroy(); });\n        /** @type {?} */\n        var destroyed = false; /** @type {?} */\n        ((this.element.on))('$destroy', function () { return _this.componentScope.$destroy(); });\n        this.componentScope.$on('$destroy', function () {\n            if (!destroyed) {\n                destroyed = true;\n                _this.componentRef.injector.get(TestabilityRegistry)\n                    .unregisterApplication(_this.componentRef.location.nativeElement);\n                destroyComponentRef();\n            }\n        });\n    };\n    /**\n     * @return {?}\n     */\n    DowngradeComponentAdapter.prototype.getInjector = /**\n     * @return {?}\n     */\n    function () { return this.componentRef.injector; };\n    /**\n     * @param {?} prop\n     * @param {?} prevValue\n     * @param {?} currValue\n     * @return {?}\n     */\n    DowngradeComponentAdapter.prototype.updateInput = /**\n     * @param {?} prop\n     * @param {?} prevValue\n     * @param {?} currValue\n     * @return {?}\n     */\n    function (prop, prevValue, currValue) {\n        if (this.implementsOnChanges) {\n            this.inputChanges[prop] = new SimpleChange(prevValue, currValue, prevValue === currValue);\n        }\n        this.inputChangeCount++;\n        this.component[prop] = currValue;\n    };\n    /**\n     * @return {?}\n     */\n    DowngradeComponentAdapter.prototype.groupProjectableNodes = /**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var ngContentSelectors = this.componentFactory.ngContentSelectors;\n        return groupNodesBySelector(ngContentSelectors, /** @type {?} */ ((this.element.contents))());\n    };\n    return DowngradeComponentAdapter;\n}());\nexport { DowngradeComponentAdapter };\nif (false) {\n    /** @type {?} */\n    DowngradeComponentAdapter.prototype.implementsOnChanges;\n    /** @type {?} */\n    DowngradeComponentAdapter.prototype.inputChangeCount;\n    /** @type {?} */\n    DowngradeComponentAdapter.prototype.inputChanges;\n    /** @type {?} */\n    DowngradeComponentAdapter.prototype.componentScope;\n    /** @type {?} */\n    DowngradeComponentAdapter.prototype.componentRef;\n    /** @type {?} */\n    DowngradeComponentAdapter.prototype.component;\n    /** @type {?} */\n    DowngradeComponentAdapter.prototype.changeDetector;\n    /** @type {?} */\n    DowngradeComponentAdapter.prototype.viewChangeDetector;\n    /** @type {?} */\n    DowngradeComponentAdapter.prototype.element;\n    /** @type {?} */\n    DowngradeComponentAdapter.prototype.attrs;\n    /** @type {?} */\n    DowngradeComponentAdapter.prototype.scope;\n    /** @type {?} */\n    DowngradeComponentAdapter.prototype.ngModel;\n    /** @type {?} */\n    DowngradeComponentAdapter.prototype.parentInjector;\n    /** @type {?} */\n    DowngradeComponentAdapter.prototype.$injector;\n    /** @type {?} */\n    DowngradeComponentAdapter.prototype.$compile;\n    /** @type {?} */\n    DowngradeComponentAdapter.prototype.$parse;\n    /** @type {?} */\n    DowngradeComponentAdapter.prototype.componentFactory;\n    /** @type {?} */\n    DowngradeComponentAdapter.prototype.wrapCallback;\n}\n/**\n * Group a set of DOM nodes into `ngContent` groups, based on the given content selectors.\n * @param {?} ngContentSelectors\n * @param {?} nodes\n * @return {?}\n */\nexport function groupNodesBySelector(ngContentSelectors, nodes) {\n    /** @type {?} */\n    var projectableNodes = [];\n    /** @type {?} */\n    var wildcardNgContentIndex;\n    for (var i = 0, ii = ngContentSelectors.length; i < ii; ++i) {\n        projectableNodes[i] = [];\n    }\n    for (var j = 0, jj = nodes.length; j < jj; ++j) {\n        /** @type {?} */\n        var node = nodes[j];\n        /** @type {?} */\n        var ngContentIndex = findMatchingNgContentIndex(node, ngContentSelectors);\n        if (ngContentIndex != null) {\n            projectableNodes[ngContentIndex].push(node);\n        }\n    }\n    return projectableNodes;\n}\n/**\n * @param {?} element\n * @param {?} ngContentSelectors\n * @return {?}\n */\nfunction findMatchingNgContentIndex(element, ngContentSelectors) {\n    /** @type {?} */\n    var ngContentIndices = [];\n    /** @type {?} */\n    var wildcardNgContentIndex = -1;\n    for (var i = 0; i < ngContentSelectors.length; i++) {\n        /** @type {?} */\n        var selector = ngContentSelectors[i];\n        if (selector === '*') {\n            wildcardNgContentIndex = i;\n        }\n        else {\n            if (matchesSelector(element, selector)) {\n                ngContentIndices.push(i);\n            }\n        }\n    }\n    ngContentIndices.sort();\n    if (wildcardNgContentIndex !== -1) {\n        ngContentIndices.push(wildcardNgContentIndex);\n    }\n    return ngContentIndices.length ? ngContentIndices[0] : null;\n}\n/** @type {?} */\nvar _matches;\n/**\n * @param {?} el\n * @param {?} selector\n * @return {?}\n */\nfunction matchesSelector(el, selector) {\n    if (!_matches) {\n        /** @type {?} */\n        var elProto = /** @type {?} */ (Element.prototype);\n        _matches = elProto.matches || elProto.matchesSelector || elProto.mozMatchesSelector ||\n            elProto.msMatchesSelector || elProto.oMatchesSelector || elProto.webkitMatchesSelector;\n    }\n    return el.nodeType === Node.ELEMENT_NODE ? _matches.call(el, selector) : false;\n}\n//# sourceMappingURL=downgrade_component_adapter.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ComponentFactoryResolver, NgZone } from '@angular/core';\nimport { $COMPILE, $INJECTOR, $PARSE, INJECTOR_KEY, LAZY_MODULE_REF, REQUIRE_INJECTOR, REQUIRE_NG_MODEL } from './constants';\nimport { DowngradeComponentAdapter } from './downgrade_component_adapter';\nimport { controllerKey, getComponentName, isFunction } from './util';\n/**\n * @record\n * @template T\n */\nfunction Thenable() { }\n/** @type {?} */\nThenable.prototype.then;\n/**\n * \\@description\n *\n * A helper function that allows an Angular component to be used from AngularJS.\n *\n * *Part of the [upgrade/static](api?query=upgrade%2Fstatic)\n * library for hybrid upgrade apps that support AoT compilation*\n *\n * This helper function returns a factory function to be used for registering\n * an AngularJS wrapper directive for \"downgrading\" an Angular component.\n *\n * \\@usageNotes\n * ### Examples\n *\n * Let's assume that you have an Angular component called `ng2Heroes` that needs\n * to be made available in AngularJS templates.\n *\n * {\\@example upgrade/static/ts/full/module.ts region=\"ng2-heroes\"}\n *\n * We must create an AngularJS [directive](https://docs.angularjs.org/guide/directive)\n * that will make this Angular component available inside AngularJS templates.\n * The `downgradeComponent()` function returns a factory function that we\n * can use to define the AngularJS directive that wraps the \"downgraded\" component.\n *\n * {\\@example upgrade/static/ts/full/module.ts region=\"ng2-heroes-wrapper\"}\n *\n * \\@experimental\n * @param {?} info contains information about the Component that is being downgraded:\n *\n * * `component: Type<any>`: The type of the Component that will be downgraded\n * * `propagateDigest?: boolean`: Whether to perform {\\@link ChangeDetectorRef#detectChanges\n *   change detection} on the component on every\n *   [$digest](https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$digest). If set to `false`,\n *   change detection will still be performed when any of the component's inputs changes.\n *   (Default: true)\n *\n * @return {?} a factory function that can be used to register the component in an\n * AngularJS module.\n *\n */\nexport function downgradeComponent(info) {\n    /** @type {?} */\n    var directiveFactory = function ($compile, $injector, $parse) {\n        /** @type {?} */\n        var needsNgZone = false;\n        /** @type {?} */\n        var wrapCallback = function (cb) { return cb; };\n        /** @type {?} */\n        var ngZone;\n        return {\n            restrict: 'E',\n            terminal: true,\n            require: [REQUIRE_INJECTOR, REQUIRE_NG_MODEL],\n            link: function (scope, element, attrs, required) {\n                /** @type {?} */\n                var ngModel = required[1];\n                /** @type {?} */\n                var parentInjector = required[0];\n                /** @type {?} */\n                var ranAsync = false;\n                if (!parentInjector) {\n                    /** @type {?} */\n                    var lazyModuleRef = /** @type {?} */ ($injector.get(LAZY_MODULE_REF));\n                    needsNgZone = lazyModuleRef.needsNgZone;\n                    parentInjector = lazyModuleRef.injector || /** @type {?} */ (lazyModuleRef.promise);\n                }\n                /** @type {?} */\n                var doDowngrade = function (injector) {\n                    /** @type {?} */\n                    var componentFactoryResolver = injector.get(ComponentFactoryResolver);\n                    /** @type {?} */\n                    var componentFactory = /** @type {?} */ ((componentFactoryResolver.resolveComponentFactory(info.component)));\n                    if (!componentFactory) {\n                        throw new Error('Expecting ComponentFactory for: ' + getComponentName(info.component));\n                    }\n                    /** @type {?} */\n                    var injectorPromise = new ParentInjectorPromise(element);\n                    /** @type {?} */\n                    var facade = new DowngradeComponentAdapter(element, attrs, scope, ngModel, injector, $injector, $compile, $parse, componentFactory, wrapCallback);\n                    /** @type {?} */\n                    var projectableNodes = facade.compileContents();\n                    facade.createComponent(projectableNodes);\n                    facade.setupInputs(needsNgZone, info.propagateDigest);\n                    facade.setupOutputs();\n                    facade.registerCleanup();\n                    injectorPromise.resolve(facade.getInjector());\n                    if (ranAsync) {\n                        // If this is run async, it is possible that it is not run inside a\n                        // digest and initial input values will not be detected.\n                        scope.$evalAsync(function () { });\n                    }\n                };\n                /** @type {?} */\n                var downgradeFn = !needsNgZone ? doDowngrade : function (injector) {\n                    if (!ngZone) {\n                        ngZone = injector.get(NgZone);\n                        wrapCallback = function (cb) { return function () {\n                            return NgZone.isInAngularZone() ? cb() : ngZone.run(cb);\n                        }; };\n                    }\n                    wrapCallback(function () { return doDowngrade(injector); })();\n                };\n                if (isThenable(parentInjector)) {\n                    parentInjector.then(downgradeFn);\n                }\n                else {\n                    downgradeFn(parentInjector);\n                }\n                ranAsync = true;\n            }\n        };\n    };\n    // bracket-notation because of closure - see #14441\n    directiveFactory['$inject'] = [$COMPILE, $INJECTOR, $PARSE];\n    return directiveFactory;\n}\n/**\n * Synchronous promise-like object to wrap parent injectors,\n * to preserve the synchronous nature of Angular 1's $compile.\n */\nvar /**\n * Synchronous promise-like object to wrap parent injectors,\n * to preserve the synchronous nature of Angular 1's $compile.\n */\nParentInjectorPromise = /** @class */ (function () {\n    function ParentInjectorPromise(element) {\n        this.element = element;\n        this.injectorKey = controllerKey(INJECTOR_KEY);\n        this.callbacks = [];\n        /** @type {?} */ ((\n        // Store the promise on the element.\n        element.data))(this.injectorKey, this);\n    }\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    ParentInjectorPromise.prototype.then = /**\n     * @param {?} callback\n     * @return {?}\n     */\n    function (callback) {\n        if (this.injector) {\n            callback(this.injector);\n        }\n        else {\n            this.callbacks.push(callback);\n        }\n    };\n    /**\n     * @param {?} injector\n     * @return {?}\n     */\n    ParentInjectorPromise.prototype.resolve = /**\n     * @param {?} injector\n     * @return {?}\n     */\n    function (injector) {\n        this.injector = injector; /** @type {?} */\n        ((\n        // Store the real injector on the element.\n        this.element.data))(this.injectorKey, injector);\n        // Release the element to prevent memory leaks.\n        this.element = /** @type {?} */ ((null));\n        // Run the queued callbacks.\n        this.callbacks.forEach(function (callback) { return callback(injector); });\n        this.callbacks.length = 0;\n    };\n    return ParentInjectorPromise;\n}());\nif (false) {\n    /** @type {?} */\n    ParentInjectorPromise.prototype.injector;\n    /** @type {?} */\n    ParentInjectorPromise.prototype.injectorKey;\n    /** @type {?} */\n    ParentInjectorPromise.prototype.callbacks;\n    /** @type {?} */\n    ParentInjectorPromise.prototype.element;\n}\n/**\n * @template T\n * @param {?} obj\n * @return {?}\n */\nfunction isThenable(obj) {\n    return isFunction((/** @type {?} */ (obj)).then);\n}\n//# sourceMappingURL=downgrade_component.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as angular from './angular1';\nimport { $COMPILE, $CONTROLLER, $HTTP_BACKEND, $INJECTOR, $TEMPLATE_CACHE } from './constants';\nimport { controllerKey, directiveNormalize, isFunction } from './util';\n/** @type {?} */\nvar REQUIRE_PREFIX_RE = /^(\\^\\^?)?(\\?)?(\\^\\^?)?/;\n/**\n * @record\n */\nexport function IBindingDestination() { }\n/* TODO: handle strange member:\n[key: string]: any;\n*/\n/** @type {?|undefined} */\nIBindingDestination.prototype.$onChanges;\n/**\n * @record\n */\nexport function IControllerInstance() { }\n/** @type {?|undefined} */\nIControllerInstance.prototype.$doCheck;\n/** @type {?|undefined} */\nIControllerInstance.prototype.$onDestroy;\n/** @type {?|undefined} */\nIControllerInstance.prototype.$onInit;\n/** @type {?|undefined} */\nIControllerInstance.prototype.$postLink;\nvar UpgradeHelper = /** @class */ (function () {\n    function UpgradeHelper(injector, name, elementRef, directive) {\n        this.injector = injector;\n        this.name = name;\n        this.$injector = injector.get($INJECTOR);\n        this.$compile = this.$injector.get($COMPILE);\n        this.$controller = this.$injector.get($CONTROLLER);\n        this.element = elementRef.nativeElement;\n        this.$element = angular.element(this.element);\n        this.directive = directive || UpgradeHelper.getDirective(this.$injector, name);\n    }\n    /**\n     * @param {?} $injector\n     * @param {?} name\n     * @return {?}\n     */\n    UpgradeHelper.getDirective = /**\n     * @param {?} $injector\n     * @param {?} name\n     * @return {?}\n     */\n    function ($injector, name) {\n        /** @type {?} */\n        var directives = $injector.get(name + 'Directive');\n        if (directives.length > 1) {\n            throw new Error(\"Only support single directive definition for: \" + name);\n        }\n        /** @type {?} */\n        var directive = directives[0];\n        // AngularJS will transform `link: xyz` to `compile: () => xyz`. So we can only tell there was a\n        // user-defined `compile` if there is no `link`. In other cases, we will just ignore `compile`.\n        if (directive.compile && !directive.link)\n            notSupported(name, 'compile');\n        if (directive.replace)\n            notSupported(name, 'replace');\n        if (directive.terminal)\n            notSupported(name, 'terminal');\n        return directive;\n    };\n    /**\n     * @param {?} $injector\n     * @param {?} directive\n     * @param {?=} fetchRemoteTemplate\n     * @return {?}\n     */\n    UpgradeHelper.getTemplate = /**\n     * @param {?} $injector\n     * @param {?} directive\n     * @param {?=} fetchRemoteTemplate\n     * @return {?}\n     */\n    function ($injector, directive, fetchRemoteTemplate) {\n        if (fetchRemoteTemplate === void 0) { fetchRemoteTemplate = false; }\n        if (directive.template !== undefined) {\n            return getOrCall(directive.template);\n        }\n        else if (directive.templateUrl) {\n            /** @type {?} */\n            var $templateCache_1 = /** @type {?} */ ($injector.get($TEMPLATE_CACHE));\n            /** @type {?} */\n            var url_1 = getOrCall(directive.templateUrl);\n            /** @type {?} */\n            var template = $templateCache_1.get(url_1);\n            if (template !== undefined) {\n                return template;\n            }\n            else if (!fetchRemoteTemplate) {\n                throw new Error('loading directive templates asynchronously is not supported');\n            }\n            return new Promise(function (resolve, reject) {\n                /** @type {?} */\n                var $httpBackend = /** @type {?} */ ($injector.get($HTTP_BACKEND));\n                $httpBackend('GET', url_1, null, function (status, response) {\n                    if (status === 200) {\n                        resolve($templateCache_1.put(url_1, response));\n                    }\n                    else {\n                        reject(\"GET component template from '\" + url_1 + \"' returned '\" + status + \": \" + response + \"'\");\n                    }\n                });\n            });\n        }\n        else {\n            throw new Error(\"Directive '\" + directive.name + \"' is not a component, it is missing template.\");\n        }\n    };\n    /**\n     * @param {?} controllerType\n     * @param {?} $scope\n     * @return {?}\n     */\n    UpgradeHelper.prototype.buildController = /**\n     * @param {?} controllerType\n     * @param {?} $scope\n     * @return {?}\n     */\n    function (controllerType, $scope) {\n        /** @type {?} */\n        var locals = { '$scope': $scope, '$element': this.$element };\n        /** @type {?} */\n        var controller = this.$controller(controllerType, locals, null, this.directive.controllerAs); /** @type {?} */\n        ((this.$element.data))(controllerKey(/** @type {?} */ ((this.directive.name))), controller);\n        return controller;\n    };\n    /**\n     * @param {?=} template\n     * @return {?}\n     */\n    UpgradeHelper.prototype.compileTemplate = /**\n     * @param {?=} template\n     * @return {?}\n     */\n    function (template) {\n        if (template === undefined) {\n            template = /** @type {?} */ (UpgradeHelper.getTemplate(this.$injector, this.directive));\n        }\n        return this.compileHtml(template);\n    };\n    /**\n     * @param {?} $scope\n     * @param {?=} controllerInstance\n     * @return {?}\n     */\n    UpgradeHelper.prototype.onDestroy = /**\n     * @param {?} $scope\n     * @param {?=} controllerInstance\n     * @return {?}\n     */\n    function ($scope, controllerInstance) {\n        if (controllerInstance && isFunction(controllerInstance.$onDestroy)) {\n            controllerInstance.$onDestroy();\n        }\n        $scope.$destroy();\n        // Clean the jQuery/jqLite data on the component+child elements.\n        // Equivelent to how jQuery/jqLite invoke `cleanData` on an Element (this.element)\n        //  https://github.com/jquery/jquery/blob/e743cbd28553267f955f71ea7248377915613fd9/src/manipulation.js#L223\n        //  https://github.com/angular/angular.js/blob/26ddc5f830f902a3d22f4b2aab70d86d4d688c82/src/jqLite.js#L306-L312\n        // `cleanData` will invoke the AngularJS `$destroy` DOM event\n        //  https://github.com/angular/angular.js/blob/26ddc5f830f902a3d22f4b2aab70d86d4d688c82/src/Angular.js#L1911-L1924\n        angular.element.cleanData([this.element]);\n        angular.element.cleanData(this.element.querySelectorAll('*'));\n    };\n    /**\n     * @return {?}\n     */\n    UpgradeHelper.prototype.prepareTransclusion = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        /** @type {?} */\n        var transclude = this.directive.transclude;\n        /** @type {?} */\n        var contentChildNodes = this.extractChildNodes();\n        /** @type {?} */\n        var attachChildrenFn = function (scope, cloneAttachFn) {\n            // Since AngularJS v1.5.8, `cloneAttachFn` will try to destroy the transclusion scope if\n            // `$template` is empty. Since the transcluded content comes from Angular, not AngularJS,\n            // there will be no transclusion scope here.\n            // Provide a dummy `scope.$destroy()` method to prevent `cloneAttachFn` from throwing.\n            scope = scope || { $destroy: function () { return undefined; } };\n            return /** @type {?} */ ((cloneAttachFn))($template, scope);\n        };\n        /** @type {?} */\n        var $template = contentChildNodes;\n        if (transclude) {\n            /** @type {?} */\n            var slots_1 = Object.create(null);\n            if (typeof transclude === 'object') {\n                $template = [];\n                /** @type {?} */\n                var slotMap_1 = Object.create(null);\n                /** @type {?} */\n                var filledSlots_1 = Object.create(null);\n                // Parse the element selectors.\n                Object.keys(transclude).forEach(function (slotName) {\n                    /** @type {?} */\n                    var selector = transclude[slotName];\n                    /** @type {?} */\n                    var optional = selector.charAt(0) === '?';\n                    selector = optional ? selector.substring(1) : selector;\n                    slotMap_1[selector] = slotName;\n                    slots_1[slotName] = null; // `null`: Defined but not yet filled.\n                    filledSlots_1[slotName] = optional; // Consider optional slots as filled.\n                });\n                // Add the matching elements into their slot.\n                contentChildNodes.forEach(function (node) {\n                    /** @type {?} */\n                    var slotName = slotMap_1[directiveNormalize(node.nodeName.toLowerCase())];\n                    if (slotName) {\n                        filledSlots_1[slotName] = true;\n                        slots_1[slotName] = slots_1[slotName] || [];\n                        slots_1[slotName].push(node);\n                    }\n                    else {\n                        $template.push(node);\n                    }\n                });\n                // Check for required slots that were not filled.\n                Object.keys(filledSlots_1).forEach(function (slotName) {\n                    if (!filledSlots_1[slotName]) {\n                        throw new Error(\"Required transclusion slot '\" + slotName + \"' on directive: \" + _this.name);\n                    }\n                });\n                Object.keys(slots_1).filter(function (slotName) { return slots_1[slotName]; }).forEach(function (slotName) {\n                    /** @type {?} */\n                    var nodes = slots_1[slotName];\n                    slots_1[slotName] = function (scope, cloneAttach) { return ((cloneAttach))(nodes, scope); };\n                });\n            }\n            // Attach `$$slots` to default slot transclude fn.\n            attachChildrenFn.$$slots = slots_1;\n            // AngularJS v1.6+ ignores empty or whitespace-only transcluded text nodes. But Angular\n            // removes all text content after the first interpolation and updates it later, after\n            // evaluating the expressions. This would result in AngularJS failing to recognize text\n            // nodes that start with an interpolation as transcluded content and use the fallback\n            // content instead.\n            // To avoid this issue, we add a\n            // [zero-width non-joiner character](https://en.wikipedia.org/wiki/Zero-width_non-joiner)\n            // to empty text nodes (which can only be a result of Angular removing their initial content).\n            // NOTE: Transcluded text content that starts with whitespace followed by an interpolation\n            //       will still fail to be detected by AngularJS v1.6+\n            $template.forEach(function (node) {\n                if (node.nodeType === Node.TEXT_NODE && !node.nodeValue) {\n                    node.nodeValue = '\\u200C';\n                }\n            });\n        }\n        return attachChildrenFn;\n    };\n    /**\n     * @param {?} controllerInstance\n     * @return {?}\n     */\n    UpgradeHelper.prototype.resolveAndBindRequiredControllers = /**\n     * @param {?} controllerInstance\n     * @return {?}\n     */\n    function (controllerInstance) {\n        /** @type {?} */\n        var directiveRequire = this.getDirectiveRequire();\n        /** @type {?} */\n        var requiredControllers = this.resolveRequire(directiveRequire);\n        if (controllerInstance && this.directive.bindToController && isMap(directiveRequire)) {\n            /** @type {?} */\n            var requiredControllersMap_1 = /** @type {?} */ (requiredControllers);\n            Object.keys(requiredControllersMap_1).forEach(function (key) {\n                controllerInstance[key] = requiredControllersMap_1[key];\n            });\n        }\n        return requiredControllers;\n    };\n    /**\n     * @param {?} html\n     * @return {?}\n     */\n    UpgradeHelper.prototype.compileHtml = /**\n     * @param {?} html\n     * @return {?}\n     */\n    function (html) {\n        this.element.innerHTML = html;\n        return this.$compile(this.element.childNodes);\n    };\n    /**\n     * @return {?}\n     */\n    UpgradeHelper.prototype.extractChildNodes = /**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var childNodes = [];\n        /** @type {?} */\n        var childNode;\n        while (childNode = this.element.firstChild) {\n            this.element.removeChild(childNode);\n            childNodes.push(childNode);\n        }\n        return childNodes;\n    };\n    /**\n     * @return {?}\n     */\n    UpgradeHelper.prototype.getDirectiveRequire = /**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var require = this.directive.require || /** @type {?} */ (((this.directive.controller && this.directive.name)));\n        if (isMap(require)) {\n            Object.keys(require).forEach(function (key) {\n                /** @type {?} */\n                var value = require[key];\n                /** @type {?} */\n                var match = /** @type {?} */ ((value.match(REQUIRE_PREFIX_RE)));\n                /** @type {?} */\n                var name = value.substring(match[0].length);\n                if (!name) {\n                    require[key] = match[0] + key;\n                }\n            });\n        }\n        return require;\n    };\n    /**\n     * @param {?} require\n     * @param {?=} controllerInstance\n     * @return {?}\n     */\n    UpgradeHelper.prototype.resolveRequire = /**\n     * @param {?} require\n     * @param {?=} controllerInstance\n     * @return {?}\n     */\n    function (require, controllerInstance) {\n        var _this = this;\n        if (!require) {\n            return null;\n        }\n        else if (Array.isArray(require)) {\n            return require.map(function (req) { return _this.resolveRequire(req); });\n        }\n        else if (typeof require === 'object') {\n            /** @type {?} */\n            var value_1 = {};\n            Object.keys(require).forEach(function (key) { return value_1[key] = /** @type {?} */ ((_this.resolveRequire(require[key]))); });\n            return value_1;\n        }\n        else if (typeof require === 'string') {\n            /** @type {?} */\n            var match = /** @type {?} */ ((require.match(REQUIRE_PREFIX_RE)));\n            /** @type {?} */\n            var inheritType = match[1] || match[3];\n            /** @type {?} */\n            var name_1 = require.substring(match[0].length);\n            /** @type {?} */\n            var isOptional = !!match[2];\n            /** @type {?} */\n            var searchParents = !!inheritType;\n            /** @type {?} */\n            var startOnParent = inheritType === '^^';\n            /** @type {?} */\n            var ctrlKey = controllerKey(name_1);\n            /** @type {?} */\n            var elem = startOnParent ? /** @type {?} */ ((this.$element.parent))() : this.$element;\n            /** @type {?} */\n            var value = searchParents ? /** @type {?} */ ((elem.inheritedData))(ctrlKey) : /** @type {?} */ ((elem.data))(ctrlKey);\n            if (!value && !isOptional) {\n                throw new Error(\"Unable to find required '\" + require + \"' in upgraded directive '\" + this.name + \"'.\");\n            }\n            return value;\n        }\n        else {\n            throw new Error(\"Unrecognized 'require' syntax on upgraded directive '\" + this.name + \"': \" + require);\n        }\n    };\n    return UpgradeHelper;\n}());\nexport { UpgradeHelper };\nif (false) {\n    /** @type {?} */\n    UpgradeHelper.prototype.$injector;\n    /** @type {?} */\n    UpgradeHelper.prototype.element;\n    /** @type {?} */\n    UpgradeHelper.prototype.$element;\n    /** @type {?} */\n    UpgradeHelper.prototype.directive;\n    /** @type {?} */\n    UpgradeHelper.prototype.$compile;\n    /** @type {?} */\n    UpgradeHelper.prototype.$controller;\n    /** @type {?} */\n    UpgradeHelper.prototype.injector;\n    /** @type {?} */\n    UpgradeHelper.prototype.name;\n}\n/**\n * @template T\n * @param {?} property\n * @return {?}\n */\nfunction getOrCall(property) {\n    return isFunction(property) ? property() : property;\n}\n/**\n * @template T\n * @param {?} value\n * @return {?}\n */\nfunction isMap(value) {\n    return value && !Array.isArray(value) && typeof value === 'object';\n}\n/**\n * @param {?} name\n * @param {?} feature\n * @return {?}\n */\nfunction notSupported(name, feature) {\n    throw new Error(\"Upgraded directive '\" + name + \"' contains unsupported feature: '\" + feature + \"'.\");\n}\n//# sourceMappingURL=upgrade_helper.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { Directive, ElementRef, EventEmitter, Inject, Injector } from '@angular/core';\nimport * as angular from '../common/angular1';\nimport { $SCOPE } from '../common/constants';\nimport { UpgradeHelper } from '../common/upgrade_helper';\nimport { isFunction, strictEquals } from '../common/util';\n/** @type {?} */\nvar CAMEL_CASE = /([A-Z])/g;\n/** @type {?} */\nvar INITIAL_VALUE = {\n    __UNINITIALIZED__: true\n};\n/** @type {?} */\nvar NOT_SUPPORTED = 'NOT_SUPPORTED';\nvar UpgradeNg1ComponentAdapterBuilder = /** @class */ (function () {\n    function UpgradeNg1ComponentAdapterBuilder(name) {\n        this.name = name;\n        this.inputs = [];\n        this.inputsRename = [];\n        this.outputs = [];\n        this.outputsRename = [];\n        this.propertyOutputs = [];\n        this.checkProperties = [];\n        this.propertyMap = {};\n        this.directive = null;\n        /** @type {?} */\n        var selector = name.replace(CAMEL_CASE, function (all, next) { return '-' + next.toLowerCase(); });\n        /** @type {?} */\n        var self = this;\n        /** @type {?} */\n        var directive = { selector: selector, inputs: this.inputsRename, outputs: this.outputsRename };\n        var MyClass = /** @class */ (function () {\n            function MyClass(scope, injector, elementRef) {\n                /** @type {?} */\n                var helper = new UpgradeHelper(injector, name, elementRef, this.directive);\n                return /** @type {?} */ (new UpgradeNg1ComponentAdapter(helper, scope, self.template, self.inputs, self.outputs, self.propertyOutputs, self.checkProperties, self.propertyMap));\n            }\n            /**\n             * @return {?}\n             */\n            MyClass.prototype.ngOnInit = /**\n             * @return {?}\n             */\n            function () {\n                /* needs to be here for ng2 to properly detect it */\n            };\n            /**\n             * @return {?}\n             */\n            MyClass.prototype.ngOnChanges = /**\n             * @return {?}\n             */\n            function () {\n                /* needs to be here for ng2 to properly detect it */\n            };\n            /**\n             * @return {?}\n             */\n            MyClass.prototype.ngDoCheck = /**\n             * @return {?}\n             */\n            function () {\n                /* needs to be here for ng2 to properly detect it */\n            };\n            /**\n             * @return {?}\n             */\n            MyClass.prototype.ngOnDestroy = /**\n             * @return {?}\n             */\n            function () {\n                /* needs to be here for ng2 to properly detect it */\n            };\n            MyClass.decorators = [\n                { type: Directive, args: [tslib_1.__assign({ jit: true }, directive),] },\n            ];\n            /** @nocollapse */\n            MyClass.ctorParameters = function () { return [\n                { type: undefined, decorators: [{ type: Inject, args: [$SCOPE,] }] },\n                { type: Injector },\n                { type: ElementRef }\n            ]; };\n            return MyClass;\n        }());\n        if (false) {\n            /** @type {?} */\n            MyClass.prototype.directive;\n        }\n        this.type = MyClass;\n    }\n    /**\n     * @return {?}\n     */\n    UpgradeNg1ComponentAdapterBuilder.prototype.extractBindings = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        /** @type {?} */\n        var btcIsObject = typeof /** @type {?} */ ((this.directive)).bindToController === 'object';\n        if (btcIsObject && Object.keys(/** @type {?} */ ((/** @type {?} */ ((this.directive)).scope))).length) {\n            throw new Error(\"Binding definitions on scope and controller at the same time are not supported.\");\n        }\n        /** @type {?} */\n        var context = (btcIsObject) ? /** @type {?} */ ((this.directive)).bindToController : /** @type {?} */ ((this.directive)).scope;\n        if (typeof context == 'object') {\n            Object.keys(context).forEach(function (propName) {\n                /** @type {?} */\n                var definition = context[propName];\n                /** @type {?} */\n                var bindingType = definition.charAt(0);\n                /** @type {?} */\n                var bindingOptions = definition.charAt(1);\n                /** @type {?} */\n                var attrName = definition.substring(bindingOptions === '?' ? 2 : 1) || propName;\n                /** @type {?} */\n                var inputName = \"input_\" + attrName;\n                /** @type {?} */\n                var inputNameRename = inputName + \": \" + attrName;\n                /** @type {?} */\n                var outputName = \"output_\" + attrName;\n                /** @type {?} */\n                var outputNameRename = outputName + \": \" + attrName;\n                /** @type {?} */\n                var outputNameRenameChange = outputNameRename + \"Change\";\n                switch (bindingType) {\n                    case '@':\n                    case '<':\n                        _this.inputs.push(inputName);\n                        _this.inputsRename.push(inputNameRename);\n                        _this.propertyMap[inputName] = propName;\n                        break;\n                    case '=':\n                        _this.inputs.push(inputName);\n                        _this.inputsRename.push(inputNameRename);\n                        _this.propertyMap[inputName] = propName;\n                        _this.outputs.push(outputName);\n                        _this.outputsRename.push(outputNameRenameChange);\n                        _this.propertyMap[outputName] = propName;\n                        _this.checkProperties.push(propName);\n                        _this.propertyOutputs.push(outputName);\n                        break;\n                    case '&':\n                        _this.outputs.push(outputName);\n                        _this.outputsRename.push(outputNameRename);\n                        _this.propertyMap[outputName] = propName;\n                        break;\n                    default:\n                        /** @type {?} */\n                        var json = JSON.stringify(context);\n                        throw new Error(\"Unexpected mapping '\" + bindingType + \"' in '\" + json + \"' in '\" + _this.name + \"' directive.\");\n                }\n            });\n        }\n    };\n    /**\n     * Upgrade ng1 components into Angular.\n     */\n    /**\n     * Upgrade ng1 components into Angular.\n     * @param {?} exportedComponents\n     * @param {?} $injector\n     * @return {?}\n     */\n    UpgradeNg1ComponentAdapterBuilder.resolve = /**\n     * Upgrade ng1 components into Angular.\n     * @param {?} exportedComponents\n     * @param {?} $injector\n     * @return {?}\n     */\n    function (exportedComponents, $injector) {\n        /** @type {?} */\n        var promises = Object.keys(exportedComponents).map(function (name) {\n            /** @type {?} */\n            var exportedComponent = exportedComponents[name];\n            exportedComponent.directive = UpgradeHelper.getDirective($injector, name);\n            exportedComponent.extractBindings();\n            return Promise\n                .resolve(UpgradeHelper.getTemplate($injector, exportedComponent.directive, true))\n                .then(function (template) { return exportedComponent.template = template; });\n        });\n        return Promise.all(promises);\n    };\n    return UpgradeNg1ComponentAdapterBuilder;\n}());\nexport { UpgradeNg1ComponentAdapterBuilder };\nif (false) {\n    /** @type {?} */\n    UpgradeNg1ComponentAdapterBuilder.prototype.type;\n    /** @type {?} */\n    UpgradeNg1ComponentAdapterBuilder.prototype.inputs;\n    /** @type {?} */\n    UpgradeNg1ComponentAdapterBuilder.prototype.inputsRename;\n    /** @type {?} */\n    UpgradeNg1ComponentAdapterBuilder.prototype.outputs;\n    /** @type {?} */\n    UpgradeNg1ComponentAdapterBuilder.prototype.outputsRename;\n    /** @type {?} */\n    UpgradeNg1ComponentAdapterBuilder.prototype.propertyOutputs;\n    /** @type {?} */\n    UpgradeNg1ComponentAdapterBuilder.prototype.checkProperties;\n    /** @type {?} */\n    UpgradeNg1ComponentAdapterBuilder.prototype.propertyMap;\n    /** @type {?} */\n    UpgradeNg1ComponentAdapterBuilder.prototype.directive;\n    /** @type {?} */\n    UpgradeNg1ComponentAdapterBuilder.prototype.template;\n    /** @type {?} */\n    UpgradeNg1ComponentAdapterBuilder.prototype.name;\n}\nvar UpgradeNg1ComponentAdapter = /** @class */ (function () {\n    function UpgradeNg1ComponentAdapter(helper, scope, template, inputs, outputs, propOuts, checkProperties, propertyMap) {\n        this.helper = helper;\n        this.template = template;\n        this.inputs = inputs;\n        this.outputs = outputs;\n        this.propOuts = propOuts;\n        this.checkProperties = checkProperties;\n        this.propertyMap = propertyMap;\n        this.controllerInstance = null;\n        this.destinationObj = null;\n        this.checkLastValues = [];\n        this.$element = null;\n        this.directive = helper.directive;\n        this.element = helper.element;\n        this.$element = helper.$element;\n        this.componentScope = scope.$new(!!this.directive.scope);\n        /** @type {?} */\n        var controllerType = this.directive.controller;\n        if (this.directive.bindToController && controllerType) {\n            this.controllerInstance = this.helper.buildController(controllerType, this.componentScope);\n            this.destinationObj = this.controllerInstance;\n        }\n        else {\n            this.destinationObj = this.componentScope;\n        }\n        for (var i = 0; i < inputs.length; i++) {\n            (/** @type {?} */ (this))[inputs[i]] = null;\n        }\n        for (var j = 0; j < outputs.length; j++) {\n            /** @type {?} */\n            var emitter = (/** @type {?} */ (this))[outputs[j]] = new EventEmitter();\n            if (this.propOuts.indexOf(outputs[j]) === -1) {\n                this.setComponentProperty(outputs[j], (function (emitter) { return function (value) { return emitter.emit(value); }; })(emitter));\n            }\n        }\n        for (var k = 0; k < propOuts.length; k++) {\n            this.checkLastValues.push(INITIAL_VALUE);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    UpgradeNg1ComponentAdapter.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var attachChildNodes = this.helper.prepareTransclusion();\n        /** @type {?} */\n        var linkFn = this.helper.compileTemplate(this.template);\n        /** @type {?} */\n        var controllerType = this.directive.controller;\n        /** @type {?} */\n        var bindToController = this.directive.bindToController;\n        if (controllerType && !bindToController) {\n            this.controllerInstance = this.helper.buildController(controllerType, this.componentScope);\n        }\n        /** @type {?} */\n        var requiredControllers = this.helper.resolveAndBindRequiredControllers(this.controllerInstance);\n        // Hook: $onInit\n        if (this.controllerInstance && isFunction(this.controllerInstance.$onInit)) {\n            this.controllerInstance.$onInit();\n        }\n        /** @type {?} */\n        var link = this.directive.link;\n        /** @type {?} */\n        var preLink = (typeof link == 'object') && (/** @type {?} */ (link)).pre;\n        /** @type {?} */\n        var postLink = (typeof link == 'object') ? (/** @type {?} */ (link)).post : link;\n        /** @type {?} */\n        var attrs = NOT_SUPPORTED;\n        /** @type {?} */\n        var transcludeFn = NOT_SUPPORTED;\n        if (preLink) {\n            preLink(this.componentScope, this.$element, attrs, requiredControllers, transcludeFn);\n        }\n        linkFn(this.componentScope, /** @type {?} */ ((null)), { parentBoundTranscludeFn: attachChildNodes });\n        if (postLink) {\n            postLink(this.componentScope, this.$element, attrs, requiredControllers, transcludeFn);\n        }\n        // Hook: $postLink\n        if (this.controllerInstance && isFunction(this.controllerInstance.$postLink)) {\n            this.controllerInstance.$postLink();\n        }\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    UpgradeNg1ComponentAdapter.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        var _this = this;\n        /** @type {?} */\n        var ng1Changes = {};\n        Object.keys(changes).forEach(function (name) {\n            /** @type {?} */\n            var change = changes[name];\n            _this.setComponentProperty(name, change.currentValue);\n            ng1Changes[_this.propertyMap[name]] = change;\n        });\n        if (isFunction(/** @type {?} */ ((this.destinationObj)).$onChanges)) {\n            /** @type {?} */ ((/** @type {?} */ ((this.destinationObj)).$onChanges))(ng1Changes);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    UpgradeNg1ComponentAdapter.prototype.ngDoCheck = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        /** @type {?} */\n        var destinationObj = this.destinationObj;\n        /** @type {?} */\n        var lastValues = this.checkLastValues;\n        /** @type {?} */\n        var checkProperties = this.checkProperties;\n        /** @type {?} */\n        var propOuts = this.propOuts;\n        checkProperties.forEach(function (propName, i) {\n            /** @type {?} */\n            var value = /** @type {?} */ ((destinationObj))[propName];\n            /** @type {?} */\n            var last = lastValues[i];\n            if (!strictEquals(last, value)) {\n                /** @type {?} */\n                var eventEmitter = (/** @type {?} */ (_this))[propOuts[i]];\n                eventEmitter.emit(lastValues[i] = value);\n            }\n        });\n        if (this.controllerInstance && isFunction(this.controllerInstance.$doCheck)) {\n            this.controllerInstance.$doCheck();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    UpgradeNg1ComponentAdapter.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () { this.helper.onDestroy(this.componentScope, this.controllerInstance); };\n    /**\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    UpgradeNg1ComponentAdapter.prototype.setComponentProperty = /**\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    function (name, value) {\n        /** @type {?} */ ((this.destinationObj))[this.propertyMap[name]] = value;\n    };\n    return UpgradeNg1ComponentAdapter;\n}());\nif (false) {\n    /** @type {?} */\n    UpgradeNg1ComponentAdapter.prototype.controllerInstance;\n    /** @type {?} */\n    UpgradeNg1ComponentAdapter.prototype.destinationObj;\n    /** @type {?} */\n    UpgradeNg1ComponentAdapter.prototype.checkLastValues;\n    /** @type {?} */\n    UpgradeNg1ComponentAdapter.prototype.directive;\n    /** @type {?} */\n    UpgradeNg1ComponentAdapter.prototype.element;\n    /** @type {?} */\n    UpgradeNg1ComponentAdapter.prototype.$element;\n    /** @type {?} */\n    UpgradeNg1ComponentAdapter.prototype.componentScope;\n    /** @type {?} */\n    UpgradeNg1ComponentAdapter.prototype.helper;\n    /** @type {?} */\n    UpgradeNg1ComponentAdapter.prototype.template;\n    /** @type {?} */\n    UpgradeNg1ComponentAdapter.prototype.inputs;\n    /** @type {?} */\n    UpgradeNg1ComponentAdapter.prototype.outputs;\n    /** @type {?} */\n    UpgradeNg1ComponentAdapter.prototype.propOuts;\n    /** @type {?} */\n    UpgradeNg1ComponentAdapter.prototype.checkProperties;\n    /** @type {?} */\n    UpgradeNg1ComponentAdapter.prototype.propertyMap;\n}\n//# sourceMappingURL=upgrade_ng1_adapter.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { Compiler, Injector, NgModule, NgZone, Testability } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport * as angular from '../common/angular1';\nimport { $$TESTABILITY, $COMPILE, $INJECTOR, $ROOT_SCOPE, COMPILER_KEY, INJECTOR_KEY, LAZY_MODULE_REF, NG_ZONE_KEY } from '../common/constants';\nimport { downgradeComponent } from '../common/downgrade_component';\nimport { downgradeInjectable } from '../common/downgrade_injectable';\nimport { Deferred, controllerKey, onError } from '../common/util';\nimport { UpgradeNg1ComponentAdapterBuilder } from './upgrade_ng1_adapter';\n/** @type {?} */\nvar upgradeCount = 0;\n/**\n * Use `UpgradeAdapter` to allow AngularJS and Angular to coexist in a single application.\n *\n * The `UpgradeAdapter` allows:\n * 1. creation of Angular component from AngularJS component directive\n *    (See [UpgradeAdapter#upgradeNg1Component()])\n * 2. creation of AngularJS directive from Angular component.\n *    (See [UpgradeAdapter#downgradeNg2Component()])\n * 3. Bootstrapping of a hybrid Angular application which contains both of the frameworks\n *    coexisting in a single application.\n *\n * \\@usageNotes\n * ### Mental Model\n *\n * When reasoning about how a hybrid application works it is useful to have a mental model which\n * describes what is happening and explains what is happening at the lowest level.\n *\n * 1. There are two independent frameworks running in a single application, each framework treats\n *    the other as a black box.\n * 2. Each DOM element on the page is owned exactly by one framework. Whichever framework\n *    instantiated the element is the owner. Each framework only updates/interacts with its own\n *    DOM elements and ignores others.\n * 3. AngularJS directives always execute inside AngularJS framework codebase regardless of\n *    where they are instantiated.\n * 4. Angular components always execute inside Angular framework codebase regardless of\n *    where they are instantiated.\n * 5. An AngularJS component can be upgraded to an Angular component. This creates an\n *    Angular directive, which bootstraps the AngularJS component directive in that location.\n * 6. An Angular component can be downgraded to an AngularJS component directive. This creates\n *    an AngularJS directive, which bootstraps the Angular component in that location.\n * 7. Whenever an adapter component is instantiated the host element is owned by the framework\n *    doing the instantiation. The other framework then instantiates and owns the view for that\n *    component. This implies that component bindings will always follow the semantics of the\n *    instantiation framework. The syntax is always that of Angular syntax.\n * 8. AngularJS is always bootstrapped first and owns the bottom most view.\n * 9. The new application is running in Angular zone, and therefore it no longer needs calls to\n *    `$apply()`.\n *\n * ### Example\n *\n * ```\n * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module), myCompilerOptions);\n * const module = angular.module('myExample', []);\n * module.directive('ng2Comp', adapter.downgradeNg2Component(Ng2Component));\n *\n * module.directive('ng1Hello', function() {\n *   return {\n *      scope: { title: '=' },\n *      template: 'ng1[Hello {{title}}!](<span ng-transclude></span>)'\n *   };\n * });\n *\n *\n * \\@Component({\n *   selector: 'ng2-comp',\n *   inputs: ['name'],\n *   template: 'ng2[<ng1-hello [title]=\"name\">transclude</ng1-hello>](<ng-content></ng-content>)',\n *   directives:\n * })\n * class Ng2Component {\n * }\n *\n * \\@NgModule({\n *   declarations: [Ng2Component, adapter.upgradeNg1Component('ng1Hello')],\n *   imports: [BrowserModule]\n * })\n * class MyNg2Module {}\n *\n *\n * document.body.innerHTML = '<ng2-comp name=\"World\">project</ng2-comp>';\n *\n * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n *   expect(document.body.textContent).toEqual(\n *       \"ng2[ng1[Hello World!](transclude)](project)\");\n * });\n *\n * ```\n *\n * @deprecated Deprecated since v5. Use `upgrade/static` instead, which also supports\n * [Ahead-of-Time compilation](guide/aot-compiler).\n */\nvar /**\n * Use `UpgradeAdapter` to allow AngularJS and Angular to coexist in a single application.\n *\n * The `UpgradeAdapter` allows:\n * 1. creation of Angular component from AngularJS component directive\n *    (See [UpgradeAdapter#upgradeNg1Component()])\n * 2. creation of AngularJS directive from Angular component.\n *    (See [UpgradeAdapter#downgradeNg2Component()])\n * 3. Bootstrapping of a hybrid Angular application which contains both of the frameworks\n *    coexisting in a single application.\n *\n * \\@usageNotes\n * ### Mental Model\n *\n * When reasoning about how a hybrid application works it is useful to have a mental model which\n * describes what is happening and explains what is happening at the lowest level.\n *\n * 1. There are two independent frameworks running in a single application, each framework treats\n *    the other as a black box.\n * 2. Each DOM element on the page is owned exactly by one framework. Whichever framework\n *    instantiated the element is the owner. Each framework only updates/interacts with its own\n *    DOM elements and ignores others.\n * 3. AngularJS directives always execute inside AngularJS framework codebase regardless of\n *    where they are instantiated.\n * 4. Angular components always execute inside Angular framework codebase regardless of\n *    where they are instantiated.\n * 5. An AngularJS component can be upgraded to an Angular component. This creates an\n *    Angular directive, which bootstraps the AngularJS component directive in that location.\n * 6. An Angular component can be downgraded to an AngularJS component directive. This creates\n *    an AngularJS directive, which bootstraps the Angular component in that location.\n * 7. Whenever an adapter component is instantiated the host element is owned by the framework\n *    doing the instantiation. The other framework then instantiates and owns the view for that\n *    component. This implies that component bindings will always follow the semantics of the\n *    instantiation framework. The syntax is always that of Angular syntax.\n * 8. AngularJS is always bootstrapped first and owns the bottom most view.\n * 9. The new application is running in Angular zone, and therefore it no longer needs calls to\n *    `$apply()`.\n *\n * ### Example\n *\n * ```\n * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module), myCompilerOptions);\n * const module = angular.module('myExample', []);\n * module.directive('ng2Comp', adapter.downgradeNg2Component(Ng2Component));\n *\n * module.directive('ng1Hello', function() {\n *   return {\n *      scope: { title: '=' },\n *      template: 'ng1[Hello {{title}}!](<span ng-transclude></span>)'\n *   };\n * });\n *\n *\n * \\@Component({\n *   selector: 'ng2-comp',\n *   inputs: ['name'],\n *   template: 'ng2[<ng1-hello [title]=\"name\">transclude</ng1-hello>](<ng-content></ng-content>)',\n *   directives:\n * })\n * class Ng2Component {\n * }\n *\n * \\@NgModule({\n *   declarations: [Ng2Component, adapter.upgradeNg1Component('ng1Hello')],\n *   imports: [BrowserModule]\n * })\n * class MyNg2Module {}\n *\n *\n * document.body.innerHTML = '<ng2-comp name=\"World\">project</ng2-comp>';\n *\n * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n *   expect(document.body.textContent).toEqual(\n *       \"ng2[ng1[Hello World!](transclude)](project)\");\n * });\n *\n * ```\n *\n * @deprecated Deprecated since v5. Use `upgrade/static` instead, which also supports\n * [Ahead-of-Time compilation](guide/aot-compiler).\n */\nUpgradeAdapter = /** @class */ (function () {\n    function UpgradeAdapter(ng2AppModule, compilerOptions) {\n        this.ng2AppModule = ng2AppModule;\n        this.compilerOptions = compilerOptions;\n        this.idPrefix = \"NG2_UPGRADE_\" + upgradeCount++ + \"_\";\n        this.downgradedComponents = [];\n        /**\n         * An internal map of ng1 components which need to up upgraded to ng2.\n         *\n         * We can't upgrade until injector is instantiated and we can retrieve the component metadata.\n         * For this reason we keep a list of components to upgrade until ng1 injector is bootstrapped.\n         *\n         * \\@internal\n         */\n        this.ng1ComponentsToBeUpgraded = {};\n        this.upgradedProviders = [];\n        this.moduleRef = null;\n        if (!ng2AppModule) {\n            throw new Error('UpgradeAdapter cannot be instantiated without an NgModule of the Angular app.');\n        }\n    }\n    /**\n     * Allows Angular Component to be used from AngularJS.\n     *\n     * Use `downgradeNg2Component` to create an AngularJS Directive Definition Factory from\n     * Angular Component. The adapter will bootstrap Angular component from within the\n     * AngularJS template.\n     *\n     * @usageNotes\n     * ### Mental Model\n     *\n     * 1. The component is instantiated by being listed in AngularJS template. This means that the\n     *    host element is controlled by AngularJS, but the component's view will be controlled by\n     *    Angular.\n     * 2. Even thought the component is instantiated in AngularJS, it will be using Angular\n     *    syntax. This has to be done, this way because we must follow Angular components do not\n     *    declare how the attributes should be interpreted.\n     * 3. `ng-model` is controlled by AngularJS and communicates with the downgraded Angular component\n     *    by way of the `ControlValueAccessor` interface from @angular/forms. Only components that\n     *    implement this interface are eligible.\n     *\n     * ### Supported Features\n     *\n     * - Bindings:\n     *   - Attribute: `<comp name=\"World\">`\n     *   - Interpolation:  `<comp greeting=\"Hello {{name}}!\">`\n     *   - Expression:  `<comp [name]=\"username\">`\n     *   - Event:  `<comp (close)=\"doSomething()\">`\n     *   - ng-model: `<comp ng-model=\"name\">`\n     * - Content projection: yes\n     *\n     * ### Example\n     *\n     * ```\n     * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module));\n     * const module = angular.module('myExample', []);\n     * module.directive('greet', adapter.downgradeNg2Component(Greeter));\n     *\n     * @Component({\n     *   selector: 'greet',\n     *   template: '{{salutation}} {{name}}! - <ng-content></ng-content>'\n     * })\n     * class Greeter {\n     *   @Input() salutation: string;\n     *   @Input() name: string;\n     * }\n     *\n     * @NgModule({\n     *   declarations: [Greeter],\n     *   imports: [BrowserModule]\n     * })\n     * class MyNg2Module {}\n     *\n     * document.body.innerHTML =\n     *   'ng1 template: <greet salutation=\"Hello\" [name]=\"world\">text</greet>';\n     *\n     * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n     *   expect(document.body.textContent).toEqual(\"ng1 template: Hello world! - text\");\n     * });\n     * ```\n     */\n    /**\n     * Allows Angular Component to be used from AngularJS.\n     *\n     * Use `downgradeNg2Component` to create an AngularJS Directive Definition Factory from\n     * Angular Component. The adapter will bootstrap Angular component from within the\n     * AngularJS template.\n     *\n     * \\@usageNotes\n     * ### Mental Model\n     *\n     * 1. The component is instantiated by being listed in AngularJS template. This means that the\n     *    host element is controlled by AngularJS, but the component's view will be controlled by\n     *    Angular.\n     * 2. Even thought the component is instantiated in AngularJS, it will be using Angular\n     *    syntax. This has to be done, this way because we must follow Angular components do not\n     *    declare how the attributes should be interpreted.\n     * 3. `ng-model` is controlled by AngularJS and communicates with the downgraded Angular component\n     *    by way of the `ControlValueAccessor` interface from \\@angular/forms. Only components that\n     *    implement this interface are eligible.\n     *\n     * ### Supported Features\n     *\n     * - Bindings:\n     *   - Attribute: `<comp name=\"World\">`\n     *   - Interpolation:  `<comp greeting=\"Hello {{name}}!\">`\n     *   - Expression:  `<comp [name]=\"username\">`\n     *   - Event:  `<comp (close)=\"doSomething()\">`\n     *   - ng-model: `<comp ng-model=\"name\">`\n     * - Content projection: yes\n     *\n     * ### Example\n     *\n     * ```\n     * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module));\n     * const module = angular.module('myExample', []);\n     * module.directive('greet', adapter.downgradeNg2Component(Greeter));\n     *\n     * \\@Component({\n     *   selector: 'greet',\n     *   template: '{{salutation}} {{name}}! - <ng-content></ng-content>'\n     * })\n     * class Greeter {\n     * \\@Input() salutation: string;\n     * \\@Input() name: string;\n     * }\n     *\n     * \\@NgModule({\n     *   declarations: [Greeter],\n     *   imports: [BrowserModule]\n     * })\n     * class MyNg2Module {}\n     *\n     * document.body.innerHTML =\n     *   'ng1 template: <greet salutation=\"Hello\" [name]=\"world\">text</greet>';\n     *\n     * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n     *   expect(document.body.textContent).toEqual(\"ng1 template: Hello world! - text\");\n     * });\n     * ```\n     * @param {?} component\n     * @return {?}\n     */\n    UpgradeAdapter.prototype.downgradeNg2Component = /**\n     * Allows Angular Component to be used from AngularJS.\n     *\n     * Use `downgradeNg2Component` to create an AngularJS Directive Definition Factory from\n     * Angular Component. The adapter will bootstrap Angular component from within the\n     * AngularJS template.\n     *\n     * \\@usageNotes\n     * ### Mental Model\n     *\n     * 1. The component is instantiated by being listed in AngularJS template. This means that the\n     *    host element is controlled by AngularJS, but the component's view will be controlled by\n     *    Angular.\n     * 2. Even thought the component is instantiated in AngularJS, it will be using Angular\n     *    syntax. This has to be done, this way because we must follow Angular components do not\n     *    declare how the attributes should be interpreted.\n     * 3. `ng-model` is controlled by AngularJS and communicates with the downgraded Angular component\n     *    by way of the `ControlValueAccessor` interface from \\@angular/forms. Only components that\n     *    implement this interface are eligible.\n     *\n     * ### Supported Features\n     *\n     * - Bindings:\n     *   - Attribute: `<comp name=\"World\">`\n     *   - Interpolation:  `<comp greeting=\"Hello {{name}}!\">`\n     *   - Expression:  `<comp [name]=\"username\">`\n     *   - Event:  `<comp (close)=\"doSomething()\">`\n     *   - ng-model: `<comp ng-model=\"name\">`\n     * - Content projection: yes\n     *\n     * ### Example\n     *\n     * ```\n     * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module));\n     * const module = angular.module('myExample', []);\n     * module.directive('greet', adapter.downgradeNg2Component(Greeter));\n     *\n     * \\@Component({\n     *   selector: 'greet',\n     *   template: '{{salutation}} {{name}}! - <ng-content></ng-content>'\n     * })\n     * class Greeter {\n     * \\@Input() salutation: string;\n     * \\@Input() name: string;\n     * }\n     *\n     * \\@NgModule({\n     *   declarations: [Greeter],\n     *   imports: [BrowserModule]\n     * })\n     * class MyNg2Module {}\n     *\n     * document.body.innerHTML =\n     *   'ng1 template: <greet salutation=\"Hello\" [name]=\"world\">text</greet>';\n     *\n     * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n     *   expect(document.body.textContent).toEqual(\"ng1 template: Hello world! - text\");\n     * });\n     * ```\n     * @param {?} component\n     * @return {?}\n     */\n    function (component) {\n        this.downgradedComponents.push(component);\n        return downgradeComponent({ component: component });\n    };\n    /**\n     * Allows AngularJS Component to be used from Angular.\n     *\n     * Use `upgradeNg1Component` to create an Angular component from AngularJS Component\n     * directive. The adapter will bootstrap AngularJS component from within the Angular\n     * template.\n     *\n     * @usageNotes\n     * ### Mental Model\n     *\n     * 1. The component is instantiated by being listed in Angular template. This means that the\n     *    host element is controlled by Angular, but the component's view will be controlled by\n     *    AngularJS.\n     *\n     * ### Supported Features\n     *\n     * - Bindings:\n     *   - Attribute: `<comp name=\"World\">`\n     *   - Interpolation:  `<comp greeting=\"Hello {{name}}!\">`\n     *   - Expression:  `<comp [name]=\"username\">`\n     *   - Event:  `<comp (close)=\"doSomething()\">`\n     * - Transclusion: yes\n     * - Only some of the features of\n     *   [Directive Definition Object](https://docs.angularjs.org/api/ng/service/$compile) are\n     *   supported:\n     *   - `compile`: not supported because the host element is owned by Angular, which does\n     *     not allow modifying DOM structure during compilation.\n     *   - `controller`: supported. (NOTE: injection of `$attrs` and `$transclude` is not supported.)\n     *   - `controllerAs`: supported.\n     *   - `bindToController`: supported.\n     *   - `link`: supported. (NOTE: only pre-link function is supported.)\n     *   - `name`: supported.\n     *   - `priority`: ignored.\n     *   - `replace`: not supported.\n     *   - `require`: supported.\n     *   - `restrict`: must be set to 'E'.\n     *   - `scope`: supported.\n     *   - `template`: supported.\n     *   - `templateUrl`: supported.\n     *   - `terminal`: ignored.\n     *   - `transclude`: supported.\n     *\n     *\n     * ### Example\n     *\n     * ```\n     * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module));\n     * const module = angular.module('myExample', []);\n     *\n     * module.directive('greet', function() {\n     *   return {\n     *     scope: {salutation: '=', name: '=' },\n     *     template: '{{salutation}} {{name}}! - <span ng-transclude></span>'\n     *   };\n     * });\n     *\n     * module.directive('ng2', adapter.downgradeNg2Component(Ng2Component));\n     *\n     * @Component({\n     *   selector: 'ng2',\n     *   template: 'ng2 template: <greet salutation=\"Hello\" [name]=\"world\">text</greet>'\n     * })\n     * class Ng2Component {\n     * }\n     *\n     * @NgModule({\n     *   declarations: [Ng2Component, adapter.upgradeNg1Component('greet')],\n     *   imports: [BrowserModule]\n     * })\n     * class MyNg2Module {}\n     *\n     * document.body.innerHTML = '<ng2></ng2>';\n     *\n     * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n     *   expect(document.body.textContent).toEqual(\"ng2 template: Hello world! - text\");\n     * });\n     * ```\n     */\n    /**\n     * Allows AngularJS Component to be used from Angular.\n     *\n     * Use `upgradeNg1Component` to create an Angular component from AngularJS Component\n     * directive. The adapter will bootstrap AngularJS component from within the Angular\n     * template.\n     *\n     * \\@usageNotes\n     * ### Mental Model\n     *\n     * 1. The component is instantiated by being listed in Angular template. This means that the\n     *    host element is controlled by Angular, but the component's view will be controlled by\n     *    AngularJS.\n     *\n     * ### Supported Features\n     *\n     * - Bindings:\n     *   - Attribute: `<comp name=\"World\">`\n     *   - Interpolation:  `<comp greeting=\"Hello {{name}}!\">`\n     *   - Expression:  `<comp [name]=\"username\">`\n     *   - Event:  `<comp (close)=\"doSomething()\">`\n     * - Transclusion: yes\n     * - Only some of the features of\n     *   [Directive Definition Object](https://docs.angularjs.org/api/ng/service/$compile) are\n     *   supported:\n     *   - `compile`: not supported because the host element is owned by Angular, which does\n     *     not allow modifying DOM structure during compilation.\n     *   - `controller`: supported. (NOTE: injection of `$attrs` and `$transclude` is not supported.)\n     *   - `controllerAs`: supported.\n     *   - `bindToController`: supported.\n     *   - `link`: supported. (NOTE: only pre-link function is supported.)\n     *   - `name`: supported.\n     *   - `priority`: ignored.\n     *   - `replace`: not supported.\n     *   - `require`: supported.\n     *   - `restrict`: must be set to 'E'.\n     *   - `scope`: supported.\n     *   - `template`: supported.\n     *   - `templateUrl`: supported.\n     *   - `terminal`: ignored.\n     *   - `transclude`: supported.\n     *\n     *\n     * ### Example\n     *\n     * ```\n     * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module));\n     * const module = angular.module('myExample', []);\n     *\n     * module.directive('greet', function() {\n     *   return {\n     *     scope: {salutation: '=', name: '=' },\n     *     template: '{{salutation}} {{name}}! - <span ng-transclude></span>'\n     *   };\n     * });\n     *\n     * module.directive('ng2', adapter.downgradeNg2Component(Ng2Component));\n     *\n     * \\@Component({\n     *   selector: 'ng2',\n     *   template: 'ng2 template: <greet salutation=\"Hello\" [name]=\"world\">text</greet>'\n     * })\n     * class Ng2Component {\n     * }\n     *\n     * \\@NgModule({\n     *   declarations: [Ng2Component, adapter.upgradeNg1Component('greet')],\n     *   imports: [BrowserModule]\n     * })\n     * class MyNg2Module {}\n     *\n     * document.body.innerHTML = '<ng2></ng2>';\n     *\n     * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n     *   expect(document.body.textContent).toEqual(\"ng2 template: Hello world! - text\");\n     * });\n     * ```\n     * @param {?} name\n     * @return {?}\n     */\n    UpgradeAdapter.prototype.upgradeNg1Component = /**\n     * Allows AngularJS Component to be used from Angular.\n     *\n     * Use `upgradeNg1Component` to create an Angular component from AngularJS Component\n     * directive. The adapter will bootstrap AngularJS component from within the Angular\n     * template.\n     *\n     * \\@usageNotes\n     * ### Mental Model\n     *\n     * 1. The component is instantiated by being listed in Angular template. This means that the\n     *    host element is controlled by Angular, but the component's view will be controlled by\n     *    AngularJS.\n     *\n     * ### Supported Features\n     *\n     * - Bindings:\n     *   - Attribute: `<comp name=\"World\">`\n     *   - Interpolation:  `<comp greeting=\"Hello {{name}}!\">`\n     *   - Expression:  `<comp [name]=\"username\">`\n     *   - Event:  `<comp (close)=\"doSomething()\">`\n     * - Transclusion: yes\n     * - Only some of the features of\n     *   [Directive Definition Object](https://docs.angularjs.org/api/ng/service/$compile) are\n     *   supported:\n     *   - `compile`: not supported because the host element is owned by Angular, which does\n     *     not allow modifying DOM structure during compilation.\n     *   - `controller`: supported. (NOTE: injection of `$attrs` and `$transclude` is not supported.)\n     *   - `controllerAs`: supported.\n     *   - `bindToController`: supported.\n     *   - `link`: supported. (NOTE: only pre-link function is supported.)\n     *   - `name`: supported.\n     *   - `priority`: ignored.\n     *   - `replace`: not supported.\n     *   - `require`: supported.\n     *   - `restrict`: must be set to 'E'.\n     *   - `scope`: supported.\n     *   - `template`: supported.\n     *   - `templateUrl`: supported.\n     *   - `terminal`: ignored.\n     *   - `transclude`: supported.\n     *\n     *\n     * ### Example\n     *\n     * ```\n     * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module));\n     * const module = angular.module('myExample', []);\n     *\n     * module.directive('greet', function() {\n     *   return {\n     *     scope: {salutation: '=', name: '=' },\n     *     template: '{{salutation}} {{name}}! - <span ng-transclude></span>'\n     *   };\n     * });\n     *\n     * module.directive('ng2', adapter.downgradeNg2Component(Ng2Component));\n     *\n     * \\@Component({\n     *   selector: 'ng2',\n     *   template: 'ng2 template: <greet salutation=\"Hello\" [name]=\"world\">text</greet>'\n     * })\n     * class Ng2Component {\n     * }\n     *\n     * \\@NgModule({\n     *   declarations: [Ng2Component, adapter.upgradeNg1Component('greet')],\n     *   imports: [BrowserModule]\n     * })\n     * class MyNg2Module {}\n     *\n     * document.body.innerHTML = '<ng2></ng2>';\n     *\n     * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n     *   expect(document.body.textContent).toEqual(\"ng2 template: Hello world! - text\");\n     * });\n     * ```\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        if ((/** @type {?} */ (this.ng1ComponentsToBeUpgraded)).hasOwnProperty(name)) {\n            return this.ng1ComponentsToBeUpgraded[name].type;\n        }\n        else {\n            return (this.ng1ComponentsToBeUpgraded[name] = new UpgradeNg1ComponentAdapterBuilder(name))\n                .type;\n        }\n    };\n    /**\n     * Registers the adapter's AngularJS upgrade module for unit testing in AngularJS.\n     * Use this instead of `angular.mock.module()` to load the upgrade module into\n     * the AngularJS testing injector.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```\n     * const upgradeAdapter = new UpgradeAdapter(MyNg2Module);\n     *\n     * // configure the adapter with upgrade/downgrade components and services\n     * upgradeAdapter.downgradeNg2Component(MyComponent);\n     *\n     * let upgradeAdapterRef: UpgradeAdapterRef;\n     * let $compile, $rootScope;\n     *\n     * // We must register the adapter before any calls to `inject()`\n     * beforeEach(() => {\n     *   upgradeAdapterRef = upgradeAdapter.registerForNg1Tests(['heroApp']);\n     * });\n     *\n     * beforeEach(inject((_$compile_, _$rootScope_) => {\n     *   $compile = _$compile_;\n     *   $rootScope = _$rootScope_;\n     * }));\n     *\n     * it(\"says hello\", (done) => {\n     *   upgradeAdapterRef.ready(() => {\n     *     const element = $compile(\"<my-component></my-component>\")($rootScope);\n     *     $rootScope.$apply();\n     *     expect(element.html()).toContain(\"Hello World\");\n     *     done();\n     *   })\n     * });\n     *\n     * ```\n     *\n     * @param modules any AngularJS modules that the upgrade module should depend upon\n     * @returns an `UpgradeAdapterRef`, which lets you register a `ready()` callback to\n     * run assertions once the Angular components are ready to test through AngularJS.\n     */\n    /**\n     * Registers the adapter's AngularJS upgrade module for unit testing in AngularJS.\n     * Use this instead of `angular.mock.module()` to load the upgrade module into\n     * the AngularJS testing injector.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```\n     * const upgradeAdapter = new UpgradeAdapter(MyNg2Module);\n     *\n     * // configure the adapter with upgrade/downgrade components and services\n     * upgradeAdapter.downgradeNg2Component(MyComponent);\n     *\n     * let upgradeAdapterRef: UpgradeAdapterRef;\n     * let $compile, $rootScope;\n     *\n     * // We must register the adapter before any calls to `inject()`\n     * beforeEach(() => {\n     *   upgradeAdapterRef = upgradeAdapter.registerForNg1Tests(['heroApp']);\n     * });\n     *\n     * beforeEach(inject((_$compile_, _$rootScope_) => {\n     *   $compile = _$compile_;\n     *   $rootScope = _$rootScope_;\n     * }));\n     *\n     * it(\"says hello\", (done) => {\n     *   upgradeAdapterRef.ready(() => {\n     *     const element = $compile(\"<my-component></my-component>\")($rootScope);\n     *     $rootScope.$apply();\n     *     expect(element.html()).toContain(\"Hello World\");\n     *     done();\n     *   })\n     * });\n     *\n     * ```\n     *\n     * @param {?=} modules any AngularJS modules that the upgrade module should depend upon\n     * @return {?} an `UpgradeAdapterRef`, which lets you register a `ready()` callback to\n     * run assertions once the Angular components are ready to test through AngularJS.\n     */\n    UpgradeAdapter.prototype.registerForNg1Tests = /**\n     * Registers the adapter's AngularJS upgrade module for unit testing in AngularJS.\n     * Use this instead of `angular.mock.module()` to load the upgrade module into\n     * the AngularJS testing injector.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```\n     * const upgradeAdapter = new UpgradeAdapter(MyNg2Module);\n     *\n     * // configure the adapter with upgrade/downgrade components and services\n     * upgradeAdapter.downgradeNg2Component(MyComponent);\n     *\n     * let upgradeAdapterRef: UpgradeAdapterRef;\n     * let $compile, $rootScope;\n     *\n     * // We must register the adapter before any calls to `inject()`\n     * beforeEach(() => {\n     *   upgradeAdapterRef = upgradeAdapter.registerForNg1Tests(['heroApp']);\n     * });\n     *\n     * beforeEach(inject((_$compile_, _$rootScope_) => {\n     *   $compile = _$compile_;\n     *   $rootScope = _$rootScope_;\n     * }));\n     *\n     * it(\"says hello\", (done) => {\n     *   upgradeAdapterRef.ready(() => {\n     *     const element = $compile(\"<my-component></my-component>\")($rootScope);\n     *     $rootScope.$apply();\n     *     expect(element.html()).toContain(\"Hello World\");\n     *     done();\n     *   })\n     * });\n     *\n     * ```\n     *\n     * @param {?=} modules any AngularJS modules that the upgrade module should depend upon\n     * @return {?} an `UpgradeAdapterRef`, which lets you register a `ready()` callback to\n     * run assertions once the Angular components are ready to test through AngularJS.\n     */\n    function (modules) {\n        var _this = this;\n        /** @type {?} */\n        var windowNgMock = (/** @type {?} */ (window))['angular'].mock;\n        if (!windowNgMock || !windowNgMock.module) {\n            throw new Error('Failed to find \\'angular.mock.module\\'.');\n        }\n        this.declareNg1Module(modules);\n        windowNgMock.module(this.ng1Module.name);\n        /** @type {?} */\n        var upgrade = new UpgradeAdapterRef();\n        this.ng2BootstrapDeferred.promise.then(function (ng1Injector) { (/** @type {?} */ (upgrade))._bootstrapDone(_this.moduleRef, ng1Injector); }, onError);\n        return upgrade;\n    };\n    /**\n     * Bootstrap a hybrid AngularJS / Angular application.\n     *\n     * This `bootstrap` method is a direct replacement (takes same arguments) for AngularJS\n     * [`bootstrap`](https://docs.angularjs.org/api/ng/function/angular.bootstrap) method. Unlike\n     * AngularJS, this bootstrap is asynchronous.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```\n     * const adapter = new UpgradeAdapter(MyNg2Module);\n     * const module = angular.module('myExample', []);\n     * module.directive('ng2', adapter.downgradeNg2Component(Ng2));\n     *\n     * module.directive('ng1', function() {\n     *   return {\n     *      scope: { title: '=' },\n     *      template: 'ng1[Hello {{title}}!](<span ng-transclude></span>)'\n     *   };\n     * });\n     *\n     *\n     * @Component({\n     *   selector: 'ng2',\n     *   inputs: ['name'],\n     *   template: 'ng2[<ng1 [title]=\"name\">transclude</ng1>](<ng-content></ng-content>)'\n     * })\n     * class Ng2 {\n     * }\n     *\n     * @NgModule({\n     *   declarations: [Ng2, adapter.upgradeNg1Component('ng1')],\n     *   imports: [BrowserModule]\n     * })\n     * class MyNg2Module {}\n     *\n     * document.body.innerHTML = '<ng2 name=\"World\">project</ng2>';\n     *\n     * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n     *   expect(document.body.textContent).toEqual(\n     *       \"ng2[ng1[Hello World!](transclude)](project)\");\n     * });\n     * ```\n     */\n    /**\n     * Bootstrap a hybrid AngularJS / Angular application.\n     *\n     * This `bootstrap` method is a direct replacement (takes same arguments) for AngularJS\n     * [`bootstrap`](https://docs.angularjs.org/api/ng/function/angular.bootstrap) method. Unlike\n     * AngularJS, this bootstrap is asynchronous.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```\n     * const adapter = new UpgradeAdapter(MyNg2Module);\n     * const module = angular.module('myExample', []);\n     * module.directive('ng2', adapter.downgradeNg2Component(Ng2));\n     *\n     * module.directive('ng1', function() {\n     *   return {\n     *      scope: { title: '=' },\n     *      template: 'ng1[Hello {{title}}!](<span ng-transclude></span>)'\n     *   };\n     * });\n     *\n     *\n     * \\@Component({\n     *   selector: 'ng2',\n     *   inputs: ['name'],\n     *   template: 'ng2[<ng1 [title]=\"name\">transclude</ng1>](<ng-content></ng-content>)'\n     * })\n     * class Ng2 {\n     * }\n     *\n     * \\@NgModule({\n     *   declarations: [Ng2, adapter.upgradeNg1Component('ng1')],\n     *   imports: [BrowserModule]\n     * })\n     * class MyNg2Module {}\n     *\n     * document.body.innerHTML = '<ng2 name=\"World\">project</ng2>';\n     *\n     * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n     *   expect(document.body.textContent).toEqual(\n     *       \"ng2[ng1[Hello World!](transclude)](project)\");\n     * });\n     * ```\n     * @param {?} element\n     * @param {?=} modules\n     * @param {?=} config\n     * @return {?}\n     */\n    UpgradeAdapter.prototype.bootstrap = /**\n     * Bootstrap a hybrid AngularJS / Angular application.\n     *\n     * This `bootstrap` method is a direct replacement (takes same arguments) for AngularJS\n     * [`bootstrap`](https://docs.angularjs.org/api/ng/function/angular.bootstrap) method. Unlike\n     * AngularJS, this bootstrap is asynchronous.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```\n     * const adapter = new UpgradeAdapter(MyNg2Module);\n     * const module = angular.module('myExample', []);\n     * module.directive('ng2', adapter.downgradeNg2Component(Ng2));\n     *\n     * module.directive('ng1', function() {\n     *   return {\n     *      scope: { title: '=' },\n     *      template: 'ng1[Hello {{title}}!](<span ng-transclude></span>)'\n     *   };\n     * });\n     *\n     *\n     * \\@Component({\n     *   selector: 'ng2',\n     *   inputs: ['name'],\n     *   template: 'ng2[<ng1 [title]=\"name\">transclude</ng1>](<ng-content></ng-content>)'\n     * })\n     * class Ng2 {\n     * }\n     *\n     * \\@NgModule({\n     *   declarations: [Ng2, adapter.upgradeNg1Component('ng1')],\n     *   imports: [BrowserModule]\n     * })\n     * class MyNg2Module {}\n     *\n     * document.body.innerHTML = '<ng2 name=\"World\">project</ng2>';\n     *\n     * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n     *   expect(document.body.textContent).toEqual(\n     *       \"ng2[ng1[Hello World!](transclude)](project)\");\n     * });\n     * ```\n     * @param {?} element\n     * @param {?=} modules\n     * @param {?=} config\n     * @return {?}\n     */\n    function (element, modules, config) {\n        var _this = this;\n        this.declareNg1Module(modules);\n        /** @type {?} */\n        var upgrade = new UpgradeAdapterRef();\n        /** @type {?} */\n        var windowAngular = (/** @type {?} */ (window /** TODO #???? */) /** TODO #???? */)['angular'];\n        windowAngular.resumeBootstrap = undefined;\n        this.ngZone.run(function () { angular.bootstrap(element, [_this.ng1Module.name], /** @type {?} */ ((config))); });\n        /** @type {?} */\n        var ng1BootstrapPromise = new Promise(function (resolve) {\n            if (windowAngular.resumeBootstrap) {\n                /** @type {?} */\n                var originalResumeBootstrap_1 = windowAngular.resumeBootstrap;\n                windowAngular.resumeBootstrap = function () {\n                    windowAngular.resumeBootstrap = originalResumeBootstrap_1;\n                    /** @type {?} */\n                    var r = windowAngular.resumeBootstrap.apply(this, arguments);\n                    resolve();\n                    return r;\n                };\n            }\n            else {\n                resolve();\n            }\n        });\n        Promise.all([this.ng2BootstrapDeferred.promise, ng1BootstrapPromise]).then(function (_a) {\n            var ng1Injector = _a[0];\n            /** @type {?} */ ((angular.element(element).data))(controllerKey(INJECTOR_KEY), /** @type {?} */ ((_this.moduleRef)).injector); /** @type {?} */\n            ((_this.moduleRef)).injector.get(NgZone).run(function () { (/** @type {?} */ (upgrade))._bootstrapDone(_this.moduleRef, ng1Injector); });\n        }, onError);\n        return upgrade;\n    };\n    /**\n     * Allows AngularJS service to be accessible from Angular.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```\n     * class Login { ... }\n     * class Server { ... }\n     *\n     * @Injectable()\n     * class Example {\n     *   constructor(@Inject('server') server, login: Login) {\n     *     ...\n     *   }\n     * }\n     *\n     * const module = angular.module('myExample', []);\n     * module.service('server', Server);\n     * module.service('login', Login);\n     *\n     * const adapter = new UpgradeAdapter(MyNg2Module);\n     * adapter.upgradeNg1Provider('server');\n     * adapter.upgradeNg1Provider('login', {asToken: Login});\n     *\n     * adapter.bootstrap(document.body, ['myExample']).ready((ref) => {\n     *   const example: Example = ref.ng2Injector.get(Example);\n     * });\n     *\n     * ```\n     */\n    /**\n     * Allows AngularJS service to be accessible from Angular.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```\n     * class Login { ... }\n     * class Server { ... }\n     *\n     * \\@Injectable()\n     * class Example {\n     *   constructor(\\@Inject('server') server, login: Login) {\n     *     ...\n     *   }\n     * }\n     *\n     * const module = angular.module('myExample', []);\n     * module.service('server', Server);\n     * module.service('login', Login);\n     *\n     * const adapter = new UpgradeAdapter(MyNg2Module);\n     * adapter.upgradeNg1Provider('server');\n     * adapter.upgradeNg1Provider('login', {asToken: Login});\n     *\n     * adapter.bootstrap(document.body, ['myExample']).ready((ref) => {\n     *   const example: Example = ref.ng2Injector.get(Example);\n     * });\n     *\n     * ```\n     * @param {?} name\n     * @param {?=} options\n     * @return {?}\n     */\n    UpgradeAdapter.prototype.upgradeNg1Provider = /**\n     * Allows AngularJS service to be accessible from Angular.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```\n     * class Login { ... }\n     * class Server { ... }\n     *\n     * \\@Injectable()\n     * class Example {\n     *   constructor(\\@Inject('server') server, login: Login) {\n     *     ...\n     *   }\n     * }\n     *\n     * const module = angular.module('myExample', []);\n     * module.service('server', Server);\n     * module.service('login', Login);\n     *\n     * const adapter = new UpgradeAdapter(MyNg2Module);\n     * adapter.upgradeNg1Provider('server');\n     * adapter.upgradeNg1Provider('login', {asToken: Login});\n     *\n     * adapter.bootstrap(document.body, ['myExample']).ready((ref) => {\n     *   const example: Example = ref.ng2Injector.get(Example);\n     * });\n     *\n     * ```\n     * @param {?} name\n     * @param {?=} options\n     * @return {?}\n     */\n    function (name, options) {\n        /** @type {?} */\n        var token = options && options.asToken || name;\n        this.upgradedProviders.push({\n            provide: token,\n            useFactory: function ($injector) { return $injector.get(name); },\n            deps: [$INJECTOR]\n        });\n    };\n    /**\n     * Allows Angular service to be accessible from AngularJS.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```\n     * class Example {\n     * }\n     *\n     * const adapter = new UpgradeAdapter(MyNg2Module);\n     *\n     * const module = angular.module('myExample', []);\n     * module.factory('example', adapter.downgradeNg2Provider(Example));\n     *\n     * adapter.bootstrap(document.body, ['myExample']).ready((ref) => {\n     *   const example: Example = ref.ng1Injector.get('example');\n     * });\n     *\n     * ```\n     */\n    /**\n     * Allows Angular service to be accessible from AngularJS.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```\n     * class Example {\n     * }\n     *\n     * const adapter = new UpgradeAdapter(MyNg2Module);\n     *\n     * const module = angular.module('myExample', []);\n     * module.factory('example', adapter.downgradeNg2Provider(Example));\n     *\n     * adapter.bootstrap(document.body, ['myExample']).ready((ref) => {\n     *   const example: Example = ref.ng1Injector.get('example');\n     * });\n     *\n     * ```\n     * @param {?} token\n     * @return {?}\n     */\n    UpgradeAdapter.prototype.downgradeNg2Provider = /**\n     * Allows Angular service to be accessible from AngularJS.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```\n     * class Example {\n     * }\n     *\n     * const adapter = new UpgradeAdapter(MyNg2Module);\n     *\n     * const module = angular.module('myExample', []);\n     * module.factory('example', adapter.downgradeNg2Provider(Example));\n     *\n     * adapter.bootstrap(document.body, ['myExample']).ready((ref) => {\n     *   const example: Example = ref.ng1Injector.get('example');\n     * });\n     *\n     * ```\n     * @param {?} token\n     * @return {?}\n     */\n    function (token) { return downgradeInjectable(token); };\n    /**\n     * Declare the AngularJS upgrade module for this adapter without bootstrapping the whole\n     * hybrid application.\n     *\n     * This method is automatically called by `bootstrap()` and `registerForNg1Tests()`.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```\n     * const upgradeAdapter = new UpgradeAdapter(MyNg2Module);\n     * upgradeAdapter.declareNg1Module(['heroApp']);\n     * ```\n     * @param {?=} modules The AngularJS modules that this upgrade module should depend upon.\n     * @return {?} The AngularJS upgrade module that is declared by this method\n     *\n     */\n    UpgradeAdapter.prototype.declareNg1Module = /**\n     * Declare the AngularJS upgrade module for this adapter without bootstrapping the whole\n     * hybrid application.\n     *\n     * This method is automatically called by `bootstrap()` and `registerForNg1Tests()`.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```\n     * const upgradeAdapter = new UpgradeAdapter(MyNg2Module);\n     * upgradeAdapter.declareNg1Module(['heroApp']);\n     * ```\n     * @param {?=} modules The AngularJS modules that this upgrade module should depend upon.\n     * @return {?} The AngularJS upgrade module that is declared by this method\n     *\n     */\n    function (modules) {\n        var _this = this;\n        if (modules === void 0) { modules = []; }\n        /** @type {?} */\n        var delayApplyExps = [];\n        /** @type {?} */\n        var original$applyFn;\n        /** @type {?} */\n        var rootScopePrototype;\n        /** @type {?} */\n        var rootScope;\n        /** @type {?} */\n        var upgradeAdapter = this;\n        /** @type {?} */\n        var ng1Module = this.ng1Module = angular.module(this.idPrefix, modules);\n        /** @type {?} */\n        var platformRef = platformBrowserDynamic();\n        this.ngZone = new NgZone({ enableLongStackTrace: Zone.hasOwnProperty('longStackTraceZoneSpec') });\n        this.ng2BootstrapDeferred = new Deferred();\n        ng1Module.factory(INJECTOR_KEY, function () { return ((_this.moduleRef)).injector.get(Injector); })\n            .factory(LAZY_MODULE_REF, [\n            INJECTOR_KEY,\n            function (injector) { return (/** @type {?} */ ({ injector: injector, needsNgZone: false })); }\n        ])\n            .constant(NG_ZONE_KEY, this.ngZone)\n            .factory(COMPILER_KEY, function () { return ((_this.moduleRef)).injector.get(Compiler); })\n            .config([\n            '$provide', '$injector',\n            function (provide, ng1Injector) {\n                provide.decorator($ROOT_SCOPE, [\n                    '$delegate',\n                    function (rootScopeDelegate) {\n                        // Capture the root apply so that we can delay first call to $apply until we\n                        // bootstrap Angular and then we replay and restore the $apply.\n                        rootScopePrototype = rootScopeDelegate.constructor.prototype;\n                        if (rootScopePrototype.hasOwnProperty('$apply')) {\n                            original$applyFn = rootScopePrototype.$apply;\n                            rootScopePrototype.$apply = function (exp) { return delayApplyExps.push(exp); };\n                        }\n                        else {\n                            throw new Error('Failed to find \\'$apply\\' on \\'$rootScope\\'!');\n                        }\n                        return rootScope = rootScopeDelegate;\n                    }\n                ]);\n                if (ng1Injector.has($$TESTABILITY)) {\n                    provide.decorator($$TESTABILITY, [\n                        '$delegate',\n                        function (testabilityDelegate) {\n                            /** @type {?} */\n                            var originalWhenStable = testabilityDelegate.whenStable;\n                            /** @type {?} */\n                            var newWhenStable = function (callback) {\n                                originalWhenStable.call(this, function () {\n                                    /** @type {?} */\n                                    var ng2Testability = /** @type {?} */ ((upgradeAdapter.moduleRef)).injector.get(Testability);\n                                    if (ng2Testability.isStable()) {\n                                        callback.apply(this, arguments);\n                                    }\n                                    else {\n                                        ng2Testability.whenStable(newWhenStable.bind(this, callback));\n                                    }\n                                });\n                            };\n                            testabilityDelegate.whenStable = newWhenStable;\n                            return testabilityDelegate;\n                        }\n                    ]);\n                }\n            }\n        ]);\n        ng1Module.run([\n            '$injector', '$rootScope',\n            function (ng1Injector, rootScope) {\n                UpgradeNg1ComponentAdapterBuilder.resolve(_this.ng1ComponentsToBeUpgraded, ng1Injector)\n                    .then(function () {\n                    /** @type {?} */\n                    var ngModule = {\n                        providers: [\n                            { provide: $INJECTOR, useFactory: function () { return ng1Injector; } },\n                            { provide: $COMPILE, useFactory: function () { return ng1Injector.get($COMPILE); } },\n                            _this.upgradedProviders\n                        ],\n                        imports: [_this.ng2AppModule],\n                        entryComponents: _this.downgradedComponents\n                    };\n                    var DynamicNgUpgradeModule = /** @class */ (function () {\n                        function DynamicNgUpgradeModule() {\n                        }\n                        /**\n                         * @return {?}\n                         */\n                        DynamicNgUpgradeModule.prototype.ngDoBootstrap = /**\n                         * @return {?}\n                         */\n                        function () { };\n                        DynamicNgUpgradeModule.decorators = [\n                            { type: NgModule, args: [tslib_1.__assign({ jit: true }, ngModule),] },\n                        ];\n                        /** @nocollapse */\n                        DynamicNgUpgradeModule.ctorParameters = function () { return []; };\n                        return DynamicNgUpgradeModule;\n                    }());\n                    platformRef\n                        .bootstrapModule(DynamicNgUpgradeModule, [/** @type {?} */ ((_this.compilerOptions)), { ngZone: _this.ngZone }])\n                        .then(function (ref) {\n                        _this.moduleRef = ref;\n                        _this.ngZone.run(function () {\n                            if (rootScopePrototype) {\n                                rootScopePrototype.$apply = original$applyFn; // restore original $apply\n                                while (delayApplyExps.length) {\n                                    rootScope.$apply(delayApplyExps.shift());\n                                }\n                                rootScopePrototype = null;\n                            }\n                        });\n                    })\n                        .then(function () { return _this.ng2BootstrapDeferred.resolve(ng1Injector); }, onError)\n                        .then(function () {\n                        /** @type {?} */\n                        var subscription = _this.ngZone.onMicrotaskEmpty.subscribe({ next: function () { return rootScope.$digest(); } });\n                        rootScope.$on('$destroy', function () { subscription.unsubscribe(); });\n                    });\n                })\n                    .catch(function (e) { return _this.ng2BootstrapDeferred.reject(e); });\n            }\n        ]);\n        return ng1Module;\n    };\n    return UpgradeAdapter;\n}());\n/**\n * Use `UpgradeAdapter` to allow AngularJS and Angular to coexist in a single application.\n *\n * The `UpgradeAdapter` allows:\n * 1. creation of Angular component from AngularJS component directive\n *    (See [UpgradeAdapter#upgradeNg1Component()])\n * 2. creation of AngularJS directive from Angular component.\n *    (See [UpgradeAdapter#downgradeNg2Component()])\n * 3. Bootstrapping of a hybrid Angular application which contains both of the frameworks\n *    coexisting in a single application.\n *\n * \\@usageNotes\n * ### Mental Model\n *\n * When reasoning about how a hybrid application works it is useful to have a mental model which\n * describes what is happening and explains what is happening at the lowest level.\n *\n * 1. There are two independent frameworks running in a single application, each framework treats\n *    the other as a black box.\n * 2. Each DOM element on the page is owned exactly by one framework. Whichever framework\n *    instantiated the element is the owner. Each framework only updates/interacts with its own\n *    DOM elements and ignores others.\n * 3. AngularJS directives always execute inside AngularJS framework codebase regardless of\n *    where they are instantiated.\n * 4. Angular components always execute inside Angular framework codebase regardless of\n *    where they are instantiated.\n * 5. An AngularJS component can be upgraded to an Angular component. This creates an\n *    Angular directive, which bootstraps the AngularJS component directive in that location.\n * 6. An Angular component can be downgraded to an AngularJS component directive. This creates\n *    an AngularJS directive, which bootstraps the Angular component in that location.\n * 7. Whenever an adapter component is instantiated the host element is owned by the framework\n *    doing the instantiation. The other framework then instantiates and owns the view for that\n *    component. This implies that component bindings will always follow the semantics of the\n *    instantiation framework. The syntax is always that of Angular syntax.\n * 8. AngularJS is always bootstrapped first and owns the bottom most view.\n * 9. The new application is running in Angular zone, and therefore it no longer needs calls to\n *    `$apply()`.\n *\n * ### Example\n *\n * ```\n * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module), myCompilerOptions);\n * const module = angular.module('myExample', []);\n * module.directive('ng2Comp', adapter.downgradeNg2Component(Ng2Component));\n *\n * module.directive('ng1Hello', function() {\n *   return {\n *      scope: { title: '=' },\n *      template: 'ng1[Hello {{title}}!](<span ng-transclude></span>)'\n *   };\n * });\n *\n *\n * \\@Component({\n *   selector: 'ng2-comp',\n *   inputs: ['name'],\n *   template: 'ng2[<ng1-hello [title]=\"name\">transclude</ng1-hello>](<ng-content></ng-content>)',\n *   directives:\n * })\n * class Ng2Component {\n * }\n *\n * \\@NgModule({\n *   declarations: [Ng2Component, adapter.upgradeNg1Component('ng1Hello')],\n *   imports: [BrowserModule]\n * })\n * class MyNg2Module {}\n *\n *\n * document.body.innerHTML = '<ng2-comp name=\"World\">project</ng2-comp>';\n *\n * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n *   expect(document.body.textContent).toEqual(\n *       \"ng2[ng1[Hello World!](transclude)](project)\");\n * });\n *\n * ```\n *\n * @deprecated Deprecated since v5. Use `upgrade/static` instead, which also supports\n * [Ahead-of-Time compilation](guide/aot-compiler).\n */\nexport { UpgradeAdapter };\nif (false) {\n    /** @type {?} */\n    UpgradeAdapter.prototype.idPrefix;\n    /** @type {?} */\n    UpgradeAdapter.prototype.downgradedComponents;\n    /**\n     * An internal map of ng1 components which need to up upgraded to ng2.\n     *\n     * We can't upgrade until injector is instantiated and we can retrieve the component metadata.\n     * For this reason we keep a list of components to upgrade until ng1 injector is bootstrapped.\n     *\n     * \\@internal\n     * @type {?}\n     */\n    UpgradeAdapter.prototype.ng1ComponentsToBeUpgraded;\n    /** @type {?} */\n    UpgradeAdapter.prototype.upgradedProviders;\n    /** @type {?} */\n    UpgradeAdapter.prototype.ngZone;\n    /** @type {?} */\n    UpgradeAdapter.prototype.ng1Module;\n    /** @type {?} */\n    UpgradeAdapter.prototype.moduleRef;\n    /** @type {?} */\n    UpgradeAdapter.prototype.ng2BootstrapDeferred;\n    /** @type {?} */\n    UpgradeAdapter.prototype.ng2AppModule;\n    /** @type {?} */\n    UpgradeAdapter.prototype.compilerOptions;\n}\n/**\n * Synchronous promise-like object to wrap parent injectors,\n * to preserve the synchronous nature of AngularJS's $compile.\n */\nvar /**\n * Synchronous promise-like object to wrap parent injectors,\n * to preserve the synchronous nature of AngularJS's $compile.\n */\nParentInjectorPromise = /** @class */ (function () {\n    function ParentInjectorPromise(element) {\n        this.element = element;\n        this.callbacks = [];\n        /** @type {?} */ ((\n        // store the promise on the element\n        element.data))(controllerKey(INJECTOR_KEY), this);\n    }\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    ParentInjectorPromise.prototype.then = /**\n     * @param {?} callback\n     * @return {?}\n     */\n    function (callback) {\n        if (this.injector) {\n            callback(this.injector);\n        }\n        else {\n            this.callbacks.push(callback);\n        }\n    };\n    /**\n     * @param {?} injector\n     * @return {?}\n     */\n    ParentInjectorPromise.prototype.resolve = /**\n     * @param {?} injector\n     * @return {?}\n     */\n    function (injector) {\n        this.injector = injector; /** @type {?} */\n        ((\n        // reset the element data to point to the real injector\n        this.element.data))(controllerKey(INJECTOR_KEY), injector);\n        // clean out the element to prevent memory leaks\n        this.element = /** @type {?} */ ((null));\n        // run all the queued callbacks\n        this.callbacks.forEach(function (callback) { return callback(injector); });\n        this.callbacks.length = 0;\n    };\n    return ParentInjectorPromise;\n}());\nif (false) {\n    /** @type {?} */\n    ParentInjectorPromise.prototype.injector;\n    /** @type {?} */\n    ParentInjectorPromise.prototype.callbacks;\n    /** @type {?} */\n    ParentInjectorPromise.prototype.element;\n}\n/**\n * Use `UpgradeAdapterRef` to control a hybrid AngularJS / Angular application.\n *\n * @deprecated Deprecated since v5. Use `upgrade/static` instead, which also supports\n * [Ahead-of-Time compilation](guide/aot-compiler).\n */\nvar /**\n * Use `UpgradeAdapterRef` to control a hybrid AngularJS / Angular application.\n *\n * @deprecated Deprecated since v5. Use `upgrade/static` instead, which also supports\n * [Ahead-of-Time compilation](guide/aot-compiler).\n */\nUpgradeAdapterRef = /** @class */ (function () {\n    function UpgradeAdapterRef() {\n        this._readyFn = null;\n        this.ng1RootScope = /** @type {?} */ ((null));\n        this.ng1Injector = /** @type {?} */ ((null));\n        this.ng2ModuleRef = /** @type {?} */ ((null));\n        this.ng2Injector = /** @type {?} */ ((null));\n    }\n    /**\n     * @param {?} ngModuleRef\n     * @param {?} ng1Injector\n     * @return {?}\n     */\n    UpgradeAdapterRef.prototype._bootstrapDone = /**\n     * @param {?} ngModuleRef\n     * @param {?} ng1Injector\n     * @return {?}\n     */\n    function (ngModuleRef, ng1Injector) {\n        this.ng2ModuleRef = ngModuleRef;\n        this.ng2Injector = ngModuleRef.injector;\n        this.ng1Injector = ng1Injector;\n        this.ng1RootScope = ng1Injector.get($ROOT_SCOPE);\n        this._readyFn && this._readyFn(this);\n    };\n    /**\n     * Register a callback function which is notified upon successful hybrid AngularJS / Angular\n     * application has been bootstrapped.\n     *\n     * The `ready` callback function is invoked inside the Angular zone, therefore it does not\n     * require a call to `$apply()`.\n     * @param {?} fn\n     * @return {?}\n     */\n    UpgradeAdapterRef.prototype.ready = /**\n     * Register a callback function which is notified upon successful hybrid AngularJS / Angular\n     * application has been bootstrapped.\n     *\n     * The `ready` callback function is invoked inside the Angular zone, therefore it does not\n     * require a call to `$apply()`.\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this._readyFn = fn; };\n    /**\n     * Dispose of running hybrid AngularJS / Angular application.\n     * @return {?}\n     */\n    UpgradeAdapterRef.prototype.dispose = /**\n     * Dispose of running hybrid AngularJS / Angular application.\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */ ((this.ng1Injector)).get($ROOT_SCOPE).$destroy(); /** @type {?} */\n        ((this.ng2ModuleRef)).destroy();\n    };\n    return UpgradeAdapterRef;\n}());\n/**\n * Use `UpgradeAdapterRef` to control a hybrid AngularJS / Angular application.\n *\n * @deprecated Deprecated since v5. Use `upgrade/static` instead, which also supports\n * [Ahead-of-Time compilation](guide/aot-compiler).\n */\nexport { UpgradeAdapterRef };\nif (false) {\n    /** @type {?} */\n    UpgradeAdapterRef.prototype._readyFn;\n    /** @type {?} */\n    UpgradeAdapterRef.prototype.ng1RootScope;\n    /** @type {?} */\n    UpgradeAdapterRef.prototype.ng1Injector;\n    /** @type {?} */\n    UpgradeAdapterRef.prototype.ng2ModuleRef;\n    /** @type {?} */\n    UpgradeAdapterRef.prototype.ng2Injector;\n}\n//# sourceMappingURL=upgrade_adapter.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { INJECTOR_KEY } from './constants';\n/**\n * \\@description\n *\n * A helper function to allow an Angular service to be accessible from AngularJS.\n *\n * *Part of the [upgrade/static](api?query=upgrade%2Fstatic)\n * library for hybrid upgrade apps that support AoT compilation*\n *\n * This helper function returns a factory function that provides access to the Angular\n * service identified by the `token` parameter.\n *\n * \\@usageNotes\n * ### Examples\n *\n * First ensure that the service to be downgraded is provided in an `NgModule`\n * that will be part of the upgrade application. For example, let's assume we have\n * defined `HeroesService`\n *\n * {\\@example upgrade/static/ts/full/module.ts region=\"ng2-heroes-service\"}\n *\n * and that we have included this in our upgrade app `NgModule`\n *\n * {\\@example upgrade/static/ts/full/module.ts region=\"ng2-module\"}\n *\n * Now we can register the `downgradeInjectable` factory function for the service\n * on an AngularJS module.\n *\n * {\\@example upgrade/static/ts/full/module.ts region=\"downgrade-ng2-heroes-service\"}\n *\n * Inside an AngularJS component's controller we can get hold of the\n * downgraded service via the name we gave when downgrading.\n *\n * {\\@example upgrade/static/ts/full/module.ts region=\"example-app\"}\n *\n * \\@experimental\n * @param {?} token an `InjectionToken` that identifies a service provided from Angular.\n *\n * @return {?} a [factory function](https://docs.angularjs.org/guide/di) that can be\n * used to register the service on an AngularJS module.\n *\n */\nexport function downgradeInjectable(token) {\n    /** @type {?} */\n    var factory = function (i) { return i.get(token); };\n    (/** @type {?} */ (factory))['$inject'] = [INJECTOR_KEY];\n    return factory;\n}\n//# sourceMappingURL=downgrade_injectable.js.map"]}